// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvrCmd.proto

#include "SvrCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace SvrCmd {
}  // namespace SvrCmd
void InitDefaults_SvrCmd_2eproto() {
}

constexpr ::google::protobuf::Metadata* file_level_metadata_SvrCmd_2eproto = nullptr;
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_SvrCmd_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_SvrCmd_2eproto = nullptr;
const ::google::protobuf::uint32 TableStruct_SvrCmd_2eproto::offsets[1] = {};
static constexpr ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static constexpr ::google::protobuf::Message* const* file_default_instances = NULL;

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_SvrCmd_2eproto = {
  {}, AddDescriptors_SvrCmd_2eproto, "SvrCmd.proto", schemas,
  file_default_instances, TableStruct_SvrCmd_2eproto::offsets,
  file_level_metadata_SvrCmd_2eproto, 0, file_level_enum_descriptors_SvrCmd_2eproto, file_level_service_descriptors_SvrCmd_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_SvrCmd_2eproto = {
  false, InitDefaults_SvrCmd_2eproto, 
  "\n\014SvrCmd.proto\022\006SvrCmd*\250\n\n\nEnumSvrCmd\022\022\n"
  "\016CMD_BEGIN_FALG\020\000\022\035\n\030CMD_GET_GAMESVR_INS"
  "TANCE\020\240\037\022\025\n\020CMD_COMMON_QUERY\020\241\037\022\033\n\026CMD_S"
  "UBMIT_GAME_RESULT\020\242\037\022\027\n\022CMD_USERLOG_RECO"
  "RD\020\243\037\022\027\n\022CMD_GAMELOG_RECORD\020\244\037\022\026\n\021CMD_AP"
  "PLOG_RECORD\020\245\037\022\031\n\024CMD_ADD_PLAYER_CHIPS\020\246"
  "\037\022\024\n\017CMD_APPLY_BUYIN\020\247\037\022\027\n\022CMD_USER_JOIN"
  "_GAME\020\250\037\022\030\n\023CMD_USER_LEAVE_GAME\020\251\037\022\030\n\023CM"
  "D_USER_ENTER_ROOM\020\252\037\022\027\n\022CMD_USER_QUIT_RO"
  "OM\020\253\037\022\026\n\021CMD_GAMESVR_START\020\254\037\022\027\n\022CMD_OPE"
  "N_GAME_ROOM\020\255\037\022\030\n\023CMD_GAME_ROOM_EMPTY\020\256\037"
  "\022\026\n\021CMD_GAMESVR_ALIVE\020\257\037\022\027\n\022CMD_USER_CHI"
  "PS_LOG\020\260\037\022\026\n\021CMD_HALL_START_UP\020\261\037\022\032\n\025CMD"
  "_FLUSH_USER_ONLINE\020\262\037\022\032\n\025CMD_TELL_USER_O"
  "FFLINE\020\263\037\022\033\n\026CMD_FLUSH_USER_IN_GAME\020\264\037\022\032"
  "\n\025CMD_DISPATCH_USER_MSG\020\265\037\022\032\n\025CMD_HALL_L"
  "OGIN_RECORD\020\266\037\022\032\n\025CMD_GAME_LOGIN_RECORD\020"
  "\267\037\022\031\n\024CMD_CHECK_USER_TOKEN\020\270\037\022\026\n\021CMD_KIC"
  "K_OUT_USER\020\271\037\022\031\n\024CMD_GET_INGAME_COUNT\020\272\037"
  "\022\031\n\024CMD_CHECK_USER_LOGIN\020\273\037\022\027\n\022CMD_FORBI"
  "DDEN_USER\020\274\037\022\037\n\032CMD_FLUSH_USER_GAMESESSI"
  "ON\020\275\037\022\036\n\031CMD_TELL_USER_LOGOUT_GAME\020\276\037\022\032\n"
  "\025CMD_GAME_BUY_CHIPS_IN\020\277\037\022\032\n\025CMD_GAME_OV"
  "ER_ACCOUNT\020\300\037\022\033\n\026CMD_GAME_LEAVE_ACCOUNT\020"
  "\301\037\022\036\n\031CMD_USER_BOX_TIME_RECOVER\020\302\037\022\034\n\027CM"
  "D_USER_BOX_TIME_PAUSE\020\303\037\022\027\n\022CMD_GAME_STA"
  "RT_BET\020\304\037\022\027\n\022CMD_GAME_ADD_CARRY\020\305\037\022\033\n\026CM"
  "D_MATCH_OVER_ACCOUNT\020\306\037\022\026\n\021CMD_SNGLOG_RE"
  "CORD\020\307\037\022\033\n\026CMD_SNG_GAMELOG_RECORD\020\310\037\022\025\n\020"
  "CMD_BANKRUPT_LOG\020\311\037\022\033\n\026CMD_USER_LOGIN_DC"
  "ENTER\020\312\037\022\033\n\026CMD_USER_LOGIN_GAMESVR\020\313\037\022\024\n"
  "\017CMD_NOTIFY_OPEN\020\314\037\022\032\n\025CMD_QUERY_ROOMMAT"
  "CHER\020\315\037\022\033\n\026CMD_ROOMMATCHER_STATUS\020\316\037\022\033\n\026"
  "CMD_NOTIFY_TOKEN_LOGIN\020\317\037b\006proto3"
,
  "SvrCmd.proto", &assign_descriptors_table_SvrCmd_2eproto, 1353,
};

void AddDescriptors_SvrCmd_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_SvrCmd_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SvrCmd_2eproto = []() { AddDescriptors_SvrCmd_2eproto(); return true; }();
namespace SvrCmd {
const ::google::protobuf::EnumDescriptor* EnumSvrCmd_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_SvrCmd_2eproto);
  return file_level_enum_descriptors_SvrCmd_2eproto[0];
}
bool EnumSvrCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
    case 4016:
    case 4017:
    case 4018:
    case 4019:
    case 4020:
    case 4021:
    case 4022:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4030:
    case 4031:
    case 4032:
    case 4033:
    case 4034:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
    case 4039:
    case 4040:
    case 4041:
    case 4042:
    case 4043:
    case 4044:
    case 4045:
    case 4046:
    case 4047:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SvrCmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
