// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvrMsg.proto

#ifndef PROTOBUF_INCLUDED_SvrMsg_2eproto
#define PROTOBUF_INCLUDED_SvrMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SvrMsg_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SvrMsg_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[90]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SvrMsg_2eproto();
namespace SvrMsg {
class AddPlayerChipsRequest;
class AddPlayerChipsRequestDefaultTypeInternal;
extern AddPlayerChipsRequestDefaultTypeInternal _AddPlayerChipsRequest_default_instance_;
class AddPlayerChipsResponse;
class AddPlayerChipsResponseDefaultTypeInternal;
extern AddPlayerChipsResponseDefaultTypeInternal _AddPlayerChipsResponse_default_instance_;
class AppLogRecordRequest;
class AppLogRecordRequestDefaultTypeInternal;
extern AppLogRecordRequestDefaultTypeInternal _AppLogRecordRequest_default_instance_;
class AppLogRecordResponse;
class AppLogRecordResponseDefaultTypeInternal;
extern AppLogRecordResponseDefaultTypeInternal _AppLogRecordResponse_default_instance_;
class BankruptLogRequest;
class BankruptLogRequestDefaultTypeInternal;
extern BankruptLogRequestDefaultTypeInternal _BankruptLogRequest_default_instance_;
class BankruptLogResponse;
class BankruptLogResponseDefaultTypeInternal;
extern BankruptLogResponseDefaultTypeInternal _BankruptLogResponse_default_instance_;
class CheckUserLoginRequest;
class CheckUserLoginRequestDefaultTypeInternal;
extern CheckUserLoginRequestDefaultTypeInternal _CheckUserLoginRequest_default_instance_;
class CheckUserLoginResponse;
class CheckUserLoginResponseDefaultTypeInternal;
extern CheckUserLoginResponseDefaultTypeInternal _CheckUserLoginResponse_default_instance_;
class CheckUserTokenRequest;
class CheckUserTokenRequestDefaultTypeInternal;
extern CheckUserTokenRequestDefaultTypeInternal _CheckUserTokenRequest_default_instance_;
class CheckUserTokenResponse;
class CheckUserTokenResponseDefaultTypeInternal;
extern CheckUserTokenResponseDefaultTypeInternal _CheckUserTokenResponse_default_instance_;
class CommQueryRequest;
class CommQueryRequestDefaultTypeInternal;
extern CommQueryRequestDefaultTypeInternal _CommQueryRequest_default_instance_;
class CommQueryResponse;
class CommQueryResponseDefaultTypeInternal;
extern CommQueryResponseDefaultTypeInternal _CommQueryResponse_default_instance_;
class DBRow;
class DBRowDefaultTypeInternal;
extern DBRowDefaultTypeInternal _DBRow_default_instance_;
class DispatchUserMsgRequest;
class DispatchUserMsgRequestDefaultTypeInternal;
extern DispatchUserMsgRequestDefaultTypeInternal _DispatchUserMsgRequest_default_instance_;
class DispatchUserMsgResponse;
class DispatchUserMsgResponseDefaultTypeInternal;
extern DispatchUserMsgResponseDefaultTypeInternal _DispatchUserMsgResponse_default_instance_;
class FlushUserGameSessionRequest;
class FlushUserGameSessionRequestDefaultTypeInternal;
extern FlushUserGameSessionRequestDefaultTypeInternal _FlushUserGameSessionRequest_default_instance_;
class FlushUserGameSessionResponse;
class FlushUserGameSessionResponseDefaultTypeInternal;
extern FlushUserGameSessionResponseDefaultTypeInternal _FlushUserGameSessionResponse_default_instance_;
class FlushUserInGameRequest;
class FlushUserInGameRequestDefaultTypeInternal;
extern FlushUserInGameRequestDefaultTypeInternal _FlushUserInGameRequest_default_instance_;
class FlushUserInGameResponse;
class FlushUserInGameResponseDefaultTypeInternal;
extern FlushUserInGameResponseDefaultTypeInternal _FlushUserInGameResponse_default_instance_;
class FlushUserOnlineRequest;
class FlushUserOnlineRequestDefaultTypeInternal;
extern FlushUserOnlineRequestDefaultTypeInternal _FlushUserOnlineRequest_default_instance_;
class FlushUserOnlineResponse;
class FlushUserOnlineResponseDefaultTypeInternal;
extern FlushUserOnlineResponseDefaultTypeInternal _FlushUserOnlineResponse_default_instance_;
class ForbiddenUserRequest;
class ForbiddenUserRequestDefaultTypeInternal;
extern ForbiddenUserRequestDefaultTypeInternal _ForbiddenUserRequest_default_instance_;
class ForbiddenUserResponse;
class ForbiddenUserResponseDefaultTypeInternal;
extern ForbiddenUserResponseDefaultTypeInternal _ForbiddenUserResponse_default_instance_;
class GameAddCarryRequest;
class GameAddCarryRequestDefaultTypeInternal;
extern GameAddCarryRequestDefaultTypeInternal _GameAddCarryRequest_default_instance_;
class GameAddCarryResponse;
class GameAddCarryResponseDefaultTypeInternal;
extern GameAddCarryResponseDefaultTypeInternal _GameAddCarryResponse_default_instance_;
class GameBuyChipsInRequest;
class GameBuyChipsInRequestDefaultTypeInternal;
extern GameBuyChipsInRequestDefaultTypeInternal _GameBuyChipsInRequest_default_instance_;
class GameBuyChipsInResponse;
class GameBuyChipsInResponseDefaultTypeInternal;
extern GameBuyChipsInResponseDefaultTypeInternal _GameBuyChipsInResponse_default_instance_;
class GameLeaveAccountRequest;
class GameLeaveAccountRequestDefaultTypeInternal;
extern GameLeaveAccountRequestDefaultTypeInternal _GameLeaveAccountRequest_default_instance_;
class GameLeaveAccountResponse;
class GameLeaveAccountResponseDefaultTypeInternal;
extern GameLeaveAccountResponseDefaultTypeInternal _GameLeaveAccountResponse_default_instance_;
class GameLogRequest;
class GameLogRequestDefaultTypeInternal;
extern GameLogRequestDefaultTypeInternal _GameLogRequest_default_instance_;
class GameLogResponse;
class GameLogResponseDefaultTypeInternal;
extern GameLogResponseDefaultTypeInternal _GameLogResponse_default_instance_;
class GameLoginRecordRequest;
class GameLoginRecordRequestDefaultTypeInternal;
extern GameLoginRecordRequestDefaultTypeInternal _GameLoginRecordRequest_default_instance_;
class GameLoginRecordResponse;
class GameLoginRecordResponseDefaultTypeInternal;
extern GameLoginRecordResponseDefaultTypeInternal _GameLoginRecordResponse_default_instance_;
class GameOverAccountRequest;
class GameOverAccountRequestDefaultTypeInternal;
extern GameOverAccountRequestDefaultTypeInternal _GameOverAccountRequest_default_instance_;
class GameOverAccountResponse;
class GameOverAccountResponseDefaultTypeInternal;
extern GameOverAccountResponseDefaultTypeInternal _GameOverAccountResponse_default_instance_;
class GameRoomEmptyRequest;
class GameRoomEmptyRequestDefaultTypeInternal;
extern GameRoomEmptyRequestDefaultTypeInternal _GameRoomEmptyRequest_default_instance_;
class GameRoomEmptyResponse;
class GameRoomEmptyResponseDefaultTypeInternal;
extern GameRoomEmptyResponseDefaultTypeInternal _GameRoomEmptyResponse_default_instance_;
class GameStartBetRequest;
class GameStartBetRequestDefaultTypeInternal;
extern GameStartBetRequestDefaultTypeInternal _GameStartBetRequest_default_instance_;
class GameStartBetResponse;
class GameStartBetResponseDefaultTypeInternal;
extern GameStartBetResponseDefaultTypeInternal _GameStartBetResponse_default_instance_;
class GameSvrAliveRequest;
class GameSvrAliveRequestDefaultTypeInternal;
extern GameSvrAliveRequestDefaultTypeInternal _GameSvrAliveRequest_default_instance_;
class GameSvrAliveResponse;
class GameSvrAliveResponseDefaultTypeInternal;
extern GameSvrAliveResponseDefaultTypeInternal _GameSvrAliveResponse_default_instance_;
class GameSvrStartRequest;
class GameSvrStartRequestDefaultTypeInternal;
extern GameSvrStartRequestDefaultTypeInternal _GameSvrStartRequest_default_instance_;
class GameSvrStartResponse;
class GameSvrStartResponseDefaultTypeInternal;
extern GameSvrStartResponseDefaultTypeInternal _GameSvrStartResponse_default_instance_;
class GetGameSvrInstanceRequest;
class GetGameSvrInstanceRequestDefaultTypeInternal;
extern GetGameSvrInstanceRequestDefaultTypeInternal _GetGameSvrInstanceRequest_default_instance_;
class GetGameSvrInstanceResponse;
class GetGameSvrInstanceResponseDefaultTypeInternal;
extern GetGameSvrInstanceResponseDefaultTypeInternal _GetGameSvrInstanceResponse_default_instance_;
class GetInGameCountRequest;
class GetInGameCountRequestDefaultTypeInternal;
extern GetInGameCountRequestDefaultTypeInternal _GetInGameCountRequest_default_instance_;
class GetInGameCountResponse;
class GetInGameCountResponseDefaultTypeInternal;
extern GetInGameCountResponseDefaultTypeInternal _GetInGameCountResponse_default_instance_;
class HallLoginRecordRequest;
class HallLoginRecordRequestDefaultTypeInternal;
extern HallLoginRecordRequestDefaultTypeInternal _HallLoginRecordRequest_default_instance_;
class HallLoginRecordResponse;
class HallLoginRecordResponseDefaultTypeInternal;
extern HallLoginRecordResponseDefaultTypeInternal _HallLoginRecordResponse_default_instance_;
class HallStartUpRequest;
class HallStartUpRequestDefaultTypeInternal;
extern HallStartUpRequestDefaultTypeInternal _HallStartUpRequest_default_instance_;
class HallStartUpResponse;
class HallStartUpResponseDefaultTypeInternal;
extern HallStartUpResponseDefaultTypeInternal _HallStartUpResponse_default_instance_;
class KickOutUserRequest;
class KickOutUserRequestDefaultTypeInternal;
extern KickOutUserRequestDefaultTypeInternal _KickOutUserRequest_default_instance_;
class KickOutUserResponse;
class KickOutUserResponseDefaultTypeInternal;
extern KickOutUserResponseDefaultTypeInternal _KickOutUserResponse_default_instance_;
class MatchOverAccountRequest;
class MatchOverAccountRequestDefaultTypeInternal;
extern MatchOverAccountRequestDefaultTypeInternal _MatchOverAccountRequest_default_instance_;
class MatchOverAccountResponse;
class MatchOverAccountResponseDefaultTypeInternal;
extern MatchOverAccountResponseDefaultTypeInternal _MatchOverAccountResponse_default_instance_;
class NotifyOpenRequest;
class NotifyOpenRequestDefaultTypeInternal;
extern NotifyOpenRequestDefaultTypeInternal _NotifyOpenRequest_default_instance_;
class NotifyOpenResponse;
class NotifyOpenResponseDefaultTypeInternal;
extern NotifyOpenResponseDefaultTypeInternal _NotifyOpenResponse_default_instance_;
class NotifyTokenLoginRequest;
class NotifyTokenLoginRequestDefaultTypeInternal;
extern NotifyTokenLoginRequestDefaultTypeInternal _NotifyTokenLoginRequest_default_instance_;
class NotifyTokenLoginResponse;
class NotifyTokenLoginResponseDefaultTypeInternal;
extern NotifyTokenLoginResponseDefaultTypeInternal _NotifyTokenLoginResponse_default_instance_;
class OpenGameRoomRequest;
class OpenGameRoomRequestDefaultTypeInternal;
extern OpenGameRoomRequestDefaultTypeInternal _OpenGameRoomRequest_default_instance_;
class OpenGameRoomResponse;
class OpenGameRoomResponseDefaultTypeInternal;
extern OpenGameRoomResponseDefaultTypeInternal _OpenGameRoomResponse_default_instance_;
class PlayerGameResult;
class PlayerGameResultDefaultTypeInternal;
extern PlayerGameResultDefaultTypeInternal _PlayerGameResult_default_instance_;
class QueryRoomMatchRequest;
class QueryRoomMatchRequestDefaultTypeInternal;
extern QueryRoomMatchRequestDefaultTypeInternal _QueryRoomMatchRequest_default_instance_;
class QueryRoomMatchResponse;
class QueryRoomMatchResponseDefaultTypeInternal;
extern QueryRoomMatchResponseDefaultTypeInternal _QueryRoomMatchResponse_default_instance_;
class RoomMatchStatusRequest;
class RoomMatchStatusRequestDefaultTypeInternal;
extern RoomMatchStatusRequestDefaultTypeInternal _RoomMatchStatusRequest_default_instance_;
class RoomMatchStatusResponse;
class RoomMatchStatusResponseDefaultTypeInternal;
extern RoomMatchStatusResponseDefaultTypeInternal _RoomMatchStatusResponse_default_instance_;
class SubmitGameResultRequest;
class SubmitGameResultRequestDefaultTypeInternal;
extern SubmitGameResultRequestDefaultTypeInternal _SubmitGameResultRequest_default_instance_;
class SubmitGameResultResponse;
class SubmitGameResultResponseDefaultTypeInternal;
extern SubmitGameResultResponseDefaultTypeInternal _SubmitGameResultResponse_default_instance_;
class TellUserLogoutGameRequest;
class TellUserLogoutGameRequestDefaultTypeInternal;
extern TellUserLogoutGameRequestDefaultTypeInternal _TellUserLogoutGameRequest_default_instance_;
class TellUserLogoutGameResponse;
class TellUserLogoutGameResponseDefaultTypeInternal;
extern TellUserLogoutGameResponseDefaultTypeInternal _TellUserLogoutGameResponse_default_instance_;
class TellUserOfflineRequest;
class TellUserOfflineRequestDefaultTypeInternal;
extern TellUserOfflineRequestDefaultTypeInternal _TellUserOfflineRequest_default_instance_;
class TellUserOfflineResponse;
class TellUserOfflineResponseDefaultTypeInternal;
extern TellUserOfflineResponseDefaultTypeInternal _TellUserOfflineResponse_default_instance_;
class UserBoxTimePauseRequest;
class UserBoxTimePauseRequestDefaultTypeInternal;
extern UserBoxTimePauseRequestDefaultTypeInternal _UserBoxTimePauseRequest_default_instance_;
class UserBoxTimePauseResponse;
class UserBoxTimePauseResponseDefaultTypeInternal;
extern UserBoxTimePauseResponseDefaultTypeInternal _UserBoxTimePauseResponse_default_instance_;
class UserBoxTimeRecoverRequest;
class UserBoxTimeRecoverRequestDefaultTypeInternal;
extern UserBoxTimeRecoverRequestDefaultTypeInternal _UserBoxTimeRecoverRequest_default_instance_;
class UserBoxTimeRecoverResponse;
class UserBoxTimeRecoverResponseDefaultTypeInternal;
extern UserBoxTimeRecoverResponseDefaultTypeInternal _UserBoxTimeRecoverResponse_default_instance_;
class UserChipsLogRequest;
class UserChipsLogRequestDefaultTypeInternal;
extern UserChipsLogRequestDefaultTypeInternal _UserChipsLogRequest_default_instance_;
class UserChipsLogResponse;
class UserChipsLogResponseDefaultTypeInternal;
extern UserChipsLogResponseDefaultTypeInternal _UserChipsLogResponse_default_instance_;
class UserEnterRoomRequest;
class UserEnterRoomRequestDefaultTypeInternal;
extern UserEnterRoomRequestDefaultTypeInternal _UserEnterRoomRequest_default_instance_;
class UserEnterRoomResponse;
class UserEnterRoomResponseDefaultTypeInternal;
extern UserEnterRoomResponseDefaultTypeInternal _UserEnterRoomResponse_default_instance_;
class UserGameAccount;
class UserGameAccountDefaultTypeInternal;
extern UserGameAccountDefaultTypeInternal _UserGameAccount_default_instance_;
class UserGameStatus;
class UserGameStatusDefaultTypeInternal;
extern UserGameStatusDefaultTypeInternal _UserGameStatus_default_instance_;
class UserJoinGameRequest;
class UserJoinGameRequestDefaultTypeInternal;
extern UserJoinGameRequestDefaultTypeInternal _UserJoinGameRequest_default_instance_;
class UserJoinGameResponse;
class UserJoinGameResponseDefaultTypeInternal;
extern UserJoinGameResponseDefaultTypeInternal _UserJoinGameResponse_default_instance_;
class UserLeaveGameRequest;
class UserLeaveGameRequestDefaultTypeInternal;
extern UserLeaveGameRequestDefaultTypeInternal _UserLeaveGameRequest_default_instance_;
class UserLeaveGameResponse;
class UserLeaveGameResponseDefaultTypeInternal;
extern UserLeaveGameResponseDefaultTypeInternal _UserLeaveGameResponse_default_instance_;
class UserLogRecordRequest;
class UserLogRecordRequestDefaultTypeInternal;
extern UserLogRecordRequestDefaultTypeInternal _UserLogRecordRequest_default_instance_;
class UserLogRecordResponse;
class UserLogRecordResponseDefaultTypeInternal;
extern UserLogRecordResponseDefaultTypeInternal _UserLogRecordResponse_default_instance_;
class UserQuitRoomRequest;
class UserQuitRoomRequestDefaultTypeInternal;
extern UserQuitRoomRequestDefaultTypeInternal _UserQuitRoomRequest_default_instance_;
class UserQuitRoomResponse;
class UserQuitRoomResponseDefaultTypeInternal;
extern UserQuitRoomResponseDefaultTypeInternal _UserQuitRoomResponse_default_instance_;
}  // namespace SvrMsg
namespace google {
namespace protobuf {
template<> ::SvrMsg::AddPlayerChipsRequest* Arena::CreateMaybeMessage<::SvrMsg::AddPlayerChipsRequest>(Arena*);
template<> ::SvrMsg::AddPlayerChipsResponse* Arena::CreateMaybeMessage<::SvrMsg::AddPlayerChipsResponse>(Arena*);
template<> ::SvrMsg::AppLogRecordRequest* Arena::CreateMaybeMessage<::SvrMsg::AppLogRecordRequest>(Arena*);
template<> ::SvrMsg::AppLogRecordResponse* Arena::CreateMaybeMessage<::SvrMsg::AppLogRecordResponse>(Arena*);
template<> ::SvrMsg::BankruptLogRequest* Arena::CreateMaybeMessage<::SvrMsg::BankruptLogRequest>(Arena*);
template<> ::SvrMsg::BankruptLogResponse* Arena::CreateMaybeMessage<::SvrMsg::BankruptLogResponse>(Arena*);
template<> ::SvrMsg::CheckUserLoginRequest* Arena::CreateMaybeMessage<::SvrMsg::CheckUserLoginRequest>(Arena*);
template<> ::SvrMsg::CheckUserLoginResponse* Arena::CreateMaybeMessage<::SvrMsg::CheckUserLoginResponse>(Arena*);
template<> ::SvrMsg::CheckUserTokenRequest* Arena::CreateMaybeMessage<::SvrMsg::CheckUserTokenRequest>(Arena*);
template<> ::SvrMsg::CheckUserTokenResponse* Arena::CreateMaybeMessage<::SvrMsg::CheckUserTokenResponse>(Arena*);
template<> ::SvrMsg::CommQueryRequest* Arena::CreateMaybeMessage<::SvrMsg::CommQueryRequest>(Arena*);
template<> ::SvrMsg::CommQueryResponse* Arena::CreateMaybeMessage<::SvrMsg::CommQueryResponse>(Arena*);
template<> ::SvrMsg::DBRow* Arena::CreateMaybeMessage<::SvrMsg::DBRow>(Arena*);
template<> ::SvrMsg::DispatchUserMsgRequest* Arena::CreateMaybeMessage<::SvrMsg::DispatchUserMsgRequest>(Arena*);
template<> ::SvrMsg::DispatchUserMsgResponse* Arena::CreateMaybeMessage<::SvrMsg::DispatchUserMsgResponse>(Arena*);
template<> ::SvrMsg::FlushUserGameSessionRequest* Arena::CreateMaybeMessage<::SvrMsg::FlushUserGameSessionRequest>(Arena*);
template<> ::SvrMsg::FlushUserGameSessionResponse* Arena::CreateMaybeMessage<::SvrMsg::FlushUserGameSessionResponse>(Arena*);
template<> ::SvrMsg::FlushUserInGameRequest* Arena::CreateMaybeMessage<::SvrMsg::FlushUserInGameRequest>(Arena*);
template<> ::SvrMsg::FlushUserInGameResponse* Arena::CreateMaybeMessage<::SvrMsg::FlushUserInGameResponse>(Arena*);
template<> ::SvrMsg::FlushUserOnlineRequest* Arena::CreateMaybeMessage<::SvrMsg::FlushUserOnlineRequest>(Arena*);
template<> ::SvrMsg::FlushUserOnlineResponse* Arena::CreateMaybeMessage<::SvrMsg::FlushUserOnlineResponse>(Arena*);
template<> ::SvrMsg::ForbiddenUserRequest* Arena::CreateMaybeMessage<::SvrMsg::ForbiddenUserRequest>(Arena*);
template<> ::SvrMsg::ForbiddenUserResponse* Arena::CreateMaybeMessage<::SvrMsg::ForbiddenUserResponse>(Arena*);
template<> ::SvrMsg::GameAddCarryRequest* Arena::CreateMaybeMessage<::SvrMsg::GameAddCarryRequest>(Arena*);
template<> ::SvrMsg::GameAddCarryResponse* Arena::CreateMaybeMessage<::SvrMsg::GameAddCarryResponse>(Arena*);
template<> ::SvrMsg::GameBuyChipsInRequest* Arena::CreateMaybeMessage<::SvrMsg::GameBuyChipsInRequest>(Arena*);
template<> ::SvrMsg::GameBuyChipsInResponse* Arena::CreateMaybeMessage<::SvrMsg::GameBuyChipsInResponse>(Arena*);
template<> ::SvrMsg::GameLeaveAccountRequest* Arena::CreateMaybeMessage<::SvrMsg::GameLeaveAccountRequest>(Arena*);
template<> ::SvrMsg::GameLeaveAccountResponse* Arena::CreateMaybeMessage<::SvrMsg::GameLeaveAccountResponse>(Arena*);
template<> ::SvrMsg::GameLogRequest* Arena::CreateMaybeMessage<::SvrMsg::GameLogRequest>(Arena*);
template<> ::SvrMsg::GameLogResponse* Arena::CreateMaybeMessage<::SvrMsg::GameLogResponse>(Arena*);
template<> ::SvrMsg::GameLoginRecordRequest* Arena::CreateMaybeMessage<::SvrMsg::GameLoginRecordRequest>(Arena*);
template<> ::SvrMsg::GameLoginRecordResponse* Arena::CreateMaybeMessage<::SvrMsg::GameLoginRecordResponse>(Arena*);
template<> ::SvrMsg::GameOverAccountRequest* Arena::CreateMaybeMessage<::SvrMsg::GameOverAccountRequest>(Arena*);
template<> ::SvrMsg::GameOverAccountResponse* Arena::CreateMaybeMessage<::SvrMsg::GameOverAccountResponse>(Arena*);
template<> ::SvrMsg::GameRoomEmptyRequest* Arena::CreateMaybeMessage<::SvrMsg::GameRoomEmptyRequest>(Arena*);
template<> ::SvrMsg::GameRoomEmptyResponse* Arena::CreateMaybeMessage<::SvrMsg::GameRoomEmptyResponse>(Arena*);
template<> ::SvrMsg::GameStartBetRequest* Arena::CreateMaybeMessage<::SvrMsg::GameStartBetRequest>(Arena*);
template<> ::SvrMsg::GameStartBetResponse* Arena::CreateMaybeMessage<::SvrMsg::GameStartBetResponse>(Arena*);
template<> ::SvrMsg::GameSvrAliveRequest* Arena::CreateMaybeMessage<::SvrMsg::GameSvrAliveRequest>(Arena*);
template<> ::SvrMsg::GameSvrAliveResponse* Arena::CreateMaybeMessage<::SvrMsg::GameSvrAliveResponse>(Arena*);
template<> ::SvrMsg::GameSvrStartRequest* Arena::CreateMaybeMessage<::SvrMsg::GameSvrStartRequest>(Arena*);
template<> ::SvrMsg::GameSvrStartResponse* Arena::CreateMaybeMessage<::SvrMsg::GameSvrStartResponse>(Arena*);
template<> ::SvrMsg::GetGameSvrInstanceRequest* Arena::CreateMaybeMessage<::SvrMsg::GetGameSvrInstanceRequest>(Arena*);
template<> ::SvrMsg::GetGameSvrInstanceResponse* Arena::CreateMaybeMessage<::SvrMsg::GetGameSvrInstanceResponse>(Arena*);
template<> ::SvrMsg::GetInGameCountRequest* Arena::CreateMaybeMessage<::SvrMsg::GetInGameCountRequest>(Arena*);
template<> ::SvrMsg::GetInGameCountResponse* Arena::CreateMaybeMessage<::SvrMsg::GetInGameCountResponse>(Arena*);
template<> ::SvrMsg::HallLoginRecordRequest* Arena::CreateMaybeMessage<::SvrMsg::HallLoginRecordRequest>(Arena*);
template<> ::SvrMsg::HallLoginRecordResponse* Arena::CreateMaybeMessage<::SvrMsg::HallLoginRecordResponse>(Arena*);
template<> ::SvrMsg::HallStartUpRequest* Arena::CreateMaybeMessage<::SvrMsg::HallStartUpRequest>(Arena*);
template<> ::SvrMsg::HallStartUpResponse* Arena::CreateMaybeMessage<::SvrMsg::HallStartUpResponse>(Arena*);
template<> ::SvrMsg::KickOutUserRequest* Arena::CreateMaybeMessage<::SvrMsg::KickOutUserRequest>(Arena*);
template<> ::SvrMsg::KickOutUserResponse* Arena::CreateMaybeMessage<::SvrMsg::KickOutUserResponse>(Arena*);
template<> ::SvrMsg::MatchOverAccountRequest* Arena::CreateMaybeMessage<::SvrMsg::MatchOverAccountRequest>(Arena*);
template<> ::SvrMsg::MatchOverAccountResponse* Arena::CreateMaybeMessage<::SvrMsg::MatchOverAccountResponse>(Arena*);
template<> ::SvrMsg::NotifyOpenRequest* Arena::CreateMaybeMessage<::SvrMsg::NotifyOpenRequest>(Arena*);
template<> ::SvrMsg::NotifyOpenResponse* Arena::CreateMaybeMessage<::SvrMsg::NotifyOpenResponse>(Arena*);
template<> ::SvrMsg::NotifyTokenLoginRequest* Arena::CreateMaybeMessage<::SvrMsg::NotifyTokenLoginRequest>(Arena*);
template<> ::SvrMsg::NotifyTokenLoginResponse* Arena::CreateMaybeMessage<::SvrMsg::NotifyTokenLoginResponse>(Arena*);
template<> ::SvrMsg::OpenGameRoomRequest* Arena::CreateMaybeMessage<::SvrMsg::OpenGameRoomRequest>(Arena*);
template<> ::SvrMsg::OpenGameRoomResponse* Arena::CreateMaybeMessage<::SvrMsg::OpenGameRoomResponse>(Arena*);
template<> ::SvrMsg::PlayerGameResult* Arena::CreateMaybeMessage<::SvrMsg::PlayerGameResult>(Arena*);
template<> ::SvrMsg::QueryRoomMatchRequest* Arena::CreateMaybeMessage<::SvrMsg::QueryRoomMatchRequest>(Arena*);
template<> ::SvrMsg::QueryRoomMatchResponse* Arena::CreateMaybeMessage<::SvrMsg::QueryRoomMatchResponse>(Arena*);
template<> ::SvrMsg::RoomMatchStatusRequest* Arena::CreateMaybeMessage<::SvrMsg::RoomMatchStatusRequest>(Arena*);
template<> ::SvrMsg::RoomMatchStatusResponse* Arena::CreateMaybeMessage<::SvrMsg::RoomMatchStatusResponse>(Arena*);
template<> ::SvrMsg::SubmitGameResultRequest* Arena::CreateMaybeMessage<::SvrMsg::SubmitGameResultRequest>(Arena*);
template<> ::SvrMsg::SubmitGameResultResponse* Arena::CreateMaybeMessage<::SvrMsg::SubmitGameResultResponse>(Arena*);
template<> ::SvrMsg::TellUserLogoutGameRequest* Arena::CreateMaybeMessage<::SvrMsg::TellUserLogoutGameRequest>(Arena*);
template<> ::SvrMsg::TellUserLogoutGameResponse* Arena::CreateMaybeMessage<::SvrMsg::TellUserLogoutGameResponse>(Arena*);
template<> ::SvrMsg::TellUserOfflineRequest* Arena::CreateMaybeMessage<::SvrMsg::TellUserOfflineRequest>(Arena*);
template<> ::SvrMsg::TellUserOfflineResponse* Arena::CreateMaybeMessage<::SvrMsg::TellUserOfflineResponse>(Arena*);
template<> ::SvrMsg::UserBoxTimePauseRequest* Arena::CreateMaybeMessage<::SvrMsg::UserBoxTimePauseRequest>(Arena*);
template<> ::SvrMsg::UserBoxTimePauseResponse* Arena::CreateMaybeMessage<::SvrMsg::UserBoxTimePauseResponse>(Arena*);
template<> ::SvrMsg::UserBoxTimeRecoverRequest* Arena::CreateMaybeMessage<::SvrMsg::UserBoxTimeRecoverRequest>(Arena*);
template<> ::SvrMsg::UserBoxTimeRecoverResponse* Arena::CreateMaybeMessage<::SvrMsg::UserBoxTimeRecoverResponse>(Arena*);
template<> ::SvrMsg::UserChipsLogRequest* Arena::CreateMaybeMessage<::SvrMsg::UserChipsLogRequest>(Arena*);
template<> ::SvrMsg::UserChipsLogResponse* Arena::CreateMaybeMessage<::SvrMsg::UserChipsLogResponse>(Arena*);
template<> ::SvrMsg::UserEnterRoomRequest* Arena::CreateMaybeMessage<::SvrMsg::UserEnterRoomRequest>(Arena*);
template<> ::SvrMsg::UserEnterRoomResponse* Arena::CreateMaybeMessage<::SvrMsg::UserEnterRoomResponse>(Arena*);
template<> ::SvrMsg::UserGameAccount* Arena::CreateMaybeMessage<::SvrMsg::UserGameAccount>(Arena*);
template<> ::SvrMsg::UserGameStatus* Arena::CreateMaybeMessage<::SvrMsg::UserGameStatus>(Arena*);
template<> ::SvrMsg::UserJoinGameRequest* Arena::CreateMaybeMessage<::SvrMsg::UserJoinGameRequest>(Arena*);
template<> ::SvrMsg::UserJoinGameResponse* Arena::CreateMaybeMessage<::SvrMsg::UserJoinGameResponse>(Arena*);
template<> ::SvrMsg::UserLeaveGameRequest* Arena::CreateMaybeMessage<::SvrMsg::UserLeaveGameRequest>(Arena*);
template<> ::SvrMsg::UserLeaveGameResponse* Arena::CreateMaybeMessage<::SvrMsg::UserLeaveGameResponse>(Arena*);
template<> ::SvrMsg::UserLogRecordRequest* Arena::CreateMaybeMessage<::SvrMsg::UserLogRecordRequest>(Arena*);
template<> ::SvrMsg::UserLogRecordResponse* Arena::CreateMaybeMessage<::SvrMsg::UserLogRecordResponse>(Arena*);
template<> ::SvrMsg::UserQuitRoomRequest* Arena::CreateMaybeMessage<::SvrMsg::UserQuitRoomRequest>(Arena*);
template<> ::SvrMsg::UserQuitRoomResponse* Arena::CreateMaybeMessage<::SvrMsg::UserQuitRoomResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SvrMsg {

enum PlayerGameResult_EnumResult {
  PlayerGameResult_EnumResult_firstFlag = 0,
  PlayerGameResult_EnumResult_win = 8,
  PlayerGameResult_EnumResult_abort = 32,
  PlayerGameResult_EnumResult_PlayerGameResult_EnumResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PlayerGameResult_EnumResult_PlayerGameResult_EnumResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PlayerGameResult_EnumResult_IsValid(int value);
const PlayerGameResult_EnumResult PlayerGameResult_EnumResult_EnumResult_MIN = PlayerGameResult_EnumResult_firstFlag;
const PlayerGameResult_EnumResult PlayerGameResult_EnumResult_EnumResult_MAX = PlayerGameResult_EnumResult_abort;
const int PlayerGameResult_EnumResult_EnumResult_ARRAYSIZE = PlayerGameResult_EnumResult_EnumResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerGameResult_EnumResult_descriptor();
inline const ::std::string& PlayerGameResult_EnumResult_Name(PlayerGameResult_EnumResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerGameResult_EnumResult_descriptor(), value);
}
inline bool PlayerGameResult_EnumResult_Parse(
    const ::std::string& name, PlayerGameResult_EnumResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerGameResult_EnumResult>(
    PlayerGameResult_EnumResult_descriptor(), name, value);
}
enum FlushUserInGameRequest_EnumGameStatus {
  FlushUserInGameRequest_EnumGameStatus_FIST_GLAG = 0,
  FlushUserInGameRequest_EnumGameStatus_USER_IN_GAME = 2,
  FlushUserInGameRequest_EnumGameStatus_USER_IN_WATCH = 3,
  FlushUserInGameRequest_EnumGameStatus_FlushUserInGameRequest_EnumGameStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FlushUserInGameRequest_EnumGameStatus_FlushUserInGameRequest_EnumGameStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FlushUserInGameRequest_EnumGameStatus_IsValid(int value);
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_MIN = FlushUserInGameRequest_EnumGameStatus_FIST_GLAG;
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_MAX = FlushUserInGameRequest_EnumGameStatus_USER_IN_WATCH;
const int FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_ARRAYSIZE = FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlushUserInGameRequest_EnumGameStatus_descriptor();
inline const ::std::string& FlushUserInGameRequest_EnumGameStatus_Name(FlushUserInGameRequest_EnumGameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlushUserInGameRequest_EnumGameStatus_descriptor(), value);
}
inline bool FlushUserInGameRequest_EnumGameStatus_Parse(
    const ::std::string& name, FlushUserInGameRequest_EnumGameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlushUserInGameRequest_EnumGameStatus>(
    FlushUserInGameRequest_EnumGameStatus_descriptor(), name, value);
}
enum EnumLoginAction {
  USER_LOGOUT = 0,
  USER_LOGIN = 1,
  EnumLoginAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EnumLoginAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EnumLoginAction_IsValid(int value);
const EnumLoginAction EnumLoginAction_MIN = USER_LOGOUT;
const EnumLoginAction EnumLoginAction_MAX = USER_LOGIN;
const int EnumLoginAction_ARRAYSIZE = EnumLoginAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumLoginAction_descriptor();
inline const ::std::string& EnumLoginAction_Name(EnumLoginAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumLoginAction_descriptor(), value);
}
inline bool EnumLoginAction_Parse(
    const ::std::string& name, EnumLoginAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumLoginAction>(
    EnumLoginAction_descriptor(), name, value);
}
// ===================================================================

class GetGameSvrInstanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GetGameSvrInstanceRequest) */ {
 public:
  GetGameSvrInstanceRequest();
  virtual ~GetGameSvrInstanceRequest();

  GetGameSvrInstanceRequest(const GetGameSvrInstanceRequest& from);

  inline GetGameSvrInstanceRequest& operator=(const GetGameSvrInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGameSvrInstanceRequest(GetGameSvrInstanceRequest&& from) noexcept
    : GetGameSvrInstanceRequest() {
    *this = ::std::move(from);
  }

  inline GetGameSvrInstanceRequest& operator=(GetGameSvrInstanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetGameSvrInstanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameSvrInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameSvrInstanceRequest*>(
               &_GetGameSvrInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetGameSvrInstanceRequest* other);
  friend void swap(GetGameSvrInstanceRequest& a, GetGameSvrInstanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGameSvrInstanceRequest* New() const final {
    return CreateMaybeMessage<GetGameSvrInstanceRequest>(NULL);
  }

  GetGameSvrInstanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGameSvrInstanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGameSvrInstanceRequest& from);
  void MergeFrom(const GetGameSvrInstanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameSvrInstanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hostIp = 1;
  void clear_hostip();
  static const int kHostIpFieldNumber = 1;
  const ::std::string& hostip() const;
  void set_hostip(const ::std::string& value);
  #if LANG_CXX11
  void set_hostip(::std::string&& value);
  #endif
  void set_hostip(const char* value);
  void set_hostip(const void* value, size_t size);
  ::std::string* mutable_hostip();
  ::std::string* release_hostip();
  void set_allocated_hostip(::std::string* hostip);

  // @@protoc_insertion_point(class_scope:SvrMsg.GetGameSvrInstanceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GetGameSvrInstanceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GetGameSvrInstanceResponse) */ {
 public:
  GetGameSvrInstanceResponse();
  virtual ~GetGameSvrInstanceResponse();

  GetGameSvrInstanceResponse(const GetGameSvrInstanceResponse& from);

  inline GetGameSvrInstanceResponse& operator=(const GetGameSvrInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGameSvrInstanceResponse(GetGameSvrInstanceResponse&& from) noexcept
    : GetGameSvrInstanceResponse() {
    *this = ::std::move(from);
  }

  inline GetGameSvrInstanceResponse& operator=(GetGameSvrInstanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetGameSvrInstanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameSvrInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetGameSvrInstanceResponse*>(
               &_GetGameSvrInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetGameSvrInstanceResponse* other);
  friend void swap(GetGameSvrInstanceResponse& a, GetGameSvrInstanceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGameSvrInstanceResponse* New() const final {
    return CreateMaybeMessage<GetGameSvrInstanceResponse>(NULL);
  }

  GetGameSvrInstanceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGameSvrInstanceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGameSvrInstanceResponse& from);
  void MergeFrom(const GetGameSvrInstanceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameSvrInstanceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 gamesvrPorts = 1;
  int gamesvrports_size() const;
  void clear_gamesvrports();
  static const int kGamesvrPortsFieldNumber = 1;
  ::google::protobuf::int32 gamesvrports(int index) const;
  void set_gamesvrports(int index, ::google::protobuf::int32 value);
  void add_gamesvrports(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gamesvrports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gamesvrports();

  // @@protoc_insertion_point(class_scope:SvrMsg.GetGameSvrInstanceResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gamesvrports_;
  mutable std::atomic<int> _gamesvrports_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CommQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CommQueryRequest) */ {
 public:
  CommQueryRequest();
  virtual ~CommQueryRequest();

  CommQueryRequest(const CommQueryRequest& from);

  inline CommQueryRequest& operator=(const CommQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommQueryRequest(CommQueryRequest&& from) noexcept
    : CommQueryRequest() {
    *this = ::std::move(from);
  }

  inline CommQueryRequest& operator=(CommQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommQueryRequest* internal_default_instance() {
    return reinterpret_cast<const CommQueryRequest*>(
               &_CommQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CommQueryRequest* other);
  friend void swap(CommQueryRequest& a, CommQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommQueryRequest* New() const final {
    return CreateMaybeMessage<CommQueryRequest>(NULL);
  }

  CommQueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommQueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommQueryRequest& from);
  void MergeFrom(const CommQueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommQueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes queryParas = 2;
  int queryparas_size() const;
  void clear_queryparas();
  static const int kQueryParasFieldNumber = 2;
  const ::std::string& queryparas(int index) const;
  ::std::string* mutable_queryparas(int index);
  void set_queryparas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_queryparas(int index, ::std::string&& value);
  #endif
  void set_queryparas(int index, const char* value);
  void set_queryparas(int index, const void* value, size_t size);
  ::std::string* add_queryparas();
  void add_queryparas(const ::std::string& value);
  #if LANG_CXX11
  void add_queryparas(::std::string&& value);
  #endif
  void add_queryparas(const char* value);
  void add_queryparas(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& queryparas() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_queryparas();

  // bytes templateName = 1;
  void clear_templatename();
  static const int kTemplateNameFieldNumber = 1;
  const ::std::string& templatename() const;
  void set_templatename(const ::std::string& value);
  #if LANG_CXX11
  void set_templatename(::std::string&& value);
  #endif
  void set_templatename(const char* value);
  void set_templatename(const void* value, size_t size);
  ::std::string* mutable_templatename();
  ::std::string* release_templatename();
  void set_allocated_templatename(::std::string* templatename);

  // @@protoc_insertion_point(class_scope:SvrMsg.CommQueryRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> queryparas_;
  ::google::protobuf::internal::ArenaStringPtr templatename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class DBRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.DBRow) */ {
 public:
  DBRow();
  virtual ~DBRow();

  DBRow(const DBRow& from);

  inline DBRow& operator=(const DBRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DBRow(DBRow&& from) noexcept
    : DBRow() {
    *this = ::std::move(from);
  }

  inline DBRow& operator=(DBRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DBRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBRow* internal_default_instance() {
    return reinterpret_cast<const DBRow*>(
               &_DBRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DBRow* other);
  friend void swap(DBRow& a, DBRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DBRow* New() const final {
    return CreateMaybeMessage<DBRow>(NULL);
  }

  DBRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DBRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DBRow& from);
  void MergeFrom(const DBRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes dbRow = 1;
  int dbrow_size() const;
  void clear_dbrow();
  static const int kDbRowFieldNumber = 1;
  const ::std::string& dbrow(int index) const;
  ::std::string* mutable_dbrow(int index);
  void set_dbrow(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dbrow(int index, ::std::string&& value);
  #endif
  void set_dbrow(int index, const char* value);
  void set_dbrow(int index, const void* value, size_t size);
  ::std::string* add_dbrow();
  void add_dbrow(const ::std::string& value);
  #if LANG_CXX11
  void add_dbrow(::std::string&& value);
  #endif
  void add_dbrow(const char* value);
  void add_dbrow(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& dbrow() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_dbrow();

  // @@protoc_insertion_point(class_scope:SvrMsg.DBRow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> dbrow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CommQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CommQueryResponse) */ {
 public:
  CommQueryResponse();
  virtual ~CommQueryResponse();

  CommQueryResponse(const CommQueryResponse& from);

  inline CommQueryResponse& operator=(const CommQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommQueryResponse(CommQueryResponse&& from) noexcept
    : CommQueryResponse() {
    *this = ::std::move(from);
  }

  inline CommQueryResponse& operator=(CommQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommQueryResponse* internal_default_instance() {
    return reinterpret_cast<const CommQueryResponse*>(
               &_CommQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CommQueryResponse* other);
  friend void swap(CommQueryResponse& a, CommQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommQueryResponse* New() const final {
    return CreateMaybeMessage<CommQueryResponse>(NULL);
  }

  CommQueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommQueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommQueryResponse& from);
  void MergeFrom(const CommQueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SvrMsg.DBRow queryResult = 1;
  int queryresult_size() const;
  void clear_queryresult();
  static const int kQueryResultFieldNumber = 1;
  ::SvrMsg::DBRow* mutable_queryresult(int index);
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::DBRow >*
      mutable_queryresult();
  const ::SvrMsg::DBRow& queryresult(int index) const;
  ::SvrMsg::DBRow* add_queryresult();
  const ::google::protobuf::RepeatedPtrField< ::SvrMsg::DBRow >&
      queryresult() const;

  // @@protoc_insertion_point(class_scope:SvrMsg.CommQueryResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::DBRow > queryresult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class PlayerGameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.PlayerGameResult) */ {
 public:
  PlayerGameResult();
  virtual ~PlayerGameResult();

  PlayerGameResult(const PlayerGameResult& from);

  inline PlayerGameResult& operator=(const PlayerGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerGameResult(PlayerGameResult&& from) noexcept
    : PlayerGameResult() {
    *this = ::std::move(from);
  }

  inline PlayerGameResult& operator=(PlayerGameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayerGameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerGameResult* internal_default_instance() {
    return reinterpret_cast<const PlayerGameResult*>(
               &_PlayerGameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerGameResult* other);
  friend void swap(PlayerGameResult& a, PlayerGameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerGameResult* New() const final {
    return CreateMaybeMessage<PlayerGameResult>(NULL);
  }

  PlayerGameResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerGameResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerGameResult& from);
  void MergeFrom(const PlayerGameResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerGameResult_EnumResult EnumResult;
  static const EnumResult firstFlag =
    PlayerGameResult_EnumResult_firstFlag;
  static const EnumResult win =
    PlayerGameResult_EnumResult_win;
  static const EnumResult abort =
    PlayerGameResult_EnumResult_abort;
  static inline bool EnumResult_IsValid(int value) {
    return PlayerGameResult_EnumResult_IsValid(value);
  }
  static const EnumResult EnumResult_MIN =
    PlayerGameResult_EnumResult_EnumResult_MIN;
  static const EnumResult EnumResult_MAX =
    PlayerGameResult_EnumResult_EnumResult_MAX;
  static const int EnumResult_ARRAYSIZE =
    PlayerGameResult_EnumResult_EnumResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnumResult_descriptor() {
    return PlayerGameResult_EnumResult_descriptor();
  }
  static inline const ::std::string& EnumResult_Name(EnumResult value) {
    return PlayerGameResult_EnumResult_Name(value);
  }
  static inline bool EnumResult_Parse(const ::std::string& name,
      EnumResult* value) {
    return PlayerGameResult_EnumResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int64 chipsIncrease = 2;
  void clear_chipsincrease();
  static const int kChipsIncreaseFieldNumber = 2;
  ::google::protobuf::int64 chipsincrease() const;
  void set_chipsincrease(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 expIncrease = 3;
  void clear_expincrease();
  static const int kExpIncreaseFieldNumber = 3;
  ::google::protobuf::int32 expincrease() const;
  void set_expincrease(::google::protobuf::int32 value);

  // int64 chipsWinPool = 5;
  void clear_chipswinpool();
  static const int kChipsWinPoolFieldNumber = 5;
  ::google::protobuf::int64 chipswinpool() const;
  void set_chipswinpool(::google::protobuf::int64 value);

  // int32 statusMask = 4;
  void clear_statusmask();
  static const int kStatusMaskFieldNumber = 4;
  ::google::protobuf::int32 statusmask() const;
  void set_statusmask(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.PlayerGameResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 chipsincrease_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 expincrease_;
  ::google::protobuf::int64 chipswinpool_;
  ::google::protobuf::int32 statusmask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class SubmitGameResultRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.SubmitGameResultRequest) */ {
 public:
  SubmitGameResultRequest();
  virtual ~SubmitGameResultRequest();

  SubmitGameResultRequest(const SubmitGameResultRequest& from);

  inline SubmitGameResultRequest& operator=(const SubmitGameResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmitGameResultRequest(SubmitGameResultRequest&& from) noexcept
    : SubmitGameResultRequest() {
    *this = ::std::move(from);
  }

  inline SubmitGameResultRequest& operator=(SubmitGameResultRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubmitGameResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitGameResultRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitGameResultRequest*>(
               &_SubmitGameResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SubmitGameResultRequest* other);
  friend void swap(SubmitGameResultRequest& a, SubmitGameResultRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitGameResultRequest* New() const final {
    return CreateMaybeMessage<SubmitGameResultRequest>(NULL);
  }

  SubmitGameResultRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmitGameResultRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmitGameResultRequest& from);
  void MergeFrom(const SubmitGameResultRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitGameResultRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SvrMsg.PlayerGameResult gameResult = 2;
  int gameresult_size() const;
  void clear_gameresult();
  static const int kGameResultFieldNumber = 2;
  ::SvrMsg::PlayerGameResult* mutable_gameresult(int index);
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::PlayerGameResult >*
      mutable_gameresult();
  const ::SvrMsg::PlayerGameResult& gameresult(int index) const;
  ::SvrMsg::PlayerGameResult* add_gameresult();
  const ::google::protobuf::RepeatedPtrField< ::SvrMsg::PlayerGameResult >&
      gameresult() const;

  // bytes gameId = 1;
  void clear_gameid();
  static const int kGameIdFieldNumber = 1;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:SvrMsg.SubmitGameResultRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::PlayerGameResult > gameresult_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class SubmitGameResultResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.SubmitGameResultResponse) */ {
 public:
  SubmitGameResultResponse();
  virtual ~SubmitGameResultResponse();

  SubmitGameResultResponse(const SubmitGameResultResponse& from);

  inline SubmitGameResultResponse& operator=(const SubmitGameResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmitGameResultResponse(SubmitGameResultResponse&& from) noexcept
    : SubmitGameResultResponse() {
    *this = ::std::move(from);
  }

  inline SubmitGameResultResponse& operator=(SubmitGameResultResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubmitGameResultResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitGameResultResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitGameResultResponse*>(
               &_SubmitGameResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SubmitGameResultResponse* other);
  friend void swap(SubmitGameResultResponse& a, SubmitGameResultResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitGameResultResponse* New() const final {
    return CreateMaybeMessage<SubmitGameResultResponse>(NULL);
  }

  SubmitGameResultResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmitGameResultResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmitGameResultResponse& from);
  void MergeFrom(const SubmitGameResultResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitGameResultResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.SubmitGameResultResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class AddPlayerChipsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.AddPlayerChipsRequest) */ {
 public:
  AddPlayerChipsRequest();
  virtual ~AddPlayerChipsRequest();

  AddPlayerChipsRequest(const AddPlayerChipsRequest& from);

  inline AddPlayerChipsRequest& operator=(const AddPlayerChipsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPlayerChipsRequest(AddPlayerChipsRequest&& from) noexcept
    : AddPlayerChipsRequest() {
    *this = ::std::move(from);
  }

  inline AddPlayerChipsRequest& operator=(AddPlayerChipsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddPlayerChipsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPlayerChipsRequest* internal_default_instance() {
    return reinterpret_cast<const AddPlayerChipsRequest*>(
               &_AddPlayerChipsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddPlayerChipsRequest* other);
  friend void swap(AddPlayerChipsRequest& a, AddPlayerChipsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPlayerChipsRequest* New() const final {
    return CreateMaybeMessage<AddPlayerChipsRequest>(NULL);
  }

  AddPlayerChipsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayerChipsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPlayerChipsRequest& from);
  void MergeFrom(const AddPlayerChipsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayerChipsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 chipsAddCount = 2;
  void clear_chipsaddcount();
  static const int kChipsAddCountFieldNumber = 2;
  ::google::protobuf::int64 chipsaddcount() const;
  void set_chipsaddcount(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 addReason = 3;
  void clear_addreason();
  static const int kAddReasonFieldNumber = 3;
  ::google::protobuf::int32 addreason() const;
  void set_addreason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.AddPlayerChipsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 chipsaddcount_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 addreason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class AddPlayerChipsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.AddPlayerChipsResponse) */ {
 public:
  AddPlayerChipsResponse();
  virtual ~AddPlayerChipsResponse();

  AddPlayerChipsResponse(const AddPlayerChipsResponse& from);

  inline AddPlayerChipsResponse& operator=(const AddPlayerChipsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPlayerChipsResponse(AddPlayerChipsResponse&& from) noexcept
    : AddPlayerChipsResponse() {
    *this = ::std::move(from);
  }

  inline AddPlayerChipsResponse& operator=(AddPlayerChipsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddPlayerChipsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPlayerChipsResponse* internal_default_instance() {
    return reinterpret_cast<const AddPlayerChipsResponse*>(
               &_AddPlayerChipsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AddPlayerChipsResponse* other);
  friend void swap(AddPlayerChipsResponse& a, AddPlayerChipsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPlayerChipsResponse* New() const final {
    return CreateMaybeMessage<AddPlayerChipsResponse>(NULL);
  }

  AddPlayerChipsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayerChipsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPlayerChipsResponse& from);
  void MergeFrom(const AddPlayerChipsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayerChipsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 currentChips = 1;
  void clear_currentchips();
  static const int kCurrentChipsFieldNumber = 1;
  ::google::protobuf::int64 currentchips() const;
  void set_currentchips(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.AddPlayerChipsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 currentchips_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserJoinGameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserJoinGameRequest) */ {
 public:
  UserJoinGameRequest();
  virtual ~UserJoinGameRequest();

  UserJoinGameRequest(const UserJoinGameRequest& from);

  inline UserJoinGameRequest& operator=(const UserJoinGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserJoinGameRequest(UserJoinGameRequest&& from) noexcept
    : UserJoinGameRequest() {
    *this = ::std::move(from);
  }

  inline UserJoinGameRequest& operator=(UserJoinGameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserJoinGameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserJoinGameRequest* internal_default_instance() {
    return reinterpret_cast<const UserJoinGameRequest*>(
               &_UserJoinGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UserJoinGameRequest* other);
  friend void swap(UserJoinGameRequest& a, UserJoinGameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserJoinGameRequest* New() const final {
    return CreateMaybeMessage<UserJoinGameRequest>(NULL);
  }

  UserJoinGameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserJoinGameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserJoinGameRequest& from);
  void MergeFrom(const UserJoinGameRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserJoinGameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 smallBlind = 3;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 3;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // int32 playingCount = 4;
  void clear_playingcount();
  static const int kPlayingCountFieldNumber = 4;
  ::google::protobuf::int32 playingcount() const;
  void set_playingcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserJoinGameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 smallblind_;
  ::google::protobuf::int32 playingcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserJoinGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserJoinGameResponse) */ {
 public:
  UserJoinGameResponse();
  virtual ~UserJoinGameResponse();

  UserJoinGameResponse(const UserJoinGameResponse& from);

  inline UserJoinGameResponse& operator=(const UserJoinGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserJoinGameResponse(UserJoinGameResponse&& from) noexcept
    : UserJoinGameResponse() {
    *this = ::std::move(from);
  }

  inline UserJoinGameResponse& operator=(UserJoinGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserJoinGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserJoinGameResponse* internal_default_instance() {
    return reinterpret_cast<const UserJoinGameResponse*>(
               &_UserJoinGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UserJoinGameResponse* other);
  friend void swap(UserJoinGameResponse& a, UserJoinGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserJoinGameResponse* New() const final {
    return CreateMaybeMessage<UserJoinGameResponse>(NULL);
  }

  UserJoinGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserJoinGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserJoinGameResponse& from);
  void MergeFrom(const UserJoinGameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserJoinGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserJoinGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserLeaveGameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserLeaveGameRequest) */ {
 public:
  UserLeaveGameRequest();
  virtual ~UserLeaveGameRequest();

  UserLeaveGameRequest(const UserLeaveGameRequest& from);

  inline UserLeaveGameRequest& operator=(const UserLeaveGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLeaveGameRequest(UserLeaveGameRequest&& from) noexcept
    : UserLeaveGameRequest() {
    *this = ::std::move(from);
  }

  inline UserLeaveGameRequest& operator=(UserLeaveGameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLeaveGameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLeaveGameRequest* internal_default_instance() {
    return reinterpret_cast<const UserLeaveGameRequest*>(
               &_UserLeaveGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UserLeaveGameRequest* other);
  friend void swap(UserLeaveGameRequest& a, UserLeaveGameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLeaveGameRequest* New() const final {
    return CreateMaybeMessage<UserLeaveGameRequest>(NULL);
  }

  UserLeaveGameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLeaveGameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLeaveGameRequest& from);
  void MergeFrom(const UserLeaveGameRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLeaveGameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 giveBackChips = 4;
  void clear_givebackchips();
  static const int kGiveBackChipsFieldNumber = 4;
  ::google::protobuf::int64 givebackchips() const;
  void set_givebackchips(::google::protobuf::int64 value);

  // int64 smallBlind = 5;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 5;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // int32 playingCount = 3;
  void clear_playingcount();
  static const int kPlayingCountFieldNumber = 3;
  ::google::protobuf::int32 playingcount() const;
  void set_playingcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserLeaveGameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 givebackchips_;
  ::google::protobuf::int64 smallblind_;
  ::google::protobuf::int32 playingcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserLeaveGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserLeaveGameResponse) */ {
 public:
  UserLeaveGameResponse();
  virtual ~UserLeaveGameResponse();

  UserLeaveGameResponse(const UserLeaveGameResponse& from);

  inline UserLeaveGameResponse& operator=(const UserLeaveGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLeaveGameResponse(UserLeaveGameResponse&& from) noexcept
    : UserLeaveGameResponse() {
    *this = ::std::move(from);
  }

  inline UserLeaveGameResponse& operator=(UserLeaveGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLeaveGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLeaveGameResponse* internal_default_instance() {
    return reinterpret_cast<const UserLeaveGameResponse*>(
               &_UserLeaveGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UserLeaveGameResponse* other);
  friend void swap(UserLeaveGameResponse& a, UserLeaveGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLeaveGameResponse* New() const final {
    return CreateMaybeMessage<UserLeaveGameResponse>(NULL);
  }

  UserLeaveGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLeaveGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLeaveGameResponse& from);
  void MergeFrom(const UserLeaveGameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLeaveGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserLeaveGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserEnterRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserEnterRoomRequest) */ {
 public:
  UserEnterRoomRequest();
  virtual ~UserEnterRoomRequest();

  UserEnterRoomRequest(const UserEnterRoomRequest& from);

  inline UserEnterRoomRequest& operator=(const UserEnterRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEnterRoomRequest(UserEnterRoomRequest&& from) noexcept
    : UserEnterRoomRequest() {
    *this = ::std::move(from);
  }

  inline UserEnterRoomRequest& operator=(UserEnterRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserEnterRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEnterRoomRequest* internal_default_instance() {
    return reinterpret_cast<const UserEnterRoomRequest*>(
               &_UserEnterRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UserEnterRoomRequest* other);
  friend void swap(UserEnterRoomRequest& a, UserEnterRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEnterRoomRequest* New() const final {
    return CreateMaybeMessage<UserEnterRoomRequest>(NULL);
  }

  UserEnterRoomRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEnterRoomRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEnterRoomRequest& from);
  void MergeFrom(const UserEnterRoomRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEnterRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int64 roomid() const;
  void set_roomid(::google::protobuf::int64 value);

  // int64 smallBlind = 3;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 3;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserEnterRoomRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 roomid_;
  ::google::protobuf::int64 smallblind_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserEnterRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserEnterRoomResponse) */ {
 public:
  UserEnterRoomResponse();
  virtual ~UserEnterRoomResponse();

  UserEnterRoomResponse(const UserEnterRoomResponse& from);

  inline UserEnterRoomResponse& operator=(const UserEnterRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEnterRoomResponse(UserEnterRoomResponse&& from) noexcept
    : UserEnterRoomResponse() {
    *this = ::std::move(from);
  }

  inline UserEnterRoomResponse& operator=(UserEnterRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserEnterRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEnterRoomResponse* internal_default_instance() {
    return reinterpret_cast<const UserEnterRoomResponse*>(
               &_UserEnterRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(UserEnterRoomResponse* other);
  friend void swap(UserEnterRoomResponse& a, UserEnterRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEnterRoomResponse* New() const final {
    return CreateMaybeMessage<UserEnterRoomResponse>(NULL);
  }

  UserEnterRoomResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserEnterRoomResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserEnterRoomResponse& from);
  void MergeFrom(const UserEnterRoomResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEnterRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserEnterRoomResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserQuitRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserQuitRoomRequest) */ {
 public:
  UserQuitRoomRequest();
  virtual ~UserQuitRoomRequest();

  UserQuitRoomRequest(const UserQuitRoomRequest& from);

  inline UserQuitRoomRequest& operator=(const UserQuitRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserQuitRoomRequest(UserQuitRoomRequest&& from) noexcept
    : UserQuitRoomRequest() {
    *this = ::std::move(from);
  }

  inline UserQuitRoomRequest& operator=(UserQuitRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserQuitRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQuitRoomRequest* internal_default_instance() {
    return reinterpret_cast<const UserQuitRoomRequest*>(
               &_UserQuitRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(UserQuitRoomRequest* other);
  friend void swap(UserQuitRoomRequest& a, UserQuitRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserQuitRoomRequest* New() const final {
    return CreateMaybeMessage<UserQuitRoomRequest>(NULL);
  }

  UserQuitRoomRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserQuitRoomRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserQuitRoomRequest& from);
  void MergeFrom(const UserQuitRoomRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQuitRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 giveBackChips = 4;
  void clear_givebackchips();
  static const int kGiveBackChipsFieldNumber = 4;
  ::google::protobuf::int64 givebackchips() const;
  void set_givebackchips(::google::protobuf::int64 value);

  // int32 playingCount = 3;
  void clear_playingcount();
  static const int kPlayingCountFieldNumber = 3;
  ::google::protobuf::int32 playingcount() const;
  void set_playingcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserQuitRoomRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 givebackchips_;
  ::google::protobuf::int32 playingcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserQuitRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserQuitRoomResponse) */ {
 public:
  UserQuitRoomResponse();
  virtual ~UserQuitRoomResponse();

  UserQuitRoomResponse(const UserQuitRoomResponse& from);

  inline UserQuitRoomResponse& operator=(const UserQuitRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserQuitRoomResponse(UserQuitRoomResponse&& from) noexcept
    : UserQuitRoomResponse() {
    *this = ::std::move(from);
  }

  inline UserQuitRoomResponse& operator=(UserQuitRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserQuitRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQuitRoomResponse* internal_default_instance() {
    return reinterpret_cast<const UserQuitRoomResponse*>(
               &_UserQuitRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(UserQuitRoomResponse* other);
  friend void swap(UserQuitRoomResponse& a, UserQuitRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserQuitRoomResponse* New() const final {
    return CreateMaybeMessage<UserQuitRoomResponse>(NULL);
  }

  UserQuitRoomResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserQuitRoomResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserQuitRoomResponse& from);
  void MergeFrom(const UserQuitRoomResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQuitRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserQuitRoomResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameSvrStartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameSvrStartRequest) */ {
 public:
  GameSvrStartRequest();
  virtual ~GameSvrStartRequest();

  GameSvrStartRequest(const GameSvrStartRequest& from);

  inline GameSvrStartRequest& operator=(const GameSvrStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSvrStartRequest(GameSvrStartRequest&& from) noexcept
    : GameSvrStartRequest() {
    *this = ::std::move(from);
  }

  inline GameSvrStartRequest& operator=(GameSvrStartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSvrStartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSvrStartRequest* internal_default_instance() {
    return reinterpret_cast<const GameSvrStartRequest*>(
               &_GameSvrStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GameSvrStartRequest* other);
  friend void swap(GameSvrStartRequest& a, GameSvrStartRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSvrStartRequest* New() const final {
    return CreateMaybeMessage<GameSvrStartRequest>(NULL);
  }

  GameSvrStartRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSvrStartRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSvrStartRequest& from);
  void MergeFrom(const GameSvrStartRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSvrStartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 gamesvrId = 1;
  void clear_gamesvrid();
  static const int kGamesvrIdFieldNumber = 1;
  ::google::protobuf::int32 gamesvrid() const;
  void set_gamesvrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameSvrStartRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gamesvrid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameSvrStartResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameSvrStartResponse) */ {
 public:
  GameSvrStartResponse();
  virtual ~GameSvrStartResponse();

  GameSvrStartResponse(const GameSvrStartResponse& from);

  inline GameSvrStartResponse& operator=(const GameSvrStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSvrStartResponse(GameSvrStartResponse&& from) noexcept
    : GameSvrStartResponse() {
    *this = ::std::move(from);
  }

  inline GameSvrStartResponse& operator=(GameSvrStartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSvrStartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSvrStartResponse* internal_default_instance() {
    return reinterpret_cast<const GameSvrStartResponse*>(
               &_GameSvrStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GameSvrStartResponse* other);
  friend void swap(GameSvrStartResponse& a, GameSvrStartResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSvrStartResponse* New() const final {
    return CreateMaybeMessage<GameSvrStartResponse>(NULL);
  }

  GameSvrStartResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSvrStartResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSvrStartResponse& from);
  void MergeFrom(const GameSvrStartResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSvrStartResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameSvrStartResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class OpenGameRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.OpenGameRoomRequest) */ {
 public:
  OpenGameRoomRequest();
  virtual ~OpenGameRoomRequest();

  OpenGameRoomRequest(const OpenGameRoomRequest& from);

  inline OpenGameRoomRequest& operator=(const OpenGameRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenGameRoomRequest(OpenGameRoomRequest&& from) noexcept
    : OpenGameRoomRequest() {
    *this = ::std::move(from);
  }

  inline OpenGameRoomRequest& operator=(OpenGameRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenGameRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenGameRoomRequest* internal_default_instance() {
    return reinterpret_cast<const OpenGameRoomRequest*>(
               &_OpenGameRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(OpenGameRoomRequest* other);
  friend void swap(OpenGameRoomRequest& a, OpenGameRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenGameRoomRequest* New() const final {
    return CreateMaybeMessage<OpenGameRoomRequest>(NULL);
  }

  OpenGameRoomRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenGameRoomRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenGameRoomRequest& from);
  void MergeFrom(const OpenGameRoomRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGameRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.OpenGameRoomRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class OpenGameRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.OpenGameRoomResponse) */ {
 public:
  OpenGameRoomResponse();
  virtual ~OpenGameRoomResponse();

  OpenGameRoomResponse(const OpenGameRoomResponse& from);

  inline OpenGameRoomResponse& operator=(const OpenGameRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenGameRoomResponse(OpenGameRoomResponse&& from) noexcept
    : OpenGameRoomResponse() {
    *this = ::std::move(from);
  }

  inline OpenGameRoomResponse& operator=(OpenGameRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenGameRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenGameRoomResponse* internal_default_instance() {
    return reinterpret_cast<const OpenGameRoomResponse*>(
               &_OpenGameRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(OpenGameRoomResponse* other);
  friend void swap(OpenGameRoomResponse& a, OpenGameRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenGameRoomResponse* New() const final {
    return CreateMaybeMessage<OpenGameRoomResponse>(NULL);
  }

  OpenGameRoomResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenGameRoomResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenGameRoomResponse& from);
  void MergeFrom(const OpenGameRoomResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGameRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.OpenGameRoomResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameRoomEmptyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameRoomEmptyRequest) */ {
 public:
  GameRoomEmptyRequest();
  virtual ~GameRoomEmptyRequest();

  GameRoomEmptyRequest(const GameRoomEmptyRequest& from);

  inline GameRoomEmptyRequest& operator=(const GameRoomEmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameRoomEmptyRequest(GameRoomEmptyRequest&& from) noexcept
    : GameRoomEmptyRequest() {
    *this = ::std::move(from);
  }

  inline GameRoomEmptyRequest& operator=(GameRoomEmptyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameRoomEmptyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRoomEmptyRequest* internal_default_instance() {
    return reinterpret_cast<const GameRoomEmptyRequest*>(
               &_GameRoomEmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GameRoomEmptyRequest* other);
  friend void swap(GameRoomEmptyRequest& a, GameRoomEmptyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameRoomEmptyRequest* New() const final {
    return CreateMaybeMessage<GameRoomEmptyRequest>(NULL);
  }

  GameRoomEmptyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameRoomEmptyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameRoomEmptyRequest& from);
  void MergeFrom(const GameRoomEmptyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRoomEmptyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameRoomEmptyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameRoomEmptyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameRoomEmptyResponse) */ {
 public:
  GameRoomEmptyResponse();
  virtual ~GameRoomEmptyResponse();

  GameRoomEmptyResponse(const GameRoomEmptyResponse& from);

  inline GameRoomEmptyResponse& operator=(const GameRoomEmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameRoomEmptyResponse(GameRoomEmptyResponse&& from) noexcept
    : GameRoomEmptyResponse() {
    *this = ::std::move(from);
  }

  inline GameRoomEmptyResponse& operator=(GameRoomEmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameRoomEmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRoomEmptyResponse* internal_default_instance() {
    return reinterpret_cast<const GameRoomEmptyResponse*>(
               &_GameRoomEmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GameRoomEmptyResponse* other);
  friend void swap(GameRoomEmptyResponse& a, GameRoomEmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameRoomEmptyResponse* New() const final {
    return CreateMaybeMessage<GameRoomEmptyResponse>(NULL);
  }

  GameRoomEmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameRoomEmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameRoomEmptyResponse& from);
  void MergeFrom(const GameRoomEmptyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRoomEmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 needCloseRoom = 1;
  void clear_needcloseroom();
  static const int kNeedCloseRoomFieldNumber = 1;
  ::google::protobuf::int32 needcloseroom() const;
  void set_needcloseroom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameRoomEmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 needcloseroom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameSvrAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameSvrAliveRequest) */ {
 public:
  GameSvrAliveRequest();
  virtual ~GameSvrAliveRequest();

  GameSvrAliveRequest(const GameSvrAliveRequest& from);

  inline GameSvrAliveRequest& operator=(const GameSvrAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSvrAliveRequest(GameSvrAliveRequest&& from) noexcept
    : GameSvrAliveRequest() {
    *this = ::std::move(from);
  }

  inline GameSvrAliveRequest& operator=(GameSvrAliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSvrAliveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSvrAliveRequest* internal_default_instance() {
    return reinterpret_cast<const GameSvrAliveRequest*>(
               &_GameSvrAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GameSvrAliveRequest* other);
  friend void swap(GameSvrAliveRequest& a, GameSvrAliveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSvrAliveRequest* New() const final {
    return CreateMaybeMessage<GameSvrAliveRequest>(NULL);
  }

  GameSvrAliveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSvrAliveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSvrAliveRequest& from);
  void MergeFrom(const GameSvrAliveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSvrAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 gamesvrId = 1;
  void clear_gamesvrid();
  static const int kGamesvrIdFieldNumber = 1;
  ::google::protobuf::int32 gamesvrid() const;
  void set_gamesvrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameSvrAliveRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gamesvrid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameSvrAliveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameSvrAliveResponse) */ {
 public:
  GameSvrAliveResponse();
  virtual ~GameSvrAliveResponse();

  GameSvrAliveResponse(const GameSvrAliveResponse& from);

  inline GameSvrAliveResponse& operator=(const GameSvrAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSvrAliveResponse(GameSvrAliveResponse&& from) noexcept
    : GameSvrAliveResponse() {
    *this = ::std::move(from);
  }

  inline GameSvrAliveResponse& operator=(GameSvrAliveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSvrAliveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSvrAliveResponse* internal_default_instance() {
    return reinterpret_cast<const GameSvrAliveResponse*>(
               &_GameSvrAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(GameSvrAliveResponse* other);
  friend void swap(GameSvrAliveResponse& a, GameSvrAliveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSvrAliveResponse* New() const final {
    return CreateMaybeMessage<GameSvrAliveResponse>(NULL);
  }

  GameSvrAliveResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSvrAliveResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSvrAliveResponse& from);
  void MergeFrom(const GameSvrAliveResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSvrAliveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameSvrAliveResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class HallStartUpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.HallStartUpRequest) */ {
 public:
  HallStartUpRequest();
  virtual ~HallStartUpRequest();

  HallStartUpRequest(const HallStartUpRequest& from);

  inline HallStartUpRequest& operator=(const HallStartUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HallStartUpRequest(HallStartUpRequest&& from) noexcept
    : HallStartUpRequest() {
    *this = ::std::move(from);
  }

  inline HallStartUpRequest& operator=(HallStartUpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HallStartUpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HallStartUpRequest* internal_default_instance() {
    return reinterpret_cast<const HallStartUpRequest*>(
               &_HallStartUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(HallStartUpRequest* other);
  friend void swap(HallStartUpRequest& a, HallStartUpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HallStartUpRequest* New() const final {
    return CreateMaybeMessage<HallStartUpRequest>(NULL);
  }

  HallStartUpRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HallStartUpRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HallStartUpRequest& from);
  void MergeFrom(const HallStartUpRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HallStartUpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.HallStartUpRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class HallStartUpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.HallStartUpResponse) */ {
 public:
  HallStartUpResponse();
  virtual ~HallStartUpResponse();

  HallStartUpResponse(const HallStartUpResponse& from);

  inline HallStartUpResponse& operator=(const HallStartUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HallStartUpResponse(HallStartUpResponse&& from) noexcept
    : HallStartUpResponse() {
    *this = ::std::move(from);
  }

  inline HallStartUpResponse& operator=(HallStartUpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HallStartUpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HallStartUpResponse* internal_default_instance() {
    return reinterpret_cast<const HallStartUpResponse*>(
               &_HallStartUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(HallStartUpResponse* other);
  friend void swap(HallStartUpResponse& a, HallStartUpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HallStartUpResponse* New() const final {
    return CreateMaybeMessage<HallStartUpResponse>(NULL);
  }

  HallStartUpResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HallStartUpResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HallStartUpResponse& from);
  void MergeFrom(const HallStartUpResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HallStartUpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.HallStartUpResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserOnlineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserOnlineRequest) */ {
 public:
  FlushUserOnlineRequest();
  virtual ~FlushUserOnlineRequest();

  FlushUserOnlineRequest(const FlushUserOnlineRequest& from);

  inline FlushUserOnlineRequest& operator=(const FlushUserOnlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserOnlineRequest(FlushUserOnlineRequest&& from) noexcept
    : FlushUserOnlineRequest() {
    *this = ::std::move(from);
  }

  inline FlushUserOnlineRequest& operator=(FlushUserOnlineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserOnlineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserOnlineRequest* internal_default_instance() {
    return reinterpret_cast<const FlushUserOnlineRequest*>(
               &_FlushUserOnlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(FlushUserOnlineRequest* other);
  friend void swap(FlushUserOnlineRequest& a, FlushUserOnlineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserOnlineRequest* New() const final {
    return CreateMaybeMessage<FlushUserOnlineRequest>(NULL);
  }

  FlushUserOnlineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserOnlineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserOnlineRequest& from);
  void MergeFrom(const FlushUserOnlineRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserOnlineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 onlineUserId = 1;
  int onlineuserid_size() const;
  void clear_onlineuserid();
  static const int kOnlineUserIdFieldNumber = 1;
  ::google::protobuf::int32 onlineuserid(int index) const;
  void set_onlineuserid(int index, ::google::protobuf::int32 value);
  void add_onlineuserid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onlineuserid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onlineuserid();

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserOnlineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onlineuserid_;
  mutable std::atomic<int> _onlineuserid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserOnlineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserOnlineResponse) */ {
 public:
  FlushUserOnlineResponse();
  virtual ~FlushUserOnlineResponse();

  FlushUserOnlineResponse(const FlushUserOnlineResponse& from);

  inline FlushUserOnlineResponse& operator=(const FlushUserOnlineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserOnlineResponse(FlushUserOnlineResponse&& from) noexcept
    : FlushUserOnlineResponse() {
    *this = ::std::move(from);
  }

  inline FlushUserOnlineResponse& operator=(FlushUserOnlineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserOnlineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserOnlineResponse* internal_default_instance() {
    return reinterpret_cast<const FlushUserOnlineResponse*>(
               &_FlushUserOnlineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(FlushUserOnlineResponse* other);
  friend void swap(FlushUserOnlineResponse& a, FlushUserOnlineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserOnlineResponse* New() const final {
    return CreateMaybeMessage<FlushUserOnlineResponse>(NULL);
  }

  FlushUserOnlineResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserOnlineResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserOnlineResponse& from);
  void MergeFrom(const FlushUserOnlineResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserOnlineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserOnlineResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserGameSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserGameSessionRequest) */ {
 public:
  FlushUserGameSessionRequest();
  virtual ~FlushUserGameSessionRequest();

  FlushUserGameSessionRequest(const FlushUserGameSessionRequest& from);

  inline FlushUserGameSessionRequest& operator=(const FlushUserGameSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserGameSessionRequest(FlushUserGameSessionRequest&& from) noexcept
    : FlushUserGameSessionRequest() {
    *this = ::std::move(from);
  }

  inline FlushUserGameSessionRequest& operator=(FlushUserGameSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserGameSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserGameSessionRequest* internal_default_instance() {
    return reinterpret_cast<const FlushUserGameSessionRequest*>(
               &_FlushUserGameSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(FlushUserGameSessionRequest* other);
  friend void swap(FlushUserGameSessionRequest& a, FlushUserGameSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserGameSessionRequest* New() const final {
    return CreateMaybeMessage<FlushUserGameSessionRequest>(NULL);
  }

  FlushUserGameSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserGameSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserGameSessionRequest& from);
  void MergeFrom(const FlushUserGameSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserGameSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 onlineUserId = 1;
  int onlineuserid_size() const;
  void clear_onlineuserid();
  static const int kOnlineUserIdFieldNumber = 1;
  ::google::protobuf::int32 onlineuserid(int index) const;
  void set_onlineuserid(int index, ::google::protobuf::int32 value);
  void add_onlineuserid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onlineuserid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onlineuserid();

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserGameSessionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onlineuserid_;
  mutable std::atomic<int> _onlineuserid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserGameSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserGameSessionResponse) */ {
 public:
  FlushUserGameSessionResponse();
  virtual ~FlushUserGameSessionResponse();

  FlushUserGameSessionResponse(const FlushUserGameSessionResponse& from);

  inline FlushUserGameSessionResponse& operator=(const FlushUserGameSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserGameSessionResponse(FlushUserGameSessionResponse&& from) noexcept
    : FlushUserGameSessionResponse() {
    *this = ::std::move(from);
  }

  inline FlushUserGameSessionResponse& operator=(FlushUserGameSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserGameSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserGameSessionResponse* internal_default_instance() {
    return reinterpret_cast<const FlushUserGameSessionResponse*>(
               &_FlushUserGameSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(FlushUserGameSessionResponse* other);
  friend void swap(FlushUserGameSessionResponse& a, FlushUserGameSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserGameSessionResponse* New() const final {
    return CreateMaybeMessage<FlushUserGameSessionResponse>(NULL);
  }

  FlushUserGameSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserGameSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserGameSessionResponse& from);
  void MergeFrom(const FlushUserGameSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserGameSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserGameSessionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserGameStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserGameStatus) */ {
 public:
  UserGameStatus();
  virtual ~UserGameStatus();

  UserGameStatus(const UserGameStatus& from);

  inline UserGameStatus& operator=(const UserGameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGameStatus(UserGameStatus&& from) noexcept
    : UserGameStatus() {
    *this = ::std::move(from);
  }

  inline UserGameStatus& operator=(UserGameStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserGameStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGameStatus* internal_default_instance() {
    return reinterpret_cast<const UserGameStatus*>(
               &_UserGameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(UserGameStatus* other);
  friend void swap(UserGameStatus& a, UserGameStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGameStatus* New() const final {
    return CreateMaybeMessage<UserGameStatus>(NULL);
  }

  UserGameStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserGameStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserGameStatus& from);
  void MergeFrom(const UserGameStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGameStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 gameStatus = 3;
  void clear_gamestatus();
  static const int kGameStatusFieldNumber = 3;
  ::google::protobuf::int32 gamestatus() const;
  void set_gamestatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserGameStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 gamestatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserInGameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserInGameRequest) */ {
 public:
  FlushUserInGameRequest();
  virtual ~FlushUserInGameRequest();

  FlushUserInGameRequest(const FlushUserInGameRequest& from);

  inline FlushUserInGameRequest& operator=(const FlushUserInGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserInGameRequest(FlushUserInGameRequest&& from) noexcept
    : FlushUserInGameRequest() {
    *this = ::std::move(from);
  }

  inline FlushUserInGameRequest& operator=(FlushUserInGameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserInGameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserInGameRequest* internal_default_instance() {
    return reinterpret_cast<const FlushUserInGameRequest*>(
               &_FlushUserInGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(FlushUserInGameRequest* other);
  friend void swap(FlushUserInGameRequest& a, FlushUserInGameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserInGameRequest* New() const final {
    return CreateMaybeMessage<FlushUserInGameRequest>(NULL);
  }

  FlushUserInGameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserInGameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserInGameRequest& from);
  void MergeFrom(const FlushUserInGameRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserInGameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlushUserInGameRequest_EnumGameStatus EnumGameStatus;
  static const EnumGameStatus FIST_GLAG =
    FlushUserInGameRequest_EnumGameStatus_FIST_GLAG;
  static const EnumGameStatus USER_IN_GAME =
    FlushUserInGameRequest_EnumGameStatus_USER_IN_GAME;
  static const EnumGameStatus USER_IN_WATCH =
    FlushUserInGameRequest_EnumGameStatus_USER_IN_WATCH;
  static inline bool EnumGameStatus_IsValid(int value) {
    return FlushUserInGameRequest_EnumGameStatus_IsValid(value);
  }
  static const EnumGameStatus EnumGameStatus_MIN =
    FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_MIN;
  static const EnumGameStatus EnumGameStatus_MAX =
    FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_MAX;
  static const int EnumGameStatus_ARRAYSIZE =
    FlushUserInGameRequest_EnumGameStatus_EnumGameStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnumGameStatus_descriptor() {
    return FlushUserInGameRequest_EnumGameStatus_descriptor();
  }
  static inline const ::std::string& EnumGameStatus_Name(EnumGameStatus value) {
    return FlushUserInGameRequest_EnumGameStatus_Name(value);
  }
  static inline bool EnumGameStatus_Parse(const ::std::string& name,
      EnumGameStatus* value) {
    return FlushUserInGameRequest_EnumGameStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
  int gameplayer_size() const;
  void clear_gameplayer();
  static const int kGamePlayerFieldNumber = 1;
  ::SvrMsg::UserGameStatus* mutable_gameplayer(int index);
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameStatus >*
      mutable_gameplayer();
  const ::SvrMsg::UserGameStatus& gameplayer(int index) const;
  ::SvrMsg::UserGameStatus* add_gameplayer();
  const ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameStatus >&
      gameplayer() const;

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserInGameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameStatus > gameplayer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class FlushUserInGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.FlushUserInGameResponse) */ {
 public:
  FlushUserInGameResponse();
  virtual ~FlushUserInGameResponse();

  FlushUserInGameResponse(const FlushUserInGameResponse& from);

  inline FlushUserInGameResponse& operator=(const FlushUserInGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlushUserInGameResponse(FlushUserInGameResponse&& from) noexcept
    : FlushUserInGameResponse() {
    *this = ::std::move(from);
  }

  inline FlushUserInGameResponse& operator=(FlushUserInGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlushUserInGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushUserInGameResponse* internal_default_instance() {
    return reinterpret_cast<const FlushUserInGameResponse*>(
               &_FlushUserInGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(FlushUserInGameResponse* other);
  friend void swap(FlushUserInGameResponse& a, FlushUserInGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlushUserInGameResponse* New() const final {
    return CreateMaybeMessage<FlushUserInGameResponse>(NULL);
  }

  FlushUserInGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlushUserInGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlushUserInGameResponse& from);
  void MergeFrom(const FlushUserInGameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushUserInGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.FlushUserInGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class TellUserOfflineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.TellUserOfflineRequest) */ {
 public:
  TellUserOfflineRequest();
  virtual ~TellUserOfflineRequest();

  TellUserOfflineRequest(const TellUserOfflineRequest& from);

  inline TellUserOfflineRequest& operator=(const TellUserOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUserOfflineRequest(TellUserOfflineRequest&& from) noexcept
    : TellUserOfflineRequest() {
    *this = ::std::move(from);
  }

  inline TellUserOfflineRequest& operator=(TellUserOfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TellUserOfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUserOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const TellUserOfflineRequest*>(
               &_TellUserOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(TellUserOfflineRequest* other);
  friend void swap(TellUserOfflineRequest& a, TellUserOfflineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUserOfflineRequest* New() const final {
    return CreateMaybeMessage<TellUserOfflineRequest>(NULL);
  }

  TellUserOfflineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUserOfflineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUserOfflineRequest& from);
  void MergeFrom(const TellUserOfflineRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUserOfflineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.TellUserOfflineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class TellUserOfflineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.TellUserOfflineResponse) */ {
 public:
  TellUserOfflineResponse();
  virtual ~TellUserOfflineResponse();

  TellUserOfflineResponse(const TellUserOfflineResponse& from);

  inline TellUserOfflineResponse& operator=(const TellUserOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUserOfflineResponse(TellUserOfflineResponse&& from) noexcept
    : TellUserOfflineResponse() {
    *this = ::std::move(from);
  }

  inline TellUserOfflineResponse& operator=(TellUserOfflineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TellUserOfflineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUserOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const TellUserOfflineResponse*>(
               &_TellUserOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(TellUserOfflineResponse* other);
  friend void swap(TellUserOfflineResponse& a, TellUserOfflineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUserOfflineResponse* New() const final {
    return CreateMaybeMessage<TellUserOfflineResponse>(NULL);
  }

  TellUserOfflineResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUserOfflineResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUserOfflineResponse& from);
  void MergeFrom(const TellUserOfflineResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUserOfflineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.TellUserOfflineResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class TellUserLogoutGameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.TellUserLogoutGameRequest) */ {
 public:
  TellUserLogoutGameRequest();
  virtual ~TellUserLogoutGameRequest();

  TellUserLogoutGameRequest(const TellUserLogoutGameRequest& from);

  inline TellUserLogoutGameRequest& operator=(const TellUserLogoutGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUserLogoutGameRequest(TellUserLogoutGameRequest&& from) noexcept
    : TellUserLogoutGameRequest() {
    *this = ::std::move(from);
  }

  inline TellUserLogoutGameRequest& operator=(TellUserLogoutGameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TellUserLogoutGameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUserLogoutGameRequest* internal_default_instance() {
    return reinterpret_cast<const TellUserLogoutGameRequest*>(
               &_TellUserLogoutGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(TellUserLogoutGameRequest* other);
  friend void swap(TellUserLogoutGameRequest& a, TellUserLogoutGameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUserLogoutGameRequest* New() const final {
    return CreateMaybeMessage<TellUserLogoutGameRequest>(NULL);
  }

  TellUserLogoutGameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUserLogoutGameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUserLogoutGameRequest& from);
  void MergeFrom(const TellUserLogoutGameRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUserLogoutGameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.TellUserLogoutGameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class TellUserLogoutGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.TellUserLogoutGameResponse) */ {
 public:
  TellUserLogoutGameResponse();
  virtual ~TellUserLogoutGameResponse();

  TellUserLogoutGameResponse(const TellUserLogoutGameResponse& from);

  inline TellUserLogoutGameResponse& operator=(const TellUserLogoutGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUserLogoutGameResponse(TellUserLogoutGameResponse&& from) noexcept
    : TellUserLogoutGameResponse() {
    *this = ::std::move(from);
  }

  inline TellUserLogoutGameResponse& operator=(TellUserLogoutGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TellUserLogoutGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUserLogoutGameResponse* internal_default_instance() {
    return reinterpret_cast<const TellUserLogoutGameResponse*>(
               &_TellUserLogoutGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(TellUserLogoutGameResponse* other);
  friend void swap(TellUserLogoutGameResponse& a, TellUserLogoutGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUserLogoutGameResponse* New() const final {
    return CreateMaybeMessage<TellUserLogoutGameResponse>(NULL);
  }

  TellUserLogoutGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUserLogoutGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUserLogoutGameResponse& from);
  void MergeFrom(const TellUserLogoutGameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUserLogoutGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.TellUserLogoutGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class DispatchUserMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.DispatchUserMsgRequest) */ {
 public:
  DispatchUserMsgRequest();
  virtual ~DispatchUserMsgRequest();

  DispatchUserMsgRequest(const DispatchUserMsgRequest& from);

  inline DispatchUserMsgRequest& operator=(const DispatchUserMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DispatchUserMsgRequest(DispatchUserMsgRequest&& from) noexcept
    : DispatchUserMsgRequest() {
    *this = ::std::move(from);
  }

  inline DispatchUserMsgRequest& operator=(DispatchUserMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DispatchUserMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispatchUserMsgRequest* internal_default_instance() {
    return reinterpret_cast<const DispatchUserMsgRequest*>(
               &_DispatchUserMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(DispatchUserMsgRequest* other);
  friend void swap(DispatchUserMsgRequest& a, DispatchUserMsgRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DispatchUserMsgRequest* New() const final {
    return CreateMaybeMessage<DispatchUserMsgRequest>(NULL);
  }

  DispatchUserMsgRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DispatchUserMsgRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DispatchUserMsgRequest& from);
  void MergeFrom(const DispatchUserMsgRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispatchUserMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes jsonString = 1;
  void clear_jsonstring();
  static const int kJsonStringFieldNumber = 1;
  const ::std::string& jsonstring() const;
  void set_jsonstring(const ::std::string& value);
  #if LANG_CXX11
  void set_jsonstring(::std::string&& value);
  #endif
  void set_jsonstring(const char* value);
  void set_jsonstring(const void* value, size_t size);
  ::std::string* mutable_jsonstring();
  ::std::string* release_jsonstring();
  void set_allocated_jsonstring(::std::string* jsonstring);

  // @@protoc_insertion_point(class_scope:SvrMsg.DispatchUserMsgRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr jsonstring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class DispatchUserMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.DispatchUserMsgResponse) */ {
 public:
  DispatchUserMsgResponse();
  virtual ~DispatchUserMsgResponse();

  DispatchUserMsgResponse(const DispatchUserMsgResponse& from);

  inline DispatchUserMsgResponse& operator=(const DispatchUserMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DispatchUserMsgResponse(DispatchUserMsgResponse&& from) noexcept
    : DispatchUserMsgResponse() {
    *this = ::std::move(from);
  }

  inline DispatchUserMsgResponse& operator=(DispatchUserMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DispatchUserMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispatchUserMsgResponse* internal_default_instance() {
    return reinterpret_cast<const DispatchUserMsgResponse*>(
               &_DispatchUserMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(DispatchUserMsgResponse* other);
  friend void swap(DispatchUserMsgResponse& a, DispatchUserMsgResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DispatchUserMsgResponse* New() const final {
    return CreateMaybeMessage<DispatchUserMsgResponse>(NULL);
  }

  DispatchUserMsgResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DispatchUserMsgResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DispatchUserMsgResponse& from);
  void MergeFrom(const DispatchUserMsgResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispatchUserMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes jsonString = 1;
  void clear_jsonstring();
  static const int kJsonStringFieldNumber = 1;
  const ::std::string& jsonstring() const;
  void set_jsonstring(const ::std::string& value);
  #if LANG_CXX11
  void set_jsonstring(::std::string&& value);
  #endif
  void set_jsonstring(const char* value);
  void set_jsonstring(const void* value, size_t size);
  ::std::string* mutable_jsonstring();
  ::std::string* release_jsonstring();
  void set_allocated_jsonstring(::std::string* jsonstring);

  // @@protoc_insertion_point(class_scope:SvrMsg.DispatchUserMsgResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr jsonstring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class HallLoginRecordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.HallLoginRecordRequest) */ {
 public:
  HallLoginRecordRequest();
  virtual ~HallLoginRecordRequest();

  HallLoginRecordRequest(const HallLoginRecordRequest& from);

  inline HallLoginRecordRequest& operator=(const HallLoginRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HallLoginRecordRequest(HallLoginRecordRequest&& from) noexcept
    : HallLoginRecordRequest() {
    *this = ::std::move(from);
  }

  inline HallLoginRecordRequest& operator=(HallLoginRecordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HallLoginRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HallLoginRecordRequest* internal_default_instance() {
    return reinterpret_cast<const HallLoginRecordRequest*>(
               &_HallLoginRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(HallLoginRecordRequest* other);
  friend void swap(HallLoginRecordRequest& a, HallLoginRecordRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HallLoginRecordRequest* New() const final {
    return CreateMaybeMessage<HallLoginRecordRequest>(NULL);
  }

  HallLoginRecordRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HallLoginRecordRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HallLoginRecordRequest& from);
  void MergeFrom(const HallLoginRecordRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HallLoginRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes remoteAddr = 5;
  void clear_remoteaddr();
  static const int kRemoteAddrFieldNumber = 5;
  const ::std::string& remoteaddr() const;
  void set_remoteaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_remoteaddr(::std::string&& value);
  #endif
  void set_remoteaddr(const char* value);
  void set_remoteaddr(const void* value, size_t size);
  ::std::string* mutable_remoteaddr();
  ::std::string* release_remoteaddr();
  void set_allocated_remoteaddr(::std::string* remoteaddr);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.HallLoginRecordRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remoteaddr_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class HallLoginRecordResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.HallLoginRecordResponse) */ {
 public:
  HallLoginRecordResponse();
  virtual ~HallLoginRecordResponse();

  HallLoginRecordResponse(const HallLoginRecordResponse& from);

  inline HallLoginRecordResponse& operator=(const HallLoginRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HallLoginRecordResponse(HallLoginRecordResponse&& from) noexcept
    : HallLoginRecordResponse() {
    *this = ::std::move(from);
  }

  inline HallLoginRecordResponse& operator=(HallLoginRecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HallLoginRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HallLoginRecordResponse* internal_default_instance() {
    return reinterpret_cast<const HallLoginRecordResponse*>(
               &_HallLoginRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(HallLoginRecordResponse* other);
  friend void swap(HallLoginRecordResponse& a, HallLoginRecordResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HallLoginRecordResponse* New() const final {
    return CreateMaybeMessage<HallLoginRecordResponse>(NULL);
  }

  HallLoginRecordResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HallLoginRecordResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HallLoginRecordResponse& from);
  void MergeFrom(const HallLoginRecordResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HallLoginRecordResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.HallLoginRecordResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLoginRecordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLoginRecordRequest) */ {
 public:
  GameLoginRecordRequest();
  virtual ~GameLoginRecordRequest();

  GameLoginRecordRequest(const GameLoginRecordRequest& from);

  inline GameLoginRecordRequest& operator=(const GameLoginRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLoginRecordRequest(GameLoginRecordRequest&& from) noexcept
    : GameLoginRecordRequest() {
    *this = ::std::move(from);
  }

  inline GameLoginRecordRequest& operator=(GameLoginRecordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLoginRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLoginRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GameLoginRecordRequest*>(
               &_GameLoginRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(GameLoginRecordRequest* other);
  friend void swap(GameLoginRecordRequest& a, GameLoginRecordRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLoginRecordRequest* New() const final {
    return CreateMaybeMessage<GameLoginRecordRequest>(NULL);
  }

  GameLoginRecordRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLoginRecordRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLoginRecordRequest& from);
  void MergeFrom(const GameLoginRecordRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLoginRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes remoteAddr = 5;
  void clear_remoteaddr();
  static const int kRemoteAddrFieldNumber = 5;
  const ::std::string& remoteaddr() const;
  void set_remoteaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_remoteaddr(::std::string&& value);
  #endif
  void set_remoteaddr(const char* value);
  void set_remoteaddr(const void* value, size_t size);
  ::std::string* mutable_remoteaddr();
  ::std::string* release_remoteaddr();
  void set_allocated_remoteaddr(::std::string* remoteaddr);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLoginRecordRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remoteaddr_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLoginRecordResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLoginRecordResponse) */ {
 public:
  GameLoginRecordResponse();
  virtual ~GameLoginRecordResponse();

  GameLoginRecordResponse(const GameLoginRecordResponse& from);

  inline GameLoginRecordResponse& operator=(const GameLoginRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLoginRecordResponse(GameLoginRecordResponse&& from) noexcept
    : GameLoginRecordResponse() {
    *this = ::std::move(from);
  }

  inline GameLoginRecordResponse& operator=(GameLoginRecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLoginRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLoginRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GameLoginRecordResponse*>(
               &_GameLoginRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(GameLoginRecordResponse* other);
  friend void swap(GameLoginRecordResponse& a, GameLoginRecordResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLoginRecordResponse* New() const final {
    return CreateMaybeMessage<GameLoginRecordResponse>(NULL);
  }

  GameLoginRecordResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLoginRecordResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLoginRecordResponse& from);
  void MergeFrom(const GameLoginRecordResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLoginRecordResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLoginRecordResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CheckUserTokenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CheckUserTokenRequest) */ {
 public:
  CheckUserTokenRequest();
  virtual ~CheckUserTokenRequest();

  CheckUserTokenRequest(const CheckUserTokenRequest& from);

  inline CheckUserTokenRequest& operator=(const CheckUserTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserTokenRequest(CheckUserTokenRequest&& from) noexcept
    : CheckUserTokenRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserTokenRequest& operator=(CheckUserTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckUserTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserTokenRequest*>(
               &_CheckUserTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CheckUserTokenRequest* other);
  friend void swap(CheckUserTokenRequest& a, CheckUserTokenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserTokenRequest* New() const final {
    return CreateMaybeMessage<CheckUserTokenRequest>(NULL);
  }

  CheckUserTokenRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserTokenRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserTokenRequest& from);
  void MergeFrom(const CheckUserTokenRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserTokenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes userToken = 2;
  void clear_usertoken();
  static const int kUserTokenFieldNumber = 2;
  const ::std::string& usertoken() const;
  void set_usertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_usertoken(::std::string&& value);
  #endif
  void set_usertoken(const char* value);
  void set_usertoken(const void* value, size_t size);
  ::std::string* mutable_usertoken();
  ::std::string* release_usertoken();
  void set_allocated_usertoken(::std::string* usertoken);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.CheckUserTokenRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usertoken_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CheckUserTokenResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CheckUserTokenResponse) */ {
 public:
  CheckUserTokenResponse();
  virtual ~CheckUserTokenResponse();

  CheckUserTokenResponse(const CheckUserTokenResponse& from);

  inline CheckUserTokenResponse& operator=(const CheckUserTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserTokenResponse(CheckUserTokenResponse&& from) noexcept
    : CheckUserTokenResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserTokenResponse& operator=(CheckUserTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckUserTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserTokenResponse*>(
               &_CheckUserTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CheckUserTokenResponse* other);
  friend void swap(CheckUserTokenResponse& a, CheckUserTokenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserTokenResponse* New() const final {
    return CreateMaybeMessage<CheckUserTokenResponse>(NULL);
  }

  CheckUserTokenResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserTokenResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserTokenResponse& from);
  void MergeFrom(const CheckUserTokenResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserTokenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.CheckUserTokenResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CheckUserLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CheckUserLoginRequest) */ {
 public:
  CheckUserLoginRequest();
  virtual ~CheckUserLoginRequest();

  CheckUserLoginRequest(const CheckUserLoginRequest& from);

  inline CheckUserLoginRequest& operator=(const CheckUserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserLoginRequest(CheckUserLoginRequest&& from) noexcept
    : CheckUserLoginRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserLoginRequest& operator=(CheckUserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckUserLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserLoginRequest*>(
               &_CheckUserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CheckUserLoginRequest* other);
  friend void swap(CheckUserLoginRequest& a, CheckUserLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserLoginRequest* New() const final {
    return CreateMaybeMessage<CheckUserLoginRequest>(NULL);
  }

  CheckUserLoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserLoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserLoginRequest& from);
  void MergeFrom(const CheckUserLoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes userToken = 2;
  void clear_usertoken();
  static const int kUserTokenFieldNumber = 2;
  const ::std::string& usertoken() const;
  void set_usertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_usertoken(::std::string&& value);
  #endif
  void set_usertoken(const char* value);
  void set_usertoken(const void* value, size_t size);
  ::std::string* mutable_usertoken();
  ::std::string* release_usertoken();
  void set_allocated_usertoken(::std::string* usertoken);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.CheckUserLoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usertoken_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class CheckUserLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.CheckUserLoginResponse) */ {
 public:
  CheckUserLoginResponse();
  virtual ~CheckUserLoginResponse();

  CheckUserLoginResponse(const CheckUserLoginResponse& from);

  inline CheckUserLoginResponse& operator=(const CheckUserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserLoginResponse(CheckUserLoginResponse&& from) noexcept
    : CheckUserLoginResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserLoginResponse& operator=(CheckUserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckUserLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserLoginResponse*>(
               &_CheckUserLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CheckUserLoginResponse* other);
  friend void swap(CheckUserLoginResponse& a, CheckUserLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserLoginResponse* New() const final {
    return CreateMaybeMessage<CheckUserLoginResponse>(NULL);
  }

  CheckUserLoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckUserLoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckUserLoginResponse& from);
  void MergeFrom(const CheckUserLoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.CheckUserLoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class KickOutUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.KickOutUserRequest) */ {
 public:
  KickOutUserRequest();
  virtual ~KickOutUserRequest();

  KickOutUserRequest(const KickOutUserRequest& from);

  inline KickOutUserRequest& operator=(const KickOutUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickOutUserRequest(KickOutUserRequest&& from) noexcept
    : KickOutUserRequest() {
    *this = ::std::move(from);
  }

  inline KickOutUserRequest& operator=(KickOutUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KickOutUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickOutUserRequest* internal_default_instance() {
    return reinterpret_cast<const KickOutUserRequest*>(
               &_KickOutUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(KickOutUserRequest* other);
  friend void swap(KickOutUserRequest& a, KickOutUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickOutUserRequest* New() const final {
    return CreateMaybeMessage<KickOutUserRequest>(NULL);
  }

  KickOutUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KickOutUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KickOutUserRequest& from);
  void MergeFrom(const KickOutUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickOutUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::google::protobuf::int32 reason() const;
  void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.KickOutUserRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class KickOutUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.KickOutUserResponse) */ {
 public:
  KickOutUserResponse();
  virtual ~KickOutUserResponse();

  KickOutUserResponse(const KickOutUserResponse& from);

  inline KickOutUserResponse& operator=(const KickOutUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickOutUserResponse(KickOutUserResponse&& from) noexcept
    : KickOutUserResponse() {
    *this = ::std::move(from);
  }

  inline KickOutUserResponse& operator=(KickOutUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KickOutUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickOutUserResponse* internal_default_instance() {
    return reinterpret_cast<const KickOutUserResponse*>(
               &_KickOutUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(KickOutUserResponse* other);
  friend void swap(KickOutUserResponse& a, KickOutUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickOutUserResponse* New() const final {
    return CreateMaybeMessage<KickOutUserResponse>(NULL);
  }

  KickOutUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KickOutUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KickOutUserResponse& from);
  void MergeFrom(const KickOutUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickOutUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.KickOutUserResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class ForbiddenUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.ForbiddenUserRequest) */ {
 public:
  ForbiddenUserRequest();
  virtual ~ForbiddenUserRequest();

  ForbiddenUserRequest(const ForbiddenUserRequest& from);

  inline ForbiddenUserRequest& operator=(const ForbiddenUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForbiddenUserRequest(ForbiddenUserRequest&& from) noexcept
    : ForbiddenUserRequest() {
    *this = ::std::move(from);
  }

  inline ForbiddenUserRequest& operator=(ForbiddenUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ForbiddenUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForbiddenUserRequest* internal_default_instance() {
    return reinterpret_cast<const ForbiddenUserRequest*>(
               &_ForbiddenUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(ForbiddenUserRequest* other);
  friend void swap(ForbiddenUserRequest& a, ForbiddenUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForbiddenUserRequest* New() const final {
    return CreateMaybeMessage<ForbiddenUserRequest>(NULL);
  }

  ForbiddenUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForbiddenUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForbiddenUserRequest& from);
  void MergeFrom(const ForbiddenUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForbiddenUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.ForbiddenUserRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class ForbiddenUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.ForbiddenUserResponse) */ {
 public:
  ForbiddenUserResponse();
  virtual ~ForbiddenUserResponse();

  ForbiddenUserResponse(const ForbiddenUserResponse& from);

  inline ForbiddenUserResponse& operator=(const ForbiddenUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForbiddenUserResponse(ForbiddenUserResponse&& from) noexcept
    : ForbiddenUserResponse() {
    *this = ::std::move(from);
  }

  inline ForbiddenUserResponse& operator=(ForbiddenUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ForbiddenUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForbiddenUserResponse* internal_default_instance() {
    return reinterpret_cast<const ForbiddenUserResponse*>(
               &_ForbiddenUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(ForbiddenUserResponse* other);
  friend void swap(ForbiddenUserResponse& a, ForbiddenUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForbiddenUserResponse* New() const final {
    return CreateMaybeMessage<ForbiddenUserResponse>(NULL);
  }

  ForbiddenUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForbiddenUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForbiddenUserResponse& from);
  void MergeFrom(const ForbiddenUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForbiddenUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.ForbiddenUserResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GetInGameCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GetInGameCountRequest) */ {
 public:
  GetInGameCountRequest();
  virtual ~GetInGameCountRequest();

  GetInGameCountRequest(const GetInGameCountRequest& from);

  inline GetInGameCountRequest& operator=(const GetInGameCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInGameCountRequest(GetInGameCountRequest&& from) noexcept
    : GetInGameCountRequest() {
    *this = ::std::move(from);
  }

  inline GetInGameCountRequest& operator=(GetInGameCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetInGameCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInGameCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetInGameCountRequest*>(
               &_GetInGameCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(GetInGameCountRequest* other);
  friend void swap(GetInGameCountRequest& a, GetInGameCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInGameCountRequest* New() const final {
    return CreateMaybeMessage<GetInGameCountRequest>(NULL);
  }

  GetInGameCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInGameCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInGameCountRequest& from);
  void MergeFrom(const GetInGameCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInGameCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GetInGameCountRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GetInGameCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GetInGameCountResponse) */ {
 public:
  GetInGameCountResponse();
  virtual ~GetInGameCountResponse();

  GetInGameCountResponse(const GetInGameCountResponse& from);

  inline GetInGameCountResponse& operator=(const GetInGameCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInGameCountResponse(GetInGameCountResponse&& from) noexcept
    : GetInGameCountResponse() {
    *this = ::std::move(from);
  }

  inline GetInGameCountResponse& operator=(GetInGameCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetInGameCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInGameCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetInGameCountResponse*>(
               &_GetInGameCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(GetInGameCountResponse* other);
  friend void swap(GetInGameCountResponse& a, GetInGameCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInGameCountResponse* New() const final {
    return CreateMaybeMessage<GetInGameCountResponse>(NULL);
  }

  GetInGameCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInGameCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInGameCountResponse& from);
  void MergeFrom(const GetInGameCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInGameCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 loginCount = 1;
  void clear_logincount();
  static const int kLoginCountFieldNumber = 1;
  ::google::protobuf::int32 logincount() const;
  void set_logincount(::google::protobuf::int32 value);

  // int32 playCount = 2;
  void clear_playcount();
  static const int kPlayCountFieldNumber = 2;
  ::google::protobuf::int32 playcount() const;
  void set_playcount(::google::protobuf::int32 value);

  // int32 watchCount = 3;
  void clear_watchcount();
  static const int kWatchCountFieldNumber = 3;
  ::google::protobuf::int32 watchcount() const;
  void set_watchcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GetInGameCountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 logincount_;
  ::google::protobuf::int32 playcount_;
  ::google::protobuf::int32 watchcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameBuyChipsInRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameBuyChipsInRequest) */ {
 public:
  GameBuyChipsInRequest();
  virtual ~GameBuyChipsInRequest();

  GameBuyChipsInRequest(const GameBuyChipsInRequest& from);

  inline GameBuyChipsInRequest& operator=(const GameBuyChipsInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBuyChipsInRequest(GameBuyChipsInRequest&& from) noexcept
    : GameBuyChipsInRequest() {
    *this = ::std::move(from);
  }

  inline GameBuyChipsInRequest& operator=(GameBuyChipsInRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBuyChipsInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBuyChipsInRequest* internal_default_instance() {
    return reinterpret_cast<const GameBuyChipsInRequest*>(
               &_GameBuyChipsInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(GameBuyChipsInRequest* other);
  friend void swap(GameBuyChipsInRequest& a, GameBuyChipsInRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBuyChipsInRequest* New() const final {
    return CreateMaybeMessage<GameBuyChipsInRequest>(NULL);
  }

  GameBuyChipsInRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBuyChipsInRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBuyChipsInRequest& from);
  void MergeFrom(const GameBuyChipsInRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBuyChipsInRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 smallBlind = 3;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 3;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // int64 buyChips = 4;
  void clear_buychips();
  static const int kBuyChipsFieldNumber = 4;
  ::google::protobuf::int64 buychips() const;
  void set_buychips(::google::protobuf::int64 value);

  // int64 buyChipsMin = 5;
  void clear_buychipsmin();
  static const int kBuyChipsMinFieldNumber = 5;
  ::google::protobuf::int64 buychipsmin() const;
  void set_buychipsmin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameBuyChipsInRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 smallblind_;
  ::google::protobuf::int64 buychips_;
  ::google::protobuf::int64 buychipsmin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameBuyChipsInResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameBuyChipsInResponse) */ {
 public:
  GameBuyChipsInResponse();
  virtual ~GameBuyChipsInResponse();

  GameBuyChipsInResponse(const GameBuyChipsInResponse& from);

  inline GameBuyChipsInResponse& operator=(const GameBuyChipsInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameBuyChipsInResponse(GameBuyChipsInResponse&& from) noexcept
    : GameBuyChipsInResponse() {
    *this = ::std::move(from);
  }

  inline GameBuyChipsInResponse& operator=(GameBuyChipsInResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameBuyChipsInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameBuyChipsInResponse* internal_default_instance() {
    return reinterpret_cast<const GameBuyChipsInResponse*>(
               &_GameBuyChipsInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(GameBuyChipsInResponse* other);
  friend void swap(GameBuyChipsInResponse& a, GameBuyChipsInResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameBuyChipsInResponse* New() const final {
    return CreateMaybeMessage<GameBuyChipsInResponse>(NULL);
  }

  GameBuyChipsInResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameBuyChipsInResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameBuyChipsInResponse& from);
  void MergeFrom(const GameBuyChipsInResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBuyChipsInResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 buyChipsReal = 1;
  void clear_buychipsreal();
  static const int kBuyChipsRealFieldNumber = 1;
  ::google::protobuf::int64 buychipsreal() const;
  void set_buychipsreal(::google::protobuf::int64 value);

  // int64 chipsLeft = 2;
  void clear_chipsleft();
  static const int kChipsLeftFieldNumber = 2;
  ::google::protobuf::int64 chipsleft() const;
  void set_chipsleft(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameBuyChipsInResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 buychipsreal_;
  ::google::protobuf::int64 chipsleft_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameStartBetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameStartBetRequest) */ {
 public:
  GameStartBetRequest();
  virtual ~GameStartBetRequest();

  GameStartBetRequest(const GameStartBetRequest& from);

  inline GameStartBetRequest& operator=(const GameStartBetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStartBetRequest(GameStartBetRequest&& from) noexcept
    : GameStartBetRequest() {
    *this = ::std::move(from);
  }

  inline GameStartBetRequest& operator=(GameStartBetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameStartBetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartBetRequest* internal_default_instance() {
    return reinterpret_cast<const GameStartBetRequest*>(
               &_GameStartBetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(GameStartBetRequest* other);
  friend void swap(GameStartBetRequest& a, GameStartBetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStartBetRequest* New() const final {
    return CreateMaybeMessage<GameStartBetRequest>(NULL);
  }

  GameStartBetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameStartBetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameStartBetRequest& from);
  void MergeFrom(const GameStartBetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartBetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes gameId = 4;
  void clear_gameid();
  static const int kGameIdFieldNumber = 4;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 betChips = 3;
  void clear_betchips();
  static const int kBetChipsFieldNumber = 3;
  ::google::protobuf::int64 betchips() const;
  void set_betchips(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameStartBetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 betchips_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameStartBetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameStartBetResponse) */ {
 public:
  GameStartBetResponse();
  virtual ~GameStartBetResponse();

  GameStartBetResponse(const GameStartBetResponse& from);

  inline GameStartBetResponse& operator=(const GameStartBetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStartBetResponse(GameStartBetResponse&& from) noexcept
    : GameStartBetResponse() {
    *this = ::std::move(from);
  }

  inline GameStartBetResponse& operator=(GameStartBetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameStartBetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartBetResponse* internal_default_instance() {
    return reinterpret_cast<const GameStartBetResponse*>(
               &_GameStartBetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(GameStartBetResponse* other);
  friend void swap(GameStartBetResponse& a, GameStartBetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStartBetResponse* New() const final {
    return CreateMaybeMessage<GameStartBetResponse>(NULL);
  }

  GameStartBetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameStartBetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameStartBetResponse& from);
  void MergeFrom(const GameStartBetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartBetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameStartBetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameAddCarryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameAddCarryRequest) */ {
 public:
  GameAddCarryRequest();
  virtual ~GameAddCarryRequest();

  GameAddCarryRequest(const GameAddCarryRequest& from);

  inline GameAddCarryRequest& operator=(const GameAddCarryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameAddCarryRequest(GameAddCarryRequest&& from) noexcept
    : GameAddCarryRequest() {
    *this = ::std::move(from);
  }

  inline GameAddCarryRequest& operator=(GameAddCarryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameAddCarryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAddCarryRequest* internal_default_instance() {
    return reinterpret_cast<const GameAddCarryRequest*>(
               &_GameAddCarryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(GameAddCarryRequest* other);
  friend void swap(GameAddCarryRequest& a, GameAddCarryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameAddCarryRequest* New() const final {
    return CreateMaybeMessage<GameAddCarryRequest>(NULL);
  }

  GameAddCarryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameAddCarryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameAddCarryRequest& from);
  void MergeFrom(const GameAddCarryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAddCarryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 curCarryChips = 3;
  void clear_curcarrychips();
  static const int kCurCarryChipsFieldNumber = 3;
  ::google::protobuf::int64 curcarrychips() const;
  void set_curcarrychips(::google::protobuf::int64 value);

  // int64 needAddToCarry = 4;
  void clear_needaddtocarry();
  static const int kNeedAddToCarryFieldNumber = 4;
  ::google::protobuf::int64 needaddtocarry() const;
  void set_needaddtocarry(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameAddCarryRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 curcarrychips_;
  ::google::protobuf::int64 needaddtocarry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameAddCarryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameAddCarryResponse) */ {
 public:
  GameAddCarryResponse();
  virtual ~GameAddCarryResponse();

  GameAddCarryResponse(const GameAddCarryResponse& from);

  inline GameAddCarryResponse& operator=(const GameAddCarryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameAddCarryResponse(GameAddCarryResponse&& from) noexcept
    : GameAddCarryResponse() {
    *this = ::std::move(from);
  }

  inline GameAddCarryResponse& operator=(GameAddCarryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameAddCarryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAddCarryResponse* internal_default_instance() {
    return reinterpret_cast<const GameAddCarryResponse*>(
               &_GameAddCarryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(GameAddCarryResponse* other);
  friend void swap(GameAddCarryResponse& a, GameAddCarryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameAddCarryResponse* New() const final {
    return CreateMaybeMessage<GameAddCarryResponse>(NULL);
  }

  GameAddCarryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameAddCarryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameAddCarryResponse& from);
  void MergeFrom(const GameAddCarryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAddCarryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameAddCarryResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class MatchOverAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.MatchOverAccountRequest) */ {
 public:
  MatchOverAccountRequest();
  virtual ~MatchOverAccountRequest();

  MatchOverAccountRequest(const MatchOverAccountRequest& from);

  inline MatchOverAccountRequest& operator=(const MatchOverAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchOverAccountRequest(MatchOverAccountRequest&& from) noexcept
    : MatchOverAccountRequest() {
    *this = ::std::move(from);
  }

  inline MatchOverAccountRequest& operator=(MatchOverAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchOverAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchOverAccountRequest* internal_default_instance() {
    return reinterpret_cast<const MatchOverAccountRequest*>(
               &_MatchOverAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(MatchOverAccountRequest* other);
  friend void swap(MatchOverAccountRequest& a, MatchOverAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchOverAccountRequest* New() const final {
    return CreateMaybeMessage<MatchOverAccountRequest>(NULL);
  }

  MatchOverAccountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchOverAccountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchOverAccountRequest& from);
  void MergeFrom(const MatchOverAccountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchOverAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes gameId = 5;
  void clear_gameid();
  static const int kGameIdFieldNumber = 5;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 curCarryChips = 3;
  void clear_curcarrychips();
  static const int kCurCarryChipsFieldNumber = 3;
  ::google::protobuf::int64 curcarrychips() const;
  void set_curcarrychips(::google::protobuf::int64 value);

  // int64 needAddToActive = 4;
  void clear_needaddtoactive();
  static const int kNeedAddToActiveFieldNumber = 4;
  ::google::protobuf::int64 needaddtoactive() const;
  void set_needaddtoactive(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.MatchOverAccountRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 curcarrychips_;
  ::google::protobuf::int64 needaddtoactive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class MatchOverAccountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.MatchOverAccountResponse) */ {
 public:
  MatchOverAccountResponse();
  virtual ~MatchOverAccountResponse();

  MatchOverAccountResponse(const MatchOverAccountResponse& from);

  inline MatchOverAccountResponse& operator=(const MatchOverAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchOverAccountResponse(MatchOverAccountResponse&& from) noexcept
    : MatchOverAccountResponse() {
    *this = ::std::move(from);
  }

  inline MatchOverAccountResponse& operator=(MatchOverAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchOverAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchOverAccountResponse* internal_default_instance() {
    return reinterpret_cast<const MatchOverAccountResponse*>(
               &_MatchOverAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(MatchOverAccountResponse* other);
  friend void swap(MatchOverAccountResponse& a, MatchOverAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchOverAccountResponse* New() const final {
    return CreateMaybeMessage<MatchOverAccountResponse>(NULL);
  }

  MatchOverAccountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchOverAccountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchOverAccountResponse& from);
  void MergeFrom(const MatchOverAccountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchOverAccountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.MatchOverAccountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserGameAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserGameAccount) */ {
 public:
  UserGameAccount();
  virtual ~UserGameAccount();

  UserGameAccount(const UserGameAccount& from);

  inline UserGameAccount& operator=(const UserGameAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGameAccount(UserGameAccount&& from) noexcept
    : UserGameAccount() {
    *this = ::std::move(from);
  }

  inline UserGameAccount& operator=(UserGameAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserGameAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGameAccount* internal_default_instance() {
    return reinterpret_cast<const UserGameAccount*>(
               &_UserGameAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(UserGameAccount* other);
  friend void swap(UserGameAccount& a, UserGameAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGameAccount* New() const final {
    return CreateMaybeMessage<UserGameAccount>(NULL);
  }

  UserGameAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserGameAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserGameAccount& from);
  void MergeFrom(const UserGameAccount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGameAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 currentCarry = 2;
  void clear_currentcarry();
  static const int kCurrentCarryFieldNumber = 2;
  ::google::protobuf::int64 currentcarry() const;
  void set_currentcarry(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserGameAccount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 currentcarry_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameOverAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameOverAccountRequest) */ {
 public:
  GameOverAccountRequest();
  virtual ~GameOverAccountRequest();

  GameOverAccountRequest(const GameOverAccountRequest& from);

  inline GameOverAccountRequest& operator=(const GameOverAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameOverAccountRequest(GameOverAccountRequest&& from) noexcept
    : GameOverAccountRequest() {
    *this = ::std::move(from);
  }

  inline GameOverAccountRequest& operator=(GameOverAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameOverAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameOverAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GameOverAccountRequest*>(
               &_GameOverAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(GameOverAccountRequest* other);
  friend void swap(GameOverAccountRequest& a, GameOverAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameOverAccountRequest* New() const final {
    return CreateMaybeMessage<GameOverAccountRequest>(NULL);
  }

  GameOverAccountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameOverAccountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameOverAccountRequest& from);
  void MergeFrom(const GameOverAccountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOverAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SvrMsg.UserGameAccount userGameResult = 3;
  int usergameresult_size() const;
  void clear_usergameresult();
  static const int kUserGameResultFieldNumber = 3;
  ::SvrMsg::UserGameAccount* mutable_usergameresult(int index);
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameAccount >*
      mutable_usergameresult();
  const ::SvrMsg::UserGameAccount& usergameresult(int index) const;
  ::SvrMsg::UserGameAccount* add_usergameresult();
  const ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameAccount >&
      usergameresult() const;

  // bytes gameId = 2;
  void clear_gameid();
  static const int kGameIdFieldNumber = 2;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameOverAccountRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameAccount > usergameresult_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameOverAccountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameOverAccountResponse) */ {
 public:
  GameOverAccountResponse();
  virtual ~GameOverAccountResponse();

  GameOverAccountResponse(const GameOverAccountResponse& from);

  inline GameOverAccountResponse& operator=(const GameOverAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameOverAccountResponse(GameOverAccountResponse&& from) noexcept
    : GameOverAccountResponse() {
    *this = ::std::move(from);
  }

  inline GameOverAccountResponse& operator=(GameOverAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameOverAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameOverAccountResponse* internal_default_instance() {
    return reinterpret_cast<const GameOverAccountResponse*>(
               &_GameOverAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(GameOverAccountResponse* other);
  friend void swap(GameOverAccountResponse& a, GameOverAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameOverAccountResponse* New() const final {
    return CreateMaybeMessage<GameOverAccountResponse>(NULL);
  }

  GameOverAccountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameOverAccountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameOverAccountResponse& from);
  void MergeFrom(const GameOverAccountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOverAccountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameOverAccountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLeaveAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLeaveAccountRequest) */ {
 public:
  GameLeaveAccountRequest();
  virtual ~GameLeaveAccountRequest();

  GameLeaveAccountRequest(const GameLeaveAccountRequest& from);

  inline GameLeaveAccountRequest& operator=(const GameLeaveAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLeaveAccountRequest(GameLeaveAccountRequest&& from) noexcept
    : GameLeaveAccountRequest() {
    *this = ::std::move(from);
  }

  inline GameLeaveAccountRequest& operator=(GameLeaveAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLeaveAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLeaveAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GameLeaveAccountRequest*>(
               &_GameLeaveAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(GameLeaveAccountRequest* other);
  friend void swap(GameLeaveAccountRequest& a, GameLeaveAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLeaveAccountRequest* New() const final {
    return CreateMaybeMessage<GameLeaveAccountRequest>(NULL);
  }

  GameLeaveAccountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLeaveAccountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLeaveAccountRequest& from);
  void MergeFrom(const GameLeaveAccountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLeaveAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes gameId = 4;
  void clear_gameid();
  static const int kGameIdFieldNumber = 4;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 currentCarry = 3;
  void clear_currentcarry();
  static const int kCurrentCarryFieldNumber = 3;
  ::google::protobuf::int64 currentcarry() const;
  void set_currentcarry(::google::protobuf::int64 value);

  // int64 smallBlind = 5;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 5;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLeaveAccountRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 currentcarry_;
  ::google::protobuf::int64 smallblind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLeaveAccountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLeaveAccountResponse) */ {
 public:
  GameLeaveAccountResponse();
  virtual ~GameLeaveAccountResponse();

  GameLeaveAccountResponse(const GameLeaveAccountResponse& from);

  inline GameLeaveAccountResponse& operator=(const GameLeaveAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLeaveAccountResponse(GameLeaveAccountResponse&& from) noexcept
    : GameLeaveAccountResponse() {
    *this = ::std::move(from);
  }

  inline GameLeaveAccountResponse& operator=(GameLeaveAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLeaveAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLeaveAccountResponse* internal_default_instance() {
    return reinterpret_cast<const GameLeaveAccountResponse*>(
               &_GameLeaveAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(GameLeaveAccountResponse* other);
  friend void swap(GameLeaveAccountResponse& a, GameLeaveAccountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLeaveAccountResponse* New() const final {
    return CreateMaybeMessage<GameLeaveAccountResponse>(NULL);
  }

  GameLeaveAccountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLeaveAccountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLeaveAccountResponse& from);
  void MergeFrom(const GameLeaveAccountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLeaveAccountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLeaveAccountResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserBoxTimeRecoverRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserBoxTimeRecoverRequest) */ {
 public:
  UserBoxTimeRecoverRequest();
  virtual ~UserBoxTimeRecoverRequest();

  UserBoxTimeRecoverRequest(const UserBoxTimeRecoverRequest& from);

  inline UserBoxTimeRecoverRequest& operator=(const UserBoxTimeRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBoxTimeRecoverRequest(UserBoxTimeRecoverRequest&& from) noexcept
    : UserBoxTimeRecoverRequest() {
    *this = ::std::move(from);
  }

  inline UserBoxTimeRecoverRequest& operator=(UserBoxTimeRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserBoxTimeRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBoxTimeRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const UserBoxTimeRecoverRequest*>(
               &_UserBoxTimeRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(UserBoxTimeRecoverRequest* other);
  friend void swap(UserBoxTimeRecoverRequest& a, UserBoxTimeRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBoxTimeRecoverRequest* New() const final {
    return CreateMaybeMessage<UserBoxTimeRecoverRequest>(NULL);
  }

  UserBoxTimeRecoverRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBoxTimeRecoverRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBoxTimeRecoverRequest& from);
  void MergeFrom(const UserBoxTimeRecoverRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBoxTimeRecoverRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserBoxTimeRecoverRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserBoxTimeRecoverResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserBoxTimeRecoverResponse) */ {
 public:
  UserBoxTimeRecoverResponse();
  virtual ~UserBoxTimeRecoverResponse();

  UserBoxTimeRecoverResponse(const UserBoxTimeRecoverResponse& from);

  inline UserBoxTimeRecoverResponse& operator=(const UserBoxTimeRecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBoxTimeRecoverResponse(UserBoxTimeRecoverResponse&& from) noexcept
    : UserBoxTimeRecoverResponse() {
    *this = ::std::move(from);
  }

  inline UserBoxTimeRecoverResponse& operator=(UserBoxTimeRecoverResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserBoxTimeRecoverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBoxTimeRecoverResponse* internal_default_instance() {
    return reinterpret_cast<const UserBoxTimeRecoverResponse*>(
               &_UserBoxTimeRecoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(UserBoxTimeRecoverResponse* other);
  friend void swap(UserBoxTimeRecoverResponse& a, UserBoxTimeRecoverResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBoxTimeRecoverResponse* New() const final {
    return CreateMaybeMessage<UserBoxTimeRecoverResponse>(NULL);
  }

  UserBoxTimeRecoverResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBoxTimeRecoverResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBoxTimeRecoverResponse& from);
  void MergeFrom(const UserBoxTimeRecoverResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBoxTimeRecoverResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserBoxTimeRecoverResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserBoxTimePauseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserBoxTimePauseRequest) */ {
 public:
  UserBoxTimePauseRequest();
  virtual ~UserBoxTimePauseRequest();

  UserBoxTimePauseRequest(const UserBoxTimePauseRequest& from);

  inline UserBoxTimePauseRequest& operator=(const UserBoxTimePauseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBoxTimePauseRequest(UserBoxTimePauseRequest&& from) noexcept
    : UserBoxTimePauseRequest() {
    *this = ::std::move(from);
  }

  inline UserBoxTimePauseRequest& operator=(UserBoxTimePauseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserBoxTimePauseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBoxTimePauseRequest* internal_default_instance() {
    return reinterpret_cast<const UserBoxTimePauseRequest*>(
               &_UserBoxTimePauseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(UserBoxTimePauseRequest* other);
  friend void swap(UserBoxTimePauseRequest& a, UserBoxTimePauseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBoxTimePauseRequest* New() const final {
    return CreateMaybeMessage<UserBoxTimePauseRequest>(NULL);
  }

  UserBoxTimePauseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBoxTimePauseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBoxTimePauseRequest& from);
  void MergeFrom(const UserBoxTimePauseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBoxTimePauseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserBoxTimePauseRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserBoxTimePauseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserBoxTimePauseResponse) */ {
 public:
  UserBoxTimePauseResponse();
  virtual ~UserBoxTimePauseResponse();

  UserBoxTimePauseResponse(const UserBoxTimePauseResponse& from);

  inline UserBoxTimePauseResponse& operator=(const UserBoxTimePauseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserBoxTimePauseResponse(UserBoxTimePauseResponse&& from) noexcept
    : UserBoxTimePauseResponse() {
    *this = ::std::move(from);
  }

  inline UserBoxTimePauseResponse& operator=(UserBoxTimePauseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserBoxTimePauseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBoxTimePauseResponse* internal_default_instance() {
    return reinterpret_cast<const UserBoxTimePauseResponse*>(
               &_UserBoxTimePauseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(UserBoxTimePauseResponse* other);
  friend void swap(UserBoxTimePauseResponse& a, UserBoxTimePauseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBoxTimePauseResponse* New() const final {
    return CreateMaybeMessage<UserBoxTimePauseResponse>(NULL);
  }

  UserBoxTimePauseResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserBoxTimePauseResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserBoxTimePauseResponse& from);
  void MergeFrom(const UserBoxTimePauseResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBoxTimePauseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserBoxTimePauseResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyTokenLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.NotifyTokenLoginRequest) */ {
 public:
  NotifyTokenLoginRequest();
  virtual ~NotifyTokenLoginRequest();

  NotifyTokenLoginRequest(const NotifyTokenLoginRequest& from);

  inline NotifyTokenLoginRequest& operator=(const NotifyTokenLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyTokenLoginRequest(NotifyTokenLoginRequest&& from) noexcept
    : NotifyTokenLoginRequest() {
    *this = ::std::move(from);
  }

  inline NotifyTokenLoginRequest& operator=(NotifyTokenLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyTokenLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyTokenLoginRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyTokenLoginRequest*>(
               &_NotifyTokenLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(NotifyTokenLoginRequest* other);
  friend void swap(NotifyTokenLoginRequest& a, NotifyTokenLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyTokenLoginRequest* New() const final {
    return CreateMaybeMessage<NotifyTokenLoginRequest>(NULL);
  }

  NotifyTokenLoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyTokenLoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyTokenLoginRequest& from);
  void MergeFrom(const NotifyTokenLoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyTokenLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.NotifyTokenLoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyTokenLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.NotifyTokenLoginResponse) */ {
 public:
  NotifyTokenLoginResponse();
  virtual ~NotifyTokenLoginResponse();

  NotifyTokenLoginResponse(const NotifyTokenLoginResponse& from);

  inline NotifyTokenLoginResponse& operator=(const NotifyTokenLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyTokenLoginResponse(NotifyTokenLoginResponse&& from) noexcept
    : NotifyTokenLoginResponse() {
    *this = ::std::move(from);
  }

  inline NotifyTokenLoginResponse& operator=(NotifyTokenLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyTokenLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyTokenLoginResponse* internal_default_instance() {
    return reinterpret_cast<const NotifyTokenLoginResponse*>(
               &_NotifyTokenLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(NotifyTokenLoginResponse* other);
  friend void swap(NotifyTokenLoginResponse& a, NotifyTokenLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyTokenLoginResponse* New() const final {
    return CreateMaybeMessage<NotifyTokenLoginResponse>(NULL);
  }

  NotifyTokenLoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyTokenLoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyTokenLoginResponse& from);
  void MergeFrom(const NotifyTokenLoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyTokenLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.NotifyTokenLoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyOpenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.NotifyOpenRequest) */ {
 public:
  NotifyOpenRequest();
  virtual ~NotifyOpenRequest();

  NotifyOpenRequest(const NotifyOpenRequest& from);

  inline NotifyOpenRequest& operator=(const NotifyOpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyOpenRequest(NotifyOpenRequest&& from) noexcept
    : NotifyOpenRequest() {
    *this = ::std::move(from);
  }

  inline NotifyOpenRequest& operator=(NotifyOpenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyOpenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyOpenRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyOpenRequest*>(
               &_NotifyOpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(NotifyOpenRequest* other);
  friend void swap(NotifyOpenRequest& a, NotifyOpenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyOpenRequest* New() const final {
    return CreateMaybeMessage<NotifyOpenRequest>(NULL);
  }

  NotifyOpenRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyOpenRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyOpenRequest& from);
  void MergeFrom(const NotifyOpenRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyOpenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.NotifyOpenRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyOpenResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.NotifyOpenResponse) */ {
 public:
  NotifyOpenResponse();
  virtual ~NotifyOpenResponse();

  NotifyOpenResponse(const NotifyOpenResponse& from);

  inline NotifyOpenResponse& operator=(const NotifyOpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyOpenResponse(NotifyOpenResponse&& from) noexcept
    : NotifyOpenResponse() {
    *this = ::std::move(from);
  }

  inline NotifyOpenResponse& operator=(NotifyOpenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyOpenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyOpenResponse* internal_default_instance() {
    return reinterpret_cast<const NotifyOpenResponse*>(
               &_NotifyOpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(NotifyOpenResponse* other);
  friend void swap(NotifyOpenResponse& a, NotifyOpenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyOpenResponse* New() const final {
    return CreateMaybeMessage<NotifyOpenResponse>(NULL);
  }

  NotifyOpenResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyOpenResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyOpenResponse& from);
  void MergeFrom(const NotifyOpenResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyOpenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.NotifyOpenResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserLogRecordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserLogRecordRequest) */ {
 public:
  UserLogRecordRequest();
  virtual ~UserLogRecordRequest();

  UserLogRecordRequest(const UserLogRecordRequest& from);

  inline UserLogRecordRequest& operator=(const UserLogRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogRecordRequest(UserLogRecordRequest&& from) noexcept
    : UserLogRecordRequest() {
    *this = ::std::move(from);
  }

  inline UserLogRecordRequest& operator=(UserLogRecordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLogRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogRecordRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogRecordRequest*>(
               &_UserLogRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(UserLogRecordRequest* other);
  friend void swap(UserLogRecordRequest& a, UserLogRecordRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogRecordRequest* New() const final {
    return CreateMaybeMessage<UserLogRecordRequest>(NULL);
  }

  UserLogRecordRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogRecordRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogRecordRequest& from);
  void MergeFrom(const UserLogRecordRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const void* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // bytes logInfo = 4;
  void clear_loginfo();
  static const int kLogInfoFieldNumber = 4;
  const ::std::string& loginfo() const;
  void set_loginfo(const ::std::string& value);
  #if LANG_CXX11
  void set_loginfo(::std::string&& value);
  #endif
  void set_loginfo(const char* value);
  void set_loginfo(const void* value, size_t size);
  ::std::string* mutable_loginfo();
  ::std::string* release_loginfo();
  void set_allocated_loginfo(::std::string* loginfo);

  // int64 logTime = 2;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 2;
  ::google::protobuf::int64 logtime() const;
  void set_logtime(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserLogRecordRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr loginfo_;
  ::google::protobuf::int64 logtime_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserLogRecordResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserLogRecordResponse) */ {
 public:
  UserLogRecordResponse();
  virtual ~UserLogRecordResponse();

  UserLogRecordResponse(const UserLogRecordResponse& from);

  inline UserLogRecordResponse& operator=(const UserLogRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogRecordResponse(UserLogRecordResponse&& from) noexcept
    : UserLogRecordResponse() {
    *this = ::std::move(from);
  }

  inline UserLogRecordResponse& operator=(UserLogRecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLogRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogRecordResponse* internal_default_instance() {
    return reinterpret_cast<const UserLogRecordResponse*>(
               &_UserLogRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(UserLogRecordResponse* other);
  friend void swap(UserLogRecordResponse& a, UserLogRecordResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogRecordResponse* New() const final {
    return CreateMaybeMessage<UserLogRecordResponse>(NULL);
  }

  UserLogRecordResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogRecordResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogRecordResponse& from);
  void MergeFrom(const UserLogRecordResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogRecordResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserLogRecordResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLogRequest) */ {
 public:
  GameLogRequest();
  virtual ~GameLogRequest();

  GameLogRequest(const GameLogRequest& from);

  inline GameLogRequest& operator=(const GameLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLogRequest(GameLogRequest&& from) noexcept
    : GameLogRequest() {
    *this = ::std::move(from);
  }

  inline GameLogRequest& operator=(GameLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLogRequest* internal_default_instance() {
    return reinterpret_cast<const GameLogRequest*>(
               &_GameLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(GameLogRequest* other);
  friend void swap(GameLogRequest& a, GameLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLogRequest* New() const final {
    return CreateMaybeMessage<GameLogRequest>(NULL);
  }

  GameLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLogRequest& from);
  void MergeFrom(const GameLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 playerId = 7;
  int playerid_size() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 7;
  ::google::protobuf::int32 playerid(int index) const;
  void set_playerid(int index, ::google::protobuf::int32 value);
  void add_playerid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerid();

  // bytes gameId = 5;
  void clear_gameid();
  static const int kGameIdFieldNumber = 5;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // bytes logInfo = 6;
  void clear_loginfo();
  static const int kLogInfoFieldNumber = 6;
  const ::std::string& loginfo() const;
  void set_loginfo(const ::std::string& value);
  #if LANG_CXX11
  void set_loginfo(::std::string&& value);
  #endif
  void set_loginfo(const char* value);
  void set_loginfo(const void* value, size_t size);
  ::std::string* mutable_loginfo();
  ::std::string* release_loginfo();
  void set_allocated_loginfo(::std::string* loginfo);

  // bytes roomType = 9;
  void clear_roomtype();
  static const int kRoomTypeFieldNumber = 9;
  const ::std::string& roomtype() const;
  void set_roomtype(const ::std::string& value);
  #if LANG_CXX11
  void set_roomtype(::std::string&& value);
  #endif
  void set_roomtype(const char* value);
  void set_roomtype(const void* value, size_t size);
  ::std::string* mutable_roomtype();
  ::std::string* release_roomtype();
  void set_allocated_roomtype(::std::string* roomtype);

  // int64 smallBlind = 2;
  void clear_smallblind();
  static const int kSmallBlindFieldNumber = 2;
  ::google::protobuf::int64 smallblind() const;
  void set_smallblind(::google::protobuf::int64 value);

  // int64 logTime = 3;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 3;
  ::google::protobuf::int64 logtime() const;
  void set_logtime(::google::protobuf::int64 value);

  // int64 tipsTotal = 4;
  void clear_tipstotal();
  static const int kTipsTotalFieldNumber = 4;
  ::google::protobuf::int64 tipstotal() const;
  void set_tipstotal(::google::protobuf::int64 value);

  // int64 chipsPool = 8;
  void clear_chipspool();
  static const int kChipsPoolFieldNumber = 8;
  ::google::protobuf::int64 chipspool() const;
  void set_chipspool(::google::protobuf::int64 value);

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLogRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerid_;
  mutable std::atomic<int> _playerid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr loginfo_;
  ::google::protobuf::internal::ArenaStringPtr roomtype_;
  ::google::protobuf::int64 smallblind_;
  ::google::protobuf::int64 logtime_;
  ::google::protobuf::int64 tipstotal_;
  ::google::protobuf::int64 chipspool_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class GameLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.GameLogResponse) */ {
 public:
  GameLogResponse();
  virtual ~GameLogResponse();

  GameLogResponse(const GameLogResponse& from);

  inline GameLogResponse& operator=(const GameLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameLogResponse(GameLogResponse&& from) noexcept
    : GameLogResponse() {
    *this = ::std::move(from);
  }

  inline GameLogResponse& operator=(GameLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLogResponse* internal_default_instance() {
    return reinterpret_cast<const GameLogResponse*>(
               &_GameLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(GameLogResponse* other);
  friend void swap(GameLogResponse& a, GameLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameLogResponse* New() const final {
    return CreateMaybeMessage<GameLogResponse>(NULL);
  }

  GameLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameLogResponse& from);
  void MergeFrom(const GameLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.GameLogResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class AppLogRecordRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.AppLogRecordRequest) */ {
 public:
  AppLogRecordRequest();
  virtual ~AppLogRecordRequest();

  AppLogRecordRequest(const AppLogRecordRequest& from);

  inline AppLogRecordRequest& operator=(const AppLogRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppLogRecordRequest(AppLogRecordRequest&& from) noexcept
    : AppLogRecordRequest() {
    *this = ::std::move(from);
  }

  inline AppLogRecordRequest& operator=(AppLogRecordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AppLogRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppLogRecordRequest* internal_default_instance() {
    return reinterpret_cast<const AppLogRecordRequest*>(
               &_AppLogRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(AppLogRecordRequest* other);
  friend void swap(AppLogRecordRequest& a, AppLogRecordRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppLogRecordRequest* New() const final {
    return CreateMaybeMessage<AppLogRecordRequest>(NULL);
  }

  AppLogRecordRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppLogRecordRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppLogRecordRequest& from);
  void MergeFrom(const AppLogRecordRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppLogRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes logInfo = 2;
  void clear_loginfo();
  static const int kLogInfoFieldNumber = 2;
  const ::std::string& loginfo() const;
  void set_loginfo(const ::std::string& value);
  #if LANG_CXX11
  void set_loginfo(::std::string&& value);
  #endif
  void set_loginfo(const char* value);
  void set_loginfo(const void* value, size_t size);
  ::std::string* mutable_loginfo();
  ::std::string* release_loginfo();
  void set_allocated_loginfo(::std::string* loginfo);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.AppLogRecordRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loginfo_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class AppLogRecordResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.AppLogRecordResponse) */ {
 public:
  AppLogRecordResponse();
  virtual ~AppLogRecordResponse();

  AppLogRecordResponse(const AppLogRecordResponse& from);

  inline AppLogRecordResponse& operator=(const AppLogRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppLogRecordResponse(AppLogRecordResponse&& from) noexcept
    : AppLogRecordResponse() {
    *this = ::std::move(from);
  }

  inline AppLogRecordResponse& operator=(AppLogRecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AppLogRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppLogRecordResponse* internal_default_instance() {
    return reinterpret_cast<const AppLogRecordResponse*>(
               &_AppLogRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(AppLogRecordResponse* other);
  friend void swap(AppLogRecordResponse& a, AppLogRecordResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppLogRecordResponse* New() const final {
    return CreateMaybeMessage<AppLogRecordResponse>(NULL);
  }

  AppLogRecordResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppLogRecordResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppLogRecordResponse& from);
  void MergeFrom(const AppLogRecordResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppLogRecordResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.AppLogRecordResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserChipsLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserChipsLogRequest) */ {
 public:
  UserChipsLogRequest();
  virtual ~UserChipsLogRequest();

  UserChipsLogRequest(const UserChipsLogRequest& from);

  inline UserChipsLogRequest& operator=(const UserChipsLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChipsLogRequest(UserChipsLogRequest&& from) noexcept
    : UserChipsLogRequest() {
    *this = ::std::move(from);
  }

  inline UserChipsLogRequest& operator=(UserChipsLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserChipsLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChipsLogRequest* internal_default_instance() {
    return reinterpret_cast<const UserChipsLogRequest*>(
               &_UserChipsLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(UserChipsLogRequest* other);
  friend void swap(UserChipsLogRequest& a, UserChipsLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChipsLogRequest* New() const final {
    return CreateMaybeMessage<UserChipsLogRequest>(NULL);
  }

  UserChipsLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChipsLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChipsLogRequest& from);
  void MergeFrom(const UserChipsLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChipsLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes gameId = 9;
  void clear_gameid();
  static const int kGameIdFieldNumber = 9;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // int64 logTime = 2;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 2;
  ::google::protobuf::int64 logtime() const;
  void set_logtime(::google::protobuf::int64 value);

  // int64 oldTotal = 3;
  void clear_oldtotal();
  static const int kOldTotalFieldNumber = 3;
  ::google::protobuf::int64 oldtotal() const;
  void set_oldtotal(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 changeReaseon = 5;
  void clear_changereaseon();
  static const int kChangeReaseonFieldNumber = 5;
  ::google::protobuf::int32 changereaseon() const;
  void set_changereaseon(::google::protobuf::int32 value);

  // int64 newTotal = 4;
  void clear_newtotal();
  static const int kNewTotalFieldNumber = 4;
  ::google::protobuf::int64 newtotal() const;
  void set_newtotal(::google::protobuf::int64 value);

  // int32 userType = 6;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 6;
  ::google::protobuf::int32 usertype() const;
  void set_usertype(::google::protobuf::int32 value);

  // int32 roomId = 7;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 7;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int64 carry = 8;
  void clear_carry();
  static const int kCarryFieldNumber = 8;
  ::google::protobuf::int64 carry() const;
  void set_carry(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.UserChipsLogRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int64 logtime_;
  ::google::protobuf::int64 oldtotal_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 changereaseon_;
  ::google::protobuf::int64 newtotal_;
  ::google::protobuf::int32 usertype_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int64 carry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class UserChipsLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.UserChipsLogResponse) */ {
 public:
  UserChipsLogResponse();
  virtual ~UserChipsLogResponse();

  UserChipsLogResponse(const UserChipsLogResponse& from);

  inline UserChipsLogResponse& operator=(const UserChipsLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserChipsLogResponse(UserChipsLogResponse&& from) noexcept
    : UserChipsLogResponse() {
    *this = ::std::move(from);
  }

  inline UserChipsLogResponse& operator=(UserChipsLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserChipsLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserChipsLogResponse* internal_default_instance() {
    return reinterpret_cast<const UserChipsLogResponse*>(
               &_UserChipsLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(UserChipsLogResponse* other);
  friend void swap(UserChipsLogResponse& a, UserChipsLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserChipsLogResponse* New() const final {
    return CreateMaybeMessage<UserChipsLogResponse>(NULL);
  }

  UserChipsLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserChipsLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserChipsLogResponse& from);
  void MergeFrom(const UserChipsLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChipsLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.UserChipsLogResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class BankruptLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.BankruptLogRequest) */ {
 public:
  BankruptLogRequest();
  virtual ~BankruptLogRequest();

  BankruptLogRequest(const BankruptLogRequest& from);

  inline BankruptLogRequest& operator=(const BankruptLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BankruptLogRequest(BankruptLogRequest&& from) noexcept
    : BankruptLogRequest() {
    *this = ::std::move(from);
  }

  inline BankruptLogRequest& operator=(BankruptLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BankruptLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BankruptLogRequest* internal_default_instance() {
    return reinterpret_cast<const BankruptLogRequest*>(
               &_BankruptLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(BankruptLogRequest* other);
  friend void swap(BankruptLogRequest& a, BankruptLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BankruptLogRequest* New() const final {
    return CreateMaybeMessage<BankruptLogRequest>(NULL);
  }

  BankruptLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BankruptLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BankruptLogRequest& from);
  void MergeFrom(const BankruptLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankruptLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 logTime = 2;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 2;
  ::google::protobuf::int64 logtime() const;
  void set_logtime(::google::protobuf::int64 value);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrMsg.BankruptLogRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 logtime_;
  ::google::protobuf::int32 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class BankruptLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.BankruptLogResponse) */ {
 public:
  BankruptLogResponse();
  virtual ~BankruptLogResponse();

  BankruptLogResponse(const BankruptLogResponse& from);

  inline BankruptLogResponse& operator=(const BankruptLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BankruptLogResponse(BankruptLogResponse&& from) noexcept
    : BankruptLogResponse() {
    *this = ::std::move(from);
  }

  inline BankruptLogResponse& operator=(BankruptLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BankruptLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BankruptLogResponse* internal_default_instance() {
    return reinterpret_cast<const BankruptLogResponse*>(
               &_BankruptLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(BankruptLogResponse* other);
  friend void swap(BankruptLogResponse& a, BankruptLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BankruptLogResponse* New() const final {
    return CreateMaybeMessage<BankruptLogResponse>(NULL);
  }

  BankruptLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BankruptLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BankruptLogResponse& from);
  void MergeFrom(const BankruptLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankruptLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.BankruptLogResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class QueryRoomMatchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.QueryRoomMatchRequest) */ {
 public:
  QueryRoomMatchRequest();
  virtual ~QueryRoomMatchRequest();

  QueryRoomMatchRequest(const QueryRoomMatchRequest& from);

  inline QueryRoomMatchRequest& operator=(const QueryRoomMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRoomMatchRequest(QueryRoomMatchRequest&& from) noexcept
    : QueryRoomMatchRequest() {
    *this = ::std::move(from);
  }

  inline QueryRoomMatchRequest& operator=(QueryRoomMatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QueryRoomMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoomMatchRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRoomMatchRequest*>(
               &_QueryRoomMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(QueryRoomMatchRequest* other);
  friend void swap(QueryRoomMatchRequest& a, QueryRoomMatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRoomMatchRequest* New() const final {
    return CreateMaybeMessage<QueryRoomMatchRequest>(NULL);
  }

  QueryRoomMatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRoomMatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRoomMatchRequest& from);
  void MergeFrom(const QueryRoomMatchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRoomMatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.QueryRoomMatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class QueryRoomMatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.QueryRoomMatchResponse) */ {
 public:
  QueryRoomMatchResponse();
  virtual ~QueryRoomMatchResponse();

  QueryRoomMatchResponse(const QueryRoomMatchResponse& from);

  inline QueryRoomMatchResponse& operator=(const QueryRoomMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRoomMatchResponse(QueryRoomMatchResponse&& from) noexcept
    : QueryRoomMatchResponse() {
    *this = ::std::move(from);
  }

  inline QueryRoomMatchResponse& operator=(QueryRoomMatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QueryRoomMatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoomMatchResponse* internal_default_instance() {
    return reinterpret_cast<const QueryRoomMatchResponse*>(
               &_QueryRoomMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(QueryRoomMatchResponse* other);
  friend void swap(QueryRoomMatchResponse& a, QueryRoomMatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRoomMatchResponse* New() const final {
    return CreateMaybeMessage<QueryRoomMatchResponse>(NULL);
  }

  QueryRoomMatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRoomMatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRoomMatchResponse& from);
  void MergeFrom(const QueryRoomMatchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRoomMatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isAvailable = 1;
  void clear_isavailable();
  static const int kIsAvailableFieldNumber = 1;
  bool isavailable() const;
  void set_isavailable(bool value);

  // @@protoc_insertion_point(class_scope:SvrMsg.QueryRoomMatchResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isavailable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class RoomMatchStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.RoomMatchStatusRequest) */ {
 public:
  RoomMatchStatusRequest();
  virtual ~RoomMatchStatusRequest();

  RoomMatchStatusRequest(const RoomMatchStatusRequest& from);

  inline RoomMatchStatusRequest& operator=(const RoomMatchStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomMatchStatusRequest(RoomMatchStatusRequest&& from) noexcept
    : RoomMatchStatusRequest() {
    *this = ::std::move(from);
  }

  inline RoomMatchStatusRequest& operator=(RoomMatchStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoomMatchStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomMatchStatusRequest* internal_default_instance() {
    return reinterpret_cast<const RoomMatchStatusRequest*>(
               &_RoomMatchStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(RoomMatchStatusRequest* other);
  friend void swap(RoomMatchStatusRequest& a, RoomMatchStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomMatchStatusRequest* New() const final {
    return CreateMaybeMessage<RoomMatchStatusRequest>(NULL);
  }

  RoomMatchStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomMatchStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomMatchStatusRequest& from);
  void MergeFrom(const RoomMatchStatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMatchStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isAvailable = 1;
  void clear_isavailable();
  static const int kIsAvailableFieldNumber = 1;
  bool isavailable() const;
  void set_isavailable(bool value);

  // @@protoc_insertion_point(class_scope:SvrMsg.RoomMatchStatusRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isavailable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// -------------------------------------------------------------------

class RoomMatchStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrMsg.RoomMatchStatusResponse) */ {
 public:
  RoomMatchStatusResponse();
  virtual ~RoomMatchStatusResponse();

  RoomMatchStatusResponse(const RoomMatchStatusResponse& from);

  inline RoomMatchStatusResponse& operator=(const RoomMatchStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomMatchStatusResponse(RoomMatchStatusResponse&& from) noexcept
    : RoomMatchStatusResponse() {
    *this = ::std::move(from);
  }

  inline RoomMatchStatusResponse& operator=(RoomMatchStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoomMatchStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomMatchStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RoomMatchStatusResponse*>(
               &_RoomMatchStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(RoomMatchStatusResponse* other);
  friend void swap(RoomMatchStatusResponse& a, RoomMatchStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomMatchStatusResponse* New() const final {
    return CreateMaybeMessage<RoomMatchStatusResponse>(NULL);
  }

  RoomMatchStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomMatchStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomMatchStatusResponse& from);
  void MergeFrom(const RoomMatchStatusResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMatchStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SvrMsg.RoomMatchStatusResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvrMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetGameSvrInstanceRequest

// bytes hostIp = 1;
inline void GetGameSvrInstanceRequest::clear_hostip() {
  hostip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetGameSvrInstanceRequest::hostip() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GetGameSvrInstanceRequest.hostIp)
  return hostip_.GetNoArena();
}
inline void GetGameSvrInstanceRequest::set_hostip(const ::std::string& value) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GetGameSvrInstanceRequest.hostIp)
}
#if LANG_CXX11
inline void GetGameSvrInstanceRequest::set_hostip(::std::string&& value) {
  
  hostip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GetGameSvrInstanceRequest.hostIp)
}
#endif
inline void GetGameSvrInstanceRequest::set_hostip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GetGameSvrInstanceRequest.hostIp)
}
inline void GetGameSvrInstanceRequest::set_hostip(const void* value, size_t size) {
  
  hostip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GetGameSvrInstanceRequest.hostIp)
}
inline ::std::string* GetGameSvrInstanceRequest::mutable_hostip() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GetGameSvrInstanceRequest.hostIp)
  return hostip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetGameSvrInstanceRequest::release_hostip() {
  // @@protoc_insertion_point(field_release:SvrMsg.GetGameSvrInstanceRequest.hostIp)
  
  return hostip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetGameSvrInstanceRequest::set_allocated_hostip(::std::string* hostip) {
  if (hostip != NULL) {
    
  } else {
    
  }
  hostip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostip);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GetGameSvrInstanceRequest.hostIp)
}

// -------------------------------------------------------------------

// GetGameSvrInstanceResponse

// repeated int32 gamesvrPorts = 1;
inline int GetGameSvrInstanceResponse::gamesvrports_size() const {
  return gamesvrports_.size();
}
inline void GetGameSvrInstanceResponse::clear_gamesvrports() {
  gamesvrports_.Clear();
}
inline ::google::protobuf::int32 GetGameSvrInstanceResponse::gamesvrports(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.GetGameSvrInstanceResponse.gamesvrPorts)
  return gamesvrports_.Get(index);
}
inline void GetGameSvrInstanceResponse::set_gamesvrports(int index, ::google::protobuf::int32 value) {
  gamesvrports_.Set(index, value);
  // @@protoc_insertion_point(field_set:SvrMsg.GetGameSvrInstanceResponse.gamesvrPorts)
}
inline void GetGameSvrInstanceResponse::add_gamesvrports(::google::protobuf::int32 value) {
  gamesvrports_.Add(value);
  // @@protoc_insertion_point(field_add:SvrMsg.GetGameSvrInstanceResponse.gamesvrPorts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetGameSvrInstanceResponse::gamesvrports() const {
  // @@protoc_insertion_point(field_list:SvrMsg.GetGameSvrInstanceResponse.gamesvrPorts)
  return gamesvrports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetGameSvrInstanceResponse::mutable_gamesvrports() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.GetGameSvrInstanceResponse.gamesvrPorts)
  return &gamesvrports_;
}

// -------------------------------------------------------------------

// CommQueryRequest

// bytes templateName = 1;
inline void CommQueryRequest::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommQueryRequest::templatename() const {
  // @@protoc_insertion_point(field_get:SvrMsg.CommQueryRequest.templateName)
  return templatename_.GetNoArena();
}
inline void CommQueryRequest::set_templatename(const ::std::string& value) {
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.CommQueryRequest.templateName)
}
#if LANG_CXX11
inline void CommQueryRequest::set_templatename(::std::string&& value) {
  
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.CommQueryRequest.templateName)
}
#endif
inline void CommQueryRequest::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.CommQueryRequest.templateName)
}
inline void CommQueryRequest::set_templatename(const void* value, size_t size) {
  
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.CommQueryRequest.templateName)
}
inline ::std::string* CommQueryRequest::mutable_templatename() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.CommQueryRequest.templateName)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommQueryRequest::release_templatename() {
  // @@protoc_insertion_point(field_release:SvrMsg.CommQueryRequest.templateName)
  
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommQueryRequest::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    
  } else {
    
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.CommQueryRequest.templateName)
}

// repeated bytes queryParas = 2;
inline int CommQueryRequest::queryparas_size() const {
  return queryparas_.size();
}
inline void CommQueryRequest::clear_queryparas() {
  queryparas_.Clear();
}
inline const ::std::string& CommQueryRequest::queryparas(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.CommQueryRequest.queryParas)
  return queryparas_.Get(index);
}
inline ::std::string* CommQueryRequest::mutable_queryparas(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.CommQueryRequest.queryParas)
  return queryparas_.Mutable(index);
}
inline void CommQueryRequest::set_queryparas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SvrMsg.CommQueryRequest.queryParas)
  queryparas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommQueryRequest::set_queryparas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SvrMsg.CommQueryRequest.queryParas)
  queryparas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommQueryRequest::set_queryparas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queryparas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SvrMsg.CommQueryRequest.queryParas)
}
inline void CommQueryRequest::set_queryparas(int index, const void* value, size_t size) {
  queryparas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.CommQueryRequest.queryParas)
}
inline ::std::string* CommQueryRequest::add_queryparas() {
  // @@protoc_insertion_point(field_add_mutable:SvrMsg.CommQueryRequest.queryParas)
  return queryparas_.Add();
}
inline void CommQueryRequest::add_queryparas(const ::std::string& value) {
  queryparas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SvrMsg.CommQueryRequest.queryParas)
}
#if LANG_CXX11
inline void CommQueryRequest::add_queryparas(::std::string&& value) {
  queryparas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SvrMsg.CommQueryRequest.queryParas)
}
#endif
inline void CommQueryRequest::add_queryparas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queryparas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SvrMsg.CommQueryRequest.queryParas)
}
inline void CommQueryRequest::add_queryparas(const void* value, size_t size) {
  queryparas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SvrMsg.CommQueryRequest.queryParas)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CommQueryRequest::queryparas() const {
  // @@protoc_insertion_point(field_list:SvrMsg.CommQueryRequest.queryParas)
  return queryparas_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CommQueryRequest::mutable_queryparas() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.CommQueryRequest.queryParas)
  return &queryparas_;
}

// -------------------------------------------------------------------

// DBRow

// repeated bytes dbRow = 1;
inline int DBRow::dbrow_size() const {
  return dbrow_.size();
}
inline void DBRow::clear_dbrow() {
  dbrow_.Clear();
}
inline const ::std::string& DBRow::dbrow(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.DBRow.dbRow)
  return dbrow_.Get(index);
}
inline ::std::string* DBRow::mutable_dbrow(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.DBRow.dbRow)
  return dbrow_.Mutable(index);
}
inline void DBRow::set_dbrow(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SvrMsg.DBRow.dbRow)
  dbrow_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DBRow::set_dbrow(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SvrMsg.DBRow.dbRow)
  dbrow_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DBRow::set_dbrow(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dbrow_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SvrMsg.DBRow.dbRow)
}
inline void DBRow::set_dbrow(int index, const void* value, size_t size) {
  dbrow_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.DBRow.dbRow)
}
inline ::std::string* DBRow::add_dbrow() {
  // @@protoc_insertion_point(field_add_mutable:SvrMsg.DBRow.dbRow)
  return dbrow_.Add();
}
inline void DBRow::add_dbrow(const ::std::string& value) {
  dbrow_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SvrMsg.DBRow.dbRow)
}
#if LANG_CXX11
inline void DBRow::add_dbrow(::std::string&& value) {
  dbrow_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SvrMsg.DBRow.dbRow)
}
#endif
inline void DBRow::add_dbrow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dbrow_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SvrMsg.DBRow.dbRow)
}
inline void DBRow::add_dbrow(const void* value, size_t size) {
  dbrow_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SvrMsg.DBRow.dbRow)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DBRow::dbrow() const {
  // @@protoc_insertion_point(field_list:SvrMsg.DBRow.dbRow)
  return dbrow_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DBRow::mutable_dbrow() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.DBRow.dbRow)
  return &dbrow_;
}

// -------------------------------------------------------------------

// CommQueryResponse

// repeated .SvrMsg.DBRow queryResult = 1;
inline int CommQueryResponse::queryresult_size() const {
  return queryresult_.size();
}
inline void CommQueryResponse::clear_queryresult() {
  queryresult_.Clear();
}
inline ::SvrMsg::DBRow* CommQueryResponse::mutable_queryresult(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.CommQueryResponse.queryResult)
  return queryresult_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SvrMsg::DBRow >*
CommQueryResponse::mutable_queryresult() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.CommQueryResponse.queryResult)
  return &queryresult_;
}
inline const ::SvrMsg::DBRow& CommQueryResponse::queryresult(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.CommQueryResponse.queryResult)
  return queryresult_.Get(index);
}
inline ::SvrMsg::DBRow* CommQueryResponse::add_queryresult() {
  // @@protoc_insertion_point(field_add:SvrMsg.CommQueryResponse.queryResult)
  return queryresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrMsg::DBRow >&
CommQueryResponse::queryresult() const {
  // @@protoc_insertion_point(field_list:SvrMsg.CommQueryResponse.queryResult)
  return queryresult_;
}

// -------------------------------------------------------------------

// PlayerGameResult

// int32 userId = 1;
inline void PlayerGameResult::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 PlayerGameResult::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.PlayerGameResult.userId)
  return userid_;
}
inline void PlayerGameResult::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.PlayerGameResult.userId)
}

// int64 chipsIncrease = 2;
inline void PlayerGameResult::clear_chipsincrease() {
  chipsincrease_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerGameResult::chipsincrease() const {
  // @@protoc_insertion_point(field_get:SvrMsg.PlayerGameResult.chipsIncrease)
  return chipsincrease_;
}
inline void PlayerGameResult::set_chipsincrease(::google::protobuf::int64 value) {
  
  chipsincrease_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.PlayerGameResult.chipsIncrease)
}

// int32 expIncrease = 3;
inline void PlayerGameResult::clear_expincrease() {
  expincrease_ = 0;
}
inline ::google::protobuf::int32 PlayerGameResult::expincrease() const {
  // @@protoc_insertion_point(field_get:SvrMsg.PlayerGameResult.expIncrease)
  return expincrease_;
}
inline void PlayerGameResult::set_expincrease(::google::protobuf::int32 value) {
  
  expincrease_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.PlayerGameResult.expIncrease)
}

// int32 statusMask = 4;
inline void PlayerGameResult::clear_statusmask() {
  statusmask_ = 0;
}
inline ::google::protobuf::int32 PlayerGameResult::statusmask() const {
  // @@protoc_insertion_point(field_get:SvrMsg.PlayerGameResult.statusMask)
  return statusmask_;
}
inline void PlayerGameResult::set_statusmask(::google::protobuf::int32 value) {
  
  statusmask_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.PlayerGameResult.statusMask)
}

// int64 chipsWinPool = 5;
inline void PlayerGameResult::clear_chipswinpool() {
  chipswinpool_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerGameResult::chipswinpool() const {
  // @@protoc_insertion_point(field_get:SvrMsg.PlayerGameResult.chipsWinPool)
  return chipswinpool_;
}
inline void PlayerGameResult::set_chipswinpool(::google::protobuf::int64 value) {
  
  chipswinpool_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.PlayerGameResult.chipsWinPool)
}

// -------------------------------------------------------------------

// SubmitGameResultRequest

// bytes gameId = 1;
inline void SubmitGameResultRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitGameResultRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.SubmitGameResultRequest.gameId)
  return gameid_.GetNoArena();
}
inline void SubmitGameResultRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.SubmitGameResultRequest.gameId)
}
#if LANG_CXX11
inline void SubmitGameResultRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.SubmitGameResultRequest.gameId)
}
#endif
inline void SubmitGameResultRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.SubmitGameResultRequest.gameId)
}
inline void SubmitGameResultRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.SubmitGameResultRequest.gameId)
}
inline ::std::string* SubmitGameResultRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.SubmitGameResultRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitGameResultRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.SubmitGameResultRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitGameResultRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.SubmitGameResultRequest.gameId)
}

// repeated .SvrMsg.PlayerGameResult gameResult = 2;
inline int SubmitGameResultRequest::gameresult_size() const {
  return gameresult_.size();
}
inline void SubmitGameResultRequest::clear_gameresult() {
  gameresult_.Clear();
}
inline ::SvrMsg::PlayerGameResult* SubmitGameResultRequest::mutable_gameresult(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.SubmitGameResultRequest.gameResult)
  return gameresult_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SvrMsg::PlayerGameResult >*
SubmitGameResultRequest::mutable_gameresult() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.SubmitGameResultRequest.gameResult)
  return &gameresult_;
}
inline const ::SvrMsg::PlayerGameResult& SubmitGameResultRequest::gameresult(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.SubmitGameResultRequest.gameResult)
  return gameresult_.Get(index);
}
inline ::SvrMsg::PlayerGameResult* SubmitGameResultRequest::add_gameresult() {
  // @@protoc_insertion_point(field_add:SvrMsg.SubmitGameResultRequest.gameResult)
  return gameresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrMsg::PlayerGameResult >&
SubmitGameResultRequest::gameresult() const {
  // @@protoc_insertion_point(field_list:SvrMsg.SubmitGameResultRequest.gameResult)
  return gameresult_;
}

// -------------------------------------------------------------------

// SubmitGameResultResponse

// -------------------------------------------------------------------

// AddPlayerChipsRequest

// int32 userId = 1;
inline void AddPlayerChipsRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 AddPlayerChipsRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AddPlayerChipsRequest.userId)
  return userid_;
}
inline void AddPlayerChipsRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.AddPlayerChipsRequest.userId)
}

// int64 chipsAddCount = 2;
inline void AddPlayerChipsRequest::clear_chipsaddcount() {
  chipsaddcount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddPlayerChipsRequest::chipsaddcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AddPlayerChipsRequest.chipsAddCount)
  return chipsaddcount_;
}
inline void AddPlayerChipsRequest::set_chipsaddcount(::google::protobuf::int64 value) {
  
  chipsaddcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.AddPlayerChipsRequest.chipsAddCount)
}

// int32 addReason = 3;
inline void AddPlayerChipsRequest::clear_addreason() {
  addreason_ = 0;
}
inline ::google::protobuf::int32 AddPlayerChipsRequest::addreason() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AddPlayerChipsRequest.addReason)
  return addreason_;
}
inline void AddPlayerChipsRequest::set_addreason(::google::protobuf::int32 value) {
  
  addreason_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.AddPlayerChipsRequest.addReason)
}

// -------------------------------------------------------------------

// AddPlayerChipsResponse

// int64 currentChips = 1;
inline void AddPlayerChipsResponse::clear_currentchips() {
  currentchips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddPlayerChipsResponse::currentchips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AddPlayerChipsResponse.currentChips)
  return currentchips_;
}
inline void AddPlayerChipsResponse::set_currentchips(::google::protobuf::int64 value) {
  
  currentchips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.AddPlayerChipsResponse.currentChips)
}

// -------------------------------------------------------------------

// UserJoinGameRequest

// int32 userId = 1;
inline void UserJoinGameRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserJoinGameRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserJoinGameRequest.userId)
  return userid_;
}
inline void UserJoinGameRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserJoinGameRequest.userId)
}

// int32 roomId = 2;
inline void UserJoinGameRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 UserJoinGameRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserJoinGameRequest.roomId)
  return roomid_;
}
inline void UserJoinGameRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserJoinGameRequest.roomId)
}

// int64 smallBlind = 3;
inline void UserJoinGameRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserJoinGameRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserJoinGameRequest.smallBlind)
  return smallblind_;
}
inline void UserJoinGameRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserJoinGameRequest.smallBlind)
}

// int32 playingCount = 4;
inline void UserJoinGameRequest::clear_playingcount() {
  playingcount_ = 0;
}
inline ::google::protobuf::int32 UserJoinGameRequest::playingcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserJoinGameRequest.playingCount)
  return playingcount_;
}
inline void UserJoinGameRequest::set_playingcount(::google::protobuf::int32 value) {
  
  playingcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserJoinGameRequest.playingCount)
}

// -------------------------------------------------------------------

// UserJoinGameResponse

// -------------------------------------------------------------------

// UserLeaveGameRequest

// int32 userId = 1;
inline void UserLeaveGameRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserLeaveGameRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLeaveGameRequest.userId)
  return userid_;
}
inline void UserLeaveGameRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLeaveGameRequest.userId)
}

// int32 roomId = 2;
inline void UserLeaveGameRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 UserLeaveGameRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLeaveGameRequest.roomId)
  return roomid_;
}
inline void UserLeaveGameRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLeaveGameRequest.roomId)
}

// int32 playingCount = 3;
inline void UserLeaveGameRequest::clear_playingcount() {
  playingcount_ = 0;
}
inline ::google::protobuf::int32 UserLeaveGameRequest::playingcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLeaveGameRequest.playingCount)
  return playingcount_;
}
inline void UserLeaveGameRequest::set_playingcount(::google::protobuf::int32 value) {
  
  playingcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLeaveGameRequest.playingCount)
}

// int64 giveBackChips = 4;
inline void UserLeaveGameRequest::clear_givebackchips() {
  givebackchips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserLeaveGameRequest::givebackchips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLeaveGameRequest.giveBackChips)
  return givebackchips_;
}
inline void UserLeaveGameRequest::set_givebackchips(::google::protobuf::int64 value) {
  
  givebackchips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLeaveGameRequest.giveBackChips)
}

// int64 smallBlind = 5;
inline void UserLeaveGameRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserLeaveGameRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLeaveGameRequest.smallBlind)
  return smallblind_;
}
inline void UserLeaveGameRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLeaveGameRequest.smallBlind)
}

// -------------------------------------------------------------------

// UserLeaveGameResponse

// -------------------------------------------------------------------

// UserEnterRoomRequest

// int32 userId = 1;
inline void UserEnterRoomRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserEnterRoomRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserEnterRoomRequest.userId)
  return userid_;
}
inline void UserEnterRoomRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserEnterRoomRequest.userId)
}

// int64 roomId = 2;
inline void UserEnterRoomRequest::clear_roomid() {
  roomid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserEnterRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserEnterRoomRequest.roomId)
  return roomid_;
}
inline void UserEnterRoomRequest::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserEnterRoomRequest.roomId)
}

// int64 smallBlind = 3;
inline void UserEnterRoomRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserEnterRoomRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserEnterRoomRequest.smallBlind)
  return smallblind_;
}
inline void UserEnterRoomRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserEnterRoomRequest.smallBlind)
}

// -------------------------------------------------------------------

// UserEnterRoomResponse

// -------------------------------------------------------------------

// UserQuitRoomRequest

// int32 userId = 1;
inline void UserQuitRoomRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserQuitRoomRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserQuitRoomRequest.userId)
  return userid_;
}
inline void UserQuitRoomRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserQuitRoomRequest.userId)
}

// int32 roomId = 2;
inline void UserQuitRoomRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 UserQuitRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserQuitRoomRequest.roomId)
  return roomid_;
}
inline void UserQuitRoomRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserQuitRoomRequest.roomId)
}

// int32 playingCount = 3;
inline void UserQuitRoomRequest::clear_playingcount() {
  playingcount_ = 0;
}
inline ::google::protobuf::int32 UserQuitRoomRequest::playingcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserQuitRoomRequest.playingCount)
  return playingcount_;
}
inline void UserQuitRoomRequest::set_playingcount(::google::protobuf::int32 value) {
  
  playingcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserQuitRoomRequest.playingCount)
}

// int64 giveBackChips = 4;
inline void UserQuitRoomRequest::clear_givebackchips() {
  givebackchips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserQuitRoomRequest::givebackchips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserQuitRoomRequest.giveBackChips)
  return givebackchips_;
}
inline void UserQuitRoomRequest::set_givebackchips(::google::protobuf::int64 value) {
  
  givebackchips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserQuitRoomRequest.giveBackChips)
}

// -------------------------------------------------------------------

// UserQuitRoomResponse

// -------------------------------------------------------------------

// GameSvrStartRequest

// int32 gamesvrId = 1;
inline void GameSvrStartRequest::clear_gamesvrid() {
  gamesvrid_ = 0;
}
inline ::google::protobuf::int32 GameSvrStartRequest::gamesvrid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameSvrStartRequest.gamesvrId)
  return gamesvrid_;
}
inline void GameSvrStartRequest::set_gamesvrid(::google::protobuf::int32 value) {
  
  gamesvrid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameSvrStartRequest.gamesvrId)
}

// -------------------------------------------------------------------

// GameSvrStartResponse

// -------------------------------------------------------------------

// OpenGameRoomRequest

// int32 roomId = 1;
inline void OpenGameRoomRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 OpenGameRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.OpenGameRoomRequest.roomId)
  return roomid_;
}
inline void OpenGameRoomRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.OpenGameRoomRequest.roomId)
}

// -------------------------------------------------------------------

// OpenGameRoomResponse

// -------------------------------------------------------------------

// GameRoomEmptyRequest

// int32 roomId = 1;
inline void GameRoomEmptyRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameRoomEmptyRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameRoomEmptyRequest.roomId)
  return roomid_;
}
inline void GameRoomEmptyRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameRoomEmptyRequest.roomId)
}

// -------------------------------------------------------------------

// GameRoomEmptyResponse

// int32 needCloseRoom = 1;
inline void GameRoomEmptyResponse::clear_needcloseroom() {
  needcloseroom_ = 0;
}
inline ::google::protobuf::int32 GameRoomEmptyResponse::needcloseroom() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameRoomEmptyResponse.needCloseRoom)
  return needcloseroom_;
}
inline void GameRoomEmptyResponse::set_needcloseroom(::google::protobuf::int32 value) {
  
  needcloseroom_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameRoomEmptyResponse.needCloseRoom)
}

// -------------------------------------------------------------------

// GameSvrAliveRequest

// int32 gamesvrId = 1;
inline void GameSvrAliveRequest::clear_gamesvrid() {
  gamesvrid_ = 0;
}
inline ::google::protobuf::int32 GameSvrAliveRequest::gamesvrid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameSvrAliveRequest.gamesvrId)
  return gamesvrid_;
}
inline void GameSvrAliveRequest::set_gamesvrid(::google::protobuf::int32 value) {
  
  gamesvrid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameSvrAliveRequest.gamesvrId)
}

// -------------------------------------------------------------------

// GameSvrAliveResponse

// -------------------------------------------------------------------

// HallStartUpRequest

// -------------------------------------------------------------------

// HallStartUpResponse

// -------------------------------------------------------------------

// FlushUserOnlineRequest

// repeated int32 onlineUserId = 1;
inline int FlushUserOnlineRequest::onlineuserid_size() const {
  return onlineuserid_.size();
}
inline void FlushUserOnlineRequest::clear_onlineuserid() {
  onlineuserid_.Clear();
}
inline ::google::protobuf::int32 FlushUserOnlineRequest::onlineuserid(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.FlushUserOnlineRequest.onlineUserId)
  return onlineuserid_.Get(index);
}
inline void FlushUserOnlineRequest::set_onlineuserid(int index, ::google::protobuf::int32 value) {
  onlineuserid_.Set(index, value);
  // @@protoc_insertion_point(field_set:SvrMsg.FlushUserOnlineRequest.onlineUserId)
}
inline void FlushUserOnlineRequest::add_onlineuserid(::google::protobuf::int32 value) {
  onlineuserid_.Add(value);
  // @@protoc_insertion_point(field_add:SvrMsg.FlushUserOnlineRequest.onlineUserId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FlushUserOnlineRequest::onlineuserid() const {
  // @@protoc_insertion_point(field_list:SvrMsg.FlushUserOnlineRequest.onlineUserId)
  return onlineuserid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FlushUserOnlineRequest::mutable_onlineuserid() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.FlushUserOnlineRequest.onlineUserId)
  return &onlineuserid_;
}

// -------------------------------------------------------------------

// FlushUserOnlineResponse

// -------------------------------------------------------------------

// FlushUserGameSessionRequest

// repeated int32 onlineUserId = 1;
inline int FlushUserGameSessionRequest::onlineuserid_size() const {
  return onlineuserid_.size();
}
inline void FlushUserGameSessionRequest::clear_onlineuserid() {
  onlineuserid_.Clear();
}
inline ::google::protobuf::int32 FlushUserGameSessionRequest::onlineuserid(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.FlushUserGameSessionRequest.onlineUserId)
  return onlineuserid_.Get(index);
}
inline void FlushUserGameSessionRequest::set_onlineuserid(int index, ::google::protobuf::int32 value) {
  onlineuserid_.Set(index, value);
  // @@protoc_insertion_point(field_set:SvrMsg.FlushUserGameSessionRequest.onlineUserId)
}
inline void FlushUserGameSessionRequest::add_onlineuserid(::google::protobuf::int32 value) {
  onlineuserid_.Add(value);
  // @@protoc_insertion_point(field_add:SvrMsg.FlushUserGameSessionRequest.onlineUserId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FlushUserGameSessionRequest::onlineuserid() const {
  // @@protoc_insertion_point(field_list:SvrMsg.FlushUserGameSessionRequest.onlineUserId)
  return onlineuserid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FlushUserGameSessionRequest::mutable_onlineuserid() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.FlushUserGameSessionRequest.onlineUserId)
  return &onlineuserid_;
}

// -------------------------------------------------------------------

// FlushUserGameSessionResponse

// -------------------------------------------------------------------

// UserGameStatus

// int32 userId = 1;
inline void UserGameStatus::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserGameStatus::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserGameStatus.userId)
  return userid_;
}
inline void UserGameStatus::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserGameStatus.userId)
}

// int32 roomId = 2;
inline void UserGameStatus::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 UserGameStatus::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserGameStatus.roomId)
  return roomid_;
}
inline void UserGameStatus::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserGameStatus.roomId)
}

// int32 gameStatus = 3;
inline void UserGameStatus::clear_gamestatus() {
  gamestatus_ = 0;
}
inline ::google::protobuf::int32 UserGameStatus::gamestatus() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserGameStatus.gameStatus)
  return gamestatus_;
}
inline void UserGameStatus::set_gamestatus(::google::protobuf::int32 value) {
  
  gamestatus_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserGameStatus.gameStatus)
}

// -------------------------------------------------------------------

// FlushUserInGameRequest

// repeated .SvrMsg.UserGameStatus gamePlayer = 1;
inline int FlushUserInGameRequest::gameplayer_size() const {
  return gameplayer_.size();
}
inline void FlushUserInGameRequest::clear_gameplayer() {
  gameplayer_.Clear();
}
inline ::SvrMsg::UserGameStatus* FlushUserInGameRequest::mutable_gameplayer(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.FlushUserInGameRequest.gamePlayer)
  return gameplayer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameStatus >*
FlushUserInGameRequest::mutable_gameplayer() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.FlushUserInGameRequest.gamePlayer)
  return &gameplayer_;
}
inline const ::SvrMsg::UserGameStatus& FlushUserInGameRequest::gameplayer(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.FlushUserInGameRequest.gamePlayer)
  return gameplayer_.Get(index);
}
inline ::SvrMsg::UserGameStatus* FlushUserInGameRequest::add_gameplayer() {
  // @@protoc_insertion_point(field_add:SvrMsg.FlushUserInGameRequest.gamePlayer)
  return gameplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameStatus >&
FlushUserInGameRequest::gameplayer() const {
  // @@protoc_insertion_point(field_list:SvrMsg.FlushUserInGameRequest.gamePlayer)
  return gameplayer_;
}

// -------------------------------------------------------------------

// FlushUserInGameResponse

// -------------------------------------------------------------------

// TellUserOfflineRequest

// int32 userId = 1;
inline void TellUserOfflineRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 TellUserOfflineRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.TellUserOfflineRequest.userId)
  return userid_;
}
inline void TellUserOfflineRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.TellUserOfflineRequest.userId)
}

// -------------------------------------------------------------------

// TellUserOfflineResponse

// -------------------------------------------------------------------

// TellUserLogoutGameRequest

// int32 userId = 1;
inline void TellUserLogoutGameRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 TellUserLogoutGameRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.TellUserLogoutGameRequest.userId)
  return userid_;
}
inline void TellUserLogoutGameRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.TellUserLogoutGameRequest.userId)
}

// -------------------------------------------------------------------

// TellUserLogoutGameResponse

// -------------------------------------------------------------------

// DispatchUserMsgRequest

// bytes jsonString = 1;
inline void DispatchUserMsgRequest::clear_jsonstring() {
  jsonstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DispatchUserMsgRequest::jsonstring() const {
  // @@protoc_insertion_point(field_get:SvrMsg.DispatchUserMsgRequest.jsonString)
  return jsonstring_.GetNoArena();
}
inline void DispatchUserMsgRequest::set_jsonstring(const ::std::string& value) {
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.DispatchUserMsgRequest.jsonString)
}
#if LANG_CXX11
inline void DispatchUserMsgRequest::set_jsonstring(::std::string&& value) {
  
  jsonstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.DispatchUserMsgRequest.jsonString)
}
#endif
inline void DispatchUserMsgRequest::set_jsonstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.DispatchUserMsgRequest.jsonString)
}
inline void DispatchUserMsgRequest::set_jsonstring(const void* value, size_t size) {
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.DispatchUserMsgRequest.jsonString)
}
inline ::std::string* DispatchUserMsgRequest::mutable_jsonstring() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.DispatchUserMsgRequest.jsonString)
  return jsonstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DispatchUserMsgRequest::release_jsonstring() {
  // @@protoc_insertion_point(field_release:SvrMsg.DispatchUserMsgRequest.jsonString)
  
  return jsonstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DispatchUserMsgRequest::set_allocated_jsonstring(::std::string* jsonstring) {
  if (jsonstring != NULL) {
    
  } else {
    
  }
  jsonstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonstring);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.DispatchUserMsgRequest.jsonString)
}

// -------------------------------------------------------------------

// DispatchUserMsgResponse

// bytes jsonString = 1;
inline void DispatchUserMsgResponse::clear_jsonstring() {
  jsonstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DispatchUserMsgResponse::jsonstring() const {
  // @@protoc_insertion_point(field_get:SvrMsg.DispatchUserMsgResponse.jsonString)
  return jsonstring_.GetNoArena();
}
inline void DispatchUserMsgResponse::set_jsonstring(const ::std::string& value) {
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.DispatchUserMsgResponse.jsonString)
}
#if LANG_CXX11
inline void DispatchUserMsgResponse::set_jsonstring(::std::string&& value) {
  
  jsonstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.DispatchUserMsgResponse.jsonString)
}
#endif
inline void DispatchUserMsgResponse::set_jsonstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.DispatchUserMsgResponse.jsonString)
}
inline void DispatchUserMsgResponse::set_jsonstring(const void* value, size_t size) {
  
  jsonstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.DispatchUserMsgResponse.jsonString)
}
inline ::std::string* DispatchUserMsgResponse::mutable_jsonstring() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.DispatchUserMsgResponse.jsonString)
  return jsonstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DispatchUserMsgResponse::release_jsonstring() {
  // @@protoc_insertion_point(field_release:SvrMsg.DispatchUserMsgResponse.jsonString)
  
  return jsonstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DispatchUserMsgResponse::set_allocated_jsonstring(::std::string* jsonstring) {
  if (jsonstring != NULL) {
    
  } else {
    
  }
  jsonstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonstring);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.DispatchUserMsgResponse.jsonString)
}

// -------------------------------------------------------------------

// HallLoginRecordRequest

// int32 userId = 1;
inline void HallLoginRecordRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 HallLoginRecordRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.HallLoginRecordRequest.userId)
  return userid_;
}
inline void HallLoginRecordRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.HallLoginRecordRequest.userId)
}

// int32 pid = 2;
inline void HallLoginRecordRequest::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 HallLoginRecordRequest::pid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.HallLoginRecordRequest.pid)
  return pid_;
}
inline void HallLoginRecordRequest::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.HallLoginRecordRequest.pid)
}

// int32 time = 3;
inline void HallLoginRecordRequest::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 HallLoginRecordRequest::time() const {
  // @@protoc_insertion_point(field_get:SvrMsg.HallLoginRecordRequest.time)
  return time_;
}
inline void HallLoginRecordRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.HallLoginRecordRequest.time)
}

// int32 action = 4;
inline void HallLoginRecordRequest::clear_action() {
  action_ = 0;
}
inline ::google::protobuf::int32 HallLoginRecordRequest::action() const {
  // @@protoc_insertion_point(field_get:SvrMsg.HallLoginRecordRequest.action)
  return action_;
}
inline void HallLoginRecordRequest::set_action(::google::protobuf::int32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.HallLoginRecordRequest.action)
}

// bytes remoteAddr = 5;
inline void HallLoginRecordRequest::clear_remoteaddr() {
  remoteaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HallLoginRecordRequest::remoteaddr() const {
  // @@protoc_insertion_point(field_get:SvrMsg.HallLoginRecordRequest.remoteAddr)
  return remoteaddr_.GetNoArena();
}
inline void HallLoginRecordRequest::set_remoteaddr(const ::std::string& value) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.HallLoginRecordRequest.remoteAddr)
}
#if LANG_CXX11
inline void HallLoginRecordRequest::set_remoteaddr(::std::string&& value) {
  
  remoteaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.HallLoginRecordRequest.remoteAddr)
}
#endif
inline void HallLoginRecordRequest::set_remoteaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.HallLoginRecordRequest.remoteAddr)
}
inline void HallLoginRecordRequest::set_remoteaddr(const void* value, size_t size) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.HallLoginRecordRequest.remoteAddr)
}
inline ::std::string* HallLoginRecordRequest::mutable_remoteaddr() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.HallLoginRecordRequest.remoteAddr)
  return remoteaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HallLoginRecordRequest::release_remoteaddr() {
  // @@protoc_insertion_point(field_release:SvrMsg.HallLoginRecordRequest.remoteAddr)
  
  return remoteaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HallLoginRecordRequest::set_allocated_remoteaddr(::std::string* remoteaddr) {
  if (remoteaddr != NULL) {
    
  } else {
    
  }
  remoteaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remoteaddr);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.HallLoginRecordRequest.remoteAddr)
}

// -------------------------------------------------------------------

// HallLoginRecordResponse

// -------------------------------------------------------------------

// GameLoginRecordRequest

// int32 userId = 1;
inline void GameLoginRecordRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GameLoginRecordRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLoginRecordRequest.userId)
  return userid_;
}
inline void GameLoginRecordRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLoginRecordRequest.userId)
}

// int32 pid = 2;
inline void GameLoginRecordRequest::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 GameLoginRecordRequest::pid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLoginRecordRequest.pid)
  return pid_;
}
inline void GameLoginRecordRequest::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLoginRecordRequest.pid)
}

// int32 time = 3;
inline void GameLoginRecordRequest::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 GameLoginRecordRequest::time() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLoginRecordRequest.time)
  return time_;
}
inline void GameLoginRecordRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLoginRecordRequest.time)
}

// int32 action = 4;
inline void GameLoginRecordRequest::clear_action() {
  action_ = 0;
}
inline ::google::protobuf::int32 GameLoginRecordRequest::action() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLoginRecordRequest.action)
  return action_;
}
inline void GameLoginRecordRequest::set_action(::google::protobuf::int32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLoginRecordRequest.action)
}

// bytes remoteAddr = 5;
inline void GameLoginRecordRequest::clear_remoteaddr() {
  remoteaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLoginRecordRequest::remoteaddr() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLoginRecordRequest.remoteAddr)
  return remoteaddr_.GetNoArena();
}
inline void GameLoginRecordRequest::set_remoteaddr(const ::std::string& value) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLoginRecordRequest.remoteAddr)
}
#if LANG_CXX11
inline void GameLoginRecordRequest::set_remoteaddr(::std::string&& value) {
  
  remoteaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameLoginRecordRequest.remoteAddr)
}
#endif
inline void GameLoginRecordRequest::set_remoteaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameLoginRecordRequest.remoteAddr)
}
inline void GameLoginRecordRequest::set_remoteaddr(const void* value, size_t size) {
  
  remoteaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameLoginRecordRequest.remoteAddr)
}
inline ::std::string* GameLoginRecordRequest::mutable_remoteaddr() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameLoginRecordRequest.remoteAddr)
  return remoteaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLoginRecordRequest::release_remoteaddr() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameLoginRecordRequest.remoteAddr)
  
  return remoteaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLoginRecordRequest::set_allocated_remoteaddr(::std::string* remoteaddr) {
  if (remoteaddr != NULL) {
    
  } else {
    
  }
  remoteaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remoteaddr);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameLoginRecordRequest.remoteAddr)
}

// -------------------------------------------------------------------

// GameLoginRecordResponse

// -------------------------------------------------------------------

// CheckUserTokenRequest

// int32 userId = 1;
inline void CheckUserTokenRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 CheckUserTokenRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.CheckUserTokenRequest.userId)
  return userid_;
}
inline void CheckUserTokenRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.CheckUserTokenRequest.userId)
}

// bytes userToken = 2;
inline void CheckUserTokenRequest::clear_usertoken() {
  usertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUserTokenRequest::usertoken() const {
  // @@protoc_insertion_point(field_get:SvrMsg.CheckUserTokenRequest.userToken)
  return usertoken_.GetNoArena();
}
inline void CheckUserTokenRequest::set_usertoken(const ::std::string& value) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.CheckUserTokenRequest.userToken)
}
#if LANG_CXX11
inline void CheckUserTokenRequest::set_usertoken(::std::string&& value) {
  
  usertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.CheckUserTokenRequest.userToken)
}
#endif
inline void CheckUserTokenRequest::set_usertoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.CheckUserTokenRequest.userToken)
}
inline void CheckUserTokenRequest::set_usertoken(const void* value, size_t size) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.CheckUserTokenRequest.userToken)
}
inline ::std::string* CheckUserTokenRequest::mutable_usertoken() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.CheckUserTokenRequest.userToken)
  return usertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUserTokenRequest::release_usertoken() {
  // @@protoc_insertion_point(field_release:SvrMsg.CheckUserTokenRequest.userToken)
  
  return usertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserTokenRequest::set_allocated_usertoken(::std::string* usertoken) {
  if (usertoken != NULL) {
    
  } else {
    
  }
  usertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertoken);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.CheckUserTokenRequest.userToken)
}

// -------------------------------------------------------------------

// CheckUserTokenResponse

// -------------------------------------------------------------------

// CheckUserLoginRequest

// int32 userId = 1;
inline void CheckUserLoginRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 CheckUserLoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.CheckUserLoginRequest.userId)
  return userid_;
}
inline void CheckUserLoginRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.CheckUserLoginRequest.userId)
}

// bytes userToken = 2;
inline void CheckUserLoginRequest::clear_usertoken() {
  usertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUserLoginRequest::usertoken() const {
  // @@protoc_insertion_point(field_get:SvrMsg.CheckUserLoginRequest.userToken)
  return usertoken_.GetNoArena();
}
inline void CheckUserLoginRequest::set_usertoken(const ::std::string& value) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.CheckUserLoginRequest.userToken)
}
#if LANG_CXX11
inline void CheckUserLoginRequest::set_usertoken(::std::string&& value) {
  
  usertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.CheckUserLoginRequest.userToken)
}
#endif
inline void CheckUserLoginRequest::set_usertoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.CheckUserLoginRequest.userToken)
}
inline void CheckUserLoginRequest::set_usertoken(const void* value, size_t size) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.CheckUserLoginRequest.userToken)
}
inline ::std::string* CheckUserLoginRequest::mutable_usertoken() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.CheckUserLoginRequest.userToken)
  return usertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUserLoginRequest::release_usertoken() {
  // @@protoc_insertion_point(field_release:SvrMsg.CheckUserLoginRequest.userToken)
  
  return usertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserLoginRequest::set_allocated_usertoken(::std::string* usertoken) {
  if (usertoken != NULL) {
    
  } else {
    
  }
  usertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertoken);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.CheckUserLoginRequest.userToken)
}

// -------------------------------------------------------------------

// CheckUserLoginResponse

// -------------------------------------------------------------------

// KickOutUserRequest

// int32 userId = 1;
inline void KickOutUserRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 KickOutUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.KickOutUserRequest.userId)
  return userid_;
}
inline void KickOutUserRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.KickOutUserRequest.userId)
}

// int32 reason = 2;
inline void KickOutUserRequest::clear_reason() {
  reason_ = 0;
}
inline ::google::protobuf::int32 KickOutUserRequest::reason() const {
  // @@protoc_insertion_point(field_get:SvrMsg.KickOutUserRequest.reason)
  return reason_;
}
inline void KickOutUserRequest::set_reason(::google::protobuf::int32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.KickOutUserRequest.reason)
}

// bytes description = 3;
inline void KickOutUserRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickOutUserRequest::description() const {
  // @@protoc_insertion_point(field_get:SvrMsg.KickOutUserRequest.description)
  return description_.GetNoArena();
}
inline void KickOutUserRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.KickOutUserRequest.description)
}
#if LANG_CXX11
inline void KickOutUserRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.KickOutUserRequest.description)
}
#endif
inline void KickOutUserRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.KickOutUserRequest.description)
}
inline void KickOutUserRequest::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.KickOutUserRequest.description)
}
inline ::std::string* KickOutUserRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.KickOutUserRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickOutUserRequest::release_description() {
  // @@protoc_insertion_point(field_release:SvrMsg.KickOutUserRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickOutUserRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.KickOutUserRequest.description)
}

// -------------------------------------------------------------------

// KickOutUserResponse

// -------------------------------------------------------------------

// ForbiddenUserRequest

// int32 userId = 1;
inline void ForbiddenUserRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 ForbiddenUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.ForbiddenUserRequest.userId)
  return userid_;
}
inline void ForbiddenUserRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.ForbiddenUserRequest.userId)
}

// -------------------------------------------------------------------

// ForbiddenUserResponse

// -------------------------------------------------------------------

// GetInGameCountRequest

// -------------------------------------------------------------------

// GetInGameCountResponse

// int32 loginCount = 1;
inline void GetInGameCountResponse::clear_logincount() {
  logincount_ = 0;
}
inline ::google::protobuf::int32 GetInGameCountResponse::logincount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GetInGameCountResponse.loginCount)
  return logincount_;
}
inline void GetInGameCountResponse::set_logincount(::google::protobuf::int32 value) {
  
  logincount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GetInGameCountResponse.loginCount)
}

// int32 playCount = 2;
inline void GetInGameCountResponse::clear_playcount() {
  playcount_ = 0;
}
inline ::google::protobuf::int32 GetInGameCountResponse::playcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GetInGameCountResponse.playCount)
  return playcount_;
}
inline void GetInGameCountResponse::set_playcount(::google::protobuf::int32 value) {
  
  playcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GetInGameCountResponse.playCount)
}

// int32 watchCount = 3;
inline void GetInGameCountResponse::clear_watchcount() {
  watchcount_ = 0;
}
inline ::google::protobuf::int32 GetInGameCountResponse::watchcount() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GetInGameCountResponse.watchCount)
  return watchcount_;
}
inline void GetInGameCountResponse::set_watchcount(::google::protobuf::int32 value) {
  
  watchcount_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GetInGameCountResponse.watchCount)
}

// -------------------------------------------------------------------

// GameBuyChipsInRequest

// int32 userId = 1;
inline void GameBuyChipsInRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GameBuyChipsInRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInRequest.userId)
  return userid_;
}
inline void GameBuyChipsInRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInRequest.userId)
}

// int32 roomId = 2;
inline void GameBuyChipsInRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameBuyChipsInRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInRequest.roomId)
  return roomid_;
}
inline void GameBuyChipsInRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInRequest.roomId)
}

// int64 smallBlind = 3;
inline void GameBuyChipsInRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBuyChipsInRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInRequest.smallBlind)
  return smallblind_;
}
inline void GameBuyChipsInRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInRequest.smallBlind)
}

// int64 buyChips = 4;
inline void GameBuyChipsInRequest::clear_buychips() {
  buychips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBuyChipsInRequest::buychips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInRequest.buyChips)
  return buychips_;
}
inline void GameBuyChipsInRequest::set_buychips(::google::protobuf::int64 value) {
  
  buychips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInRequest.buyChips)
}

// int64 buyChipsMin = 5;
inline void GameBuyChipsInRequest::clear_buychipsmin() {
  buychipsmin_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBuyChipsInRequest::buychipsmin() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInRequest.buyChipsMin)
  return buychipsmin_;
}
inline void GameBuyChipsInRequest::set_buychipsmin(::google::protobuf::int64 value) {
  
  buychipsmin_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInRequest.buyChipsMin)
}

// -------------------------------------------------------------------

// GameBuyChipsInResponse

// int64 buyChipsReal = 1;
inline void GameBuyChipsInResponse::clear_buychipsreal() {
  buychipsreal_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBuyChipsInResponse::buychipsreal() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInResponse.buyChipsReal)
  return buychipsreal_;
}
inline void GameBuyChipsInResponse::set_buychipsreal(::google::protobuf::int64 value) {
  
  buychipsreal_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInResponse.buyChipsReal)
}

// int64 chipsLeft = 2;
inline void GameBuyChipsInResponse::clear_chipsleft() {
  chipsleft_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameBuyChipsInResponse::chipsleft() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameBuyChipsInResponse.chipsLeft)
  return chipsleft_;
}
inline void GameBuyChipsInResponse::set_chipsleft(::google::protobuf::int64 value) {
  
  chipsleft_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameBuyChipsInResponse.chipsLeft)
}

// -------------------------------------------------------------------

// GameStartBetRequest

// int32 userId = 1;
inline void GameStartBetRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GameStartBetRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameStartBetRequest.userId)
  return userid_;
}
inline void GameStartBetRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameStartBetRequest.userId)
}

// int32 roomId = 2;
inline void GameStartBetRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameStartBetRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameStartBetRequest.roomId)
  return roomid_;
}
inline void GameStartBetRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameStartBetRequest.roomId)
}

// int64 betChips = 3;
inline void GameStartBetRequest::clear_betchips() {
  betchips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameStartBetRequest::betchips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameStartBetRequest.betChips)
  return betchips_;
}
inline void GameStartBetRequest::set_betchips(::google::protobuf::int64 value) {
  
  betchips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameStartBetRequest.betChips)
}

// bytes gameId = 4;
inline void GameStartBetRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameStartBetRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameStartBetRequest.gameId)
  return gameid_.GetNoArena();
}
inline void GameStartBetRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameStartBetRequest.gameId)
}
#if LANG_CXX11
inline void GameStartBetRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameStartBetRequest.gameId)
}
#endif
inline void GameStartBetRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameStartBetRequest.gameId)
}
inline void GameStartBetRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameStartBetRequest.gameId)
}
inline ::std::string* GameStartBetRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameStartBetRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartBetRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameStartBetRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartBetRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameStartBetRequest.gameId)
}

// -------------------------------------------------------------------

// GameStartBetResponse

// -------------------------------------------------------------------

// GameAddCarryRequest

// int32 userId = 1;
inline void GameAddCarryRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GameAddCarryRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameAddCarryRequest.userId)
  return userid_;
}
inline void GameAddCarryRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameAddCarryRequest.userId)
}

// int32 roomId = 2;
inline void GameAddCarryRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameAddCarryRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameAddCarryRequest.roomId)
  return roomid_;
}
inline void GameAddCarryRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameAddCarryRequest.roomId)
}

// int64 curCarryChips = 3;
inline void GameAddCarryRequest::clear_curcarrychips() {
  curcarrychips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameAddCarryRequest::curcarrychips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameAddCarryRequest.curCarryChips)
  return curcarrychips_;
}
inline void GameAddCarryRequest::set_curcarrychips(::google::protobuf::int64 value) {
  
  curcarrychips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameAddCarryRequest.curCarryChips)
}

// int64 needAddToCarry = 4;
inline void GameAddCarryRequest::clear_needaddtocarry() {
  needaddtocarry_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameAddCarryRequest::needaddtocarry() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameAddCarryRequest.needAddToCarry)
  return needaddtocarry_;
}
inline void GameAddCarryRequest::set_needaddtocarry(::google::protobuf::int64 value) {
  
  needaddtocarry_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameAddCarryRequest.needAddToCarry)
}

// -------------------------------------------------------------------

// GameAddCarryResponse

// -------------------------------------------------------------------

// MatchOverAccountRequest

// int32 userId = 1;
inline void MatchOverAccountRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 MatchOverAccountRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.MatchOverAccountRequest.userId)
  return userid_;
}
inline void MatchOverAccountRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.MatchOverAccountRequest.userId)
}

// int32 roomId = 2;
inline void MatchOverAccountRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 MatchOverAccountRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.MatchOverAccountRequest.roomId)
  return roomid_;
}
inline void MatchOverAccountRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.MatchOverAccountRequest.roomId)
}

// int64 curCarryChips = 3;
inline void MatchOverAccountRequest::clear_curcarrychips() {
  curcarrychips_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchOverAccountRequest::curcarrychips() const {
  // @@protoc_insertion_point(field_get:SvrMsg.MatchOverAccountRequest.curCarryChips)
  return curcarrychips_;
}
inline void MatchOverAccountRequest::set_curcarrychips(::google::protobuf::int64 value) {
  
  curcarrychips_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.MatchOverAccountRequest.curCarryChips)
}

// int64 needAddToActive = 4;
inline void MatchOverAccountRequest::clear_needaddtoactive() {
  needaddtoactive_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchOverAccountRequest::needaddtoactive() const {
  // @@protoc_insertion_point(field_get:SvrMsg.MatchOverAccountRequest.needAddToActive)
  return needaddtoactive_;
}
inline void MatchOverAccountRequest::set_needaddtoactive(::google::protobuf::int64 value) {
  
  needaddtoactive_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.MatchOverAccountRequest.needAddToActive)
}

// bytes gameId = 5;
inline void MatchOverAccountRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchOverAccountRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.MatchOverAccountRequest.gameId)
  return gameid_.GetNoArena();
}
inline void MatchOverAccountRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.MatchOverAccountRequest.gameId)
}
#if LANG_CXX11
inline void MatchOverAccountRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.MatchOverAccountRequest.gameId)
}
#endif
inline void MatchOverAccountRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.MatchOverAccountRequest.gameId)
}
inline void MatchOverAccountRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.MatchOverAccountRequest.gameId)
}
inline ::std::string* MatchOverAccountRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.MatchOverAccountRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchOverAccountRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.MatchOverAccountRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchOverAccountRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.MatchOverAccountRequest.gameId)
}

// -------------------------------------------------------------------

// MatchOverAccountResponse

// -------------------------------------------------------------------

// UserGameAccount

// int32 userId = 1;
inline void UserGameAccount::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserGameAccount::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserGameAccount.userId)
  return userid_;
}
inline void UserGameAccount::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserGameAccount.userId)
}

// int64 currentCarry = 2;
inline void UserGameAccount::clear_currentcarry() {
  currentcarry_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserGameAccount::currentcarry() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserGameAccount.currentCarry)
  return currentcarry_;
}
inline void UserGameAccount::set_currentcarry(::google::protobuf::int64 value) {
  
  currentcarry_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserGameAccount.currentCarry)
}

// -------------------------------------------------------------------

// GameOverAccountRequest

// int32 roomId = 1;
inline void GameOverAccountRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameOverAccountRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameOverAccountRequest.roomId)
  return roomid_;
}
inline void GameOverAccountRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameOverAccountRequest.roomId)
}

// bytes gameId = 2;
inline void GameOverAccountRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameOverAccountRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameOverAccountRequest.gameId)
  return gameid_.GetNoArena();
}
inline void GameOverAccountRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameOverAccountRequest.gameId)
}
#if LANG_CXX11
inline void GameOverAccountRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameOverAccountRequest.gameId)
}
#endif
inline void GameOverAccountRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameOverAccountRequest.gameId)
}
inline void GameOverAccountRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameOverAccountRequest.gameId)
}
inline ::std::string* GameOverAccountRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameOverAccountRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameOverAccountRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameOverAccountRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameOverAccountRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameOverAccountRequest.gameId)
}

// repeated .SvrMsg.UserGameAccount userGameResult = 3;
inline int GameOverAccountRequest::usergameresult_size() const {
  return usergameresult_.size();
}
inline void GameOverAccountRequest::clear_usergameresult() {
  usergameresult_.Clear();
}
inline ::SvrMsg::UserGameAccount* GameOverAccountRequest::mutable_usergameresult(int index) {
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameOverAccountRequest.userGameResult)
  return usergameresult_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameAccount >*
GameOverAccountRequest::mutable_usergameresult() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.GameOverAccountRequest.userGameResult)
  return &usergameresult_;
}
inline const ::SvrMsg::UserGameAccount& GameOverAccountRequest::usergameresult(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameOverAccountRequest.userGameResult)
  return usergameresult_.Get(index);
}
inline ::SvrMsg::UserGameAccount* GameOverAccountRequest::add_usergameresult() {
  // @@protoc_insertion_point(field_add:SvrMsg.GameOverAccountRequest.userGameResult)
  return usergameresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SvrMsg::UserGameAccount >&
GameOverAccountRequest::usergameresult() const {
  // @@protoc_insertion_point(field_list:SvrMsg.GameOverAccountRequest.userGameResult)
  return usergameresult_;
}

// -------------------------------------------------------------------

// GameOverAccountResponse

// -------------------------------------------------------------------

// GameLeaveAccountRequest

// int32 userId = 1;
inline void GameLeaveAccountRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 GameLeaveAccountRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLeaveAccountRequest.userId)
  return userid_;
}
inline void GameLeaveAccountRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLeaveAccountRequest.userId)
}

// int32 roomId = 2;
inline void GameLeaveAccountRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameLeaveAccountRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLeaveAccountRequest.roomId)
  return roomid_;
}
inline void GameLeaveAccountRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLeaveAccountRequest.roomId)
}

// int64 currentCarry = 3;
inline void GameLeaveAccountRequest::clear_currentcarry() {
  currentcarry_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLeaveAccountRequest::currentcarry() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLeaveAccountRequest.currentCarry)
  return currentcarry_;
}
inline void GameLeaveAccountRequest::set_currentcarry(::google::protobuf::int64 value) {
  
  currentcarry_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLeaveAccountRequest.currentCarry)
}

// bytes gameId = 4;
inline void GameLeaveAccountRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLeaveAccountRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLeaveAccountRequest.gameId)
  return gameid_.GetNoArena();
}
inline void GameLeaveAccountRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLeaveAccountRequest.gameId)
}
#if LANG_CXX11
inline void GameLeaveAccountRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameLeaveAccountRequest.gameId)
}
#endif
inline void GameLeaveAccountRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameLeaveAccountRequest.gameId)
}
inline void GameLeaveAccountRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameLeaveAccountRequest.gameId)
}
inline ::std::string* GameLeaveAccountRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameLeaveAccountRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLeaveAccountRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameLeaveAccountRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLeaveAccountRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameLeaveAccountRequest.gameId)
}

// int64 smallBlind = 5;
inline void GameLeaveAccountRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLeaveAccountRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLeaveAccountRequest.smallBlind)
  return smallblind_;
}
inline void GameLeaveAccountRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLeaveAccountRequest.smallBlind)
}

// -------------------------------------------------------------------

// GameLeaveAccountResponse

// -------------------------------------------------------------------

// UserBoxTimeRecoverRequest

// int32 userId = 1;
inline void UserBoxTimeRecoverRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserBoxTimeRecoverRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserBoxTimeRecoverRequest.userId)
  return userid_;
}
inline void UserBoxTimeRecoverRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserBoxTimeRecoverRequest.userId)
}

// -------------------------------------------------------------------

// UserBoxTimeRecoverResponse

// -------------------------------------------------------------------

// UserBoxTimePauseRequest

// int32 userId = 1;
inline void UserBoxTimePauseRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserBoxTimePauseRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserBoxTimePauseRequest.userId)
  return userid_;
}
inline void UserBoxTimePauseRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserBoxTimePauseRequest.userId)
}

// -------------------------------------------------------------------

// UserBoxTimePauseResponse

// -------------------------------------------------------------------

// NotifyTokenLoginRequest

// int32 userId = 1;
inline void NotifyTokenLoginRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 NotifyTokenLoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.NotifyTokenLoginRequest.userId)
  return userid_;
}
inline void NotifyTokenLoginRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.NotifyTokenLoginRequest.userId)
}

// -------------------------------------------------------------------

// NotifyTokenLoginResponse

// -------------------------------------------------------------------

// NotifyOpenRequest

// -------------------------------------------------------------------

// NotifyOpenResponse

// -------------------------------------------------------------------

// UserLogRecordRequest

// int32 userId = 1;
inline void UserLogRecordRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserLogRecordRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLogRecordRequest.userId)
  return userid_;
}
inline void UserLogRecordRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLogRecordRequest.userId)
}

// int64 logTime = 2;
inline void UserLogRecordRequest::clear_logtime() {
  logtime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserLogRecordRequest::logtime() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLogRecordRequest.logTime)
  return logtime_;
}
inline void UserLogRecordRequest::set_logtime(::google::protobuf::int64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserLogRecordRequest.logTime)
}

// bytes action = 3;
inline void UserLogRecordRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLogRecordRequest::action() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLogRecordRequest.action)
  return action_.GetNoArena();
}
inline void UserLogRecordRequest::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.UserLogRecordRequest.action)
}
#if LANG_CXX11
inline void UserLogRecordRequest::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.UserLogRecordRequest.action)
}
#endif
inline void UserLogRecordRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.UserLogRecordRequest.action)
}
inline void UserLogRecordRequest::set_action(const void* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.UserLogRecordRequest.action)
}
inline ::std::string* UserLogRecordRequest::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.UserLogRecordRequest.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLogRecordRequest::release_action() {
  // @@protoc_insertion_point(field_release:SvrMsg.UserLogRecordRequest.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogRecordRequest::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.UserLogRecordRequest.action)
}

// bytes logInfo = 4;
inline void UserLogRecordRequest::clear_loginfo() {
  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLogRecordRequest::loginfo() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserLogRecordRequest.logInfo)
  return loginfo_.GetNoArena();
}
inline void UserLogRecordRequest::set_loginfo(const ::std::string& value) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.UserLogRecordRequest.logInfo)
}
#if LANG_CXX11
inline void UserLogRecordRequest::set_loginfo(::std::string&& value) {
  
  loginfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.UserLogRecordRequest.logInfo)
}
#endif
inline void UserLogRecordRequest::set_loginfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.UserLogRecordRequest.logInfo)
}
inline void UserLogRecordRequest::set_loginfo(const void* value, size_t size) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.UserLogRecordRequest.logInfo)
}
inline ::std::string* UserLogRecordRequest::mutable_loginfo() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.UserLogRecordRequest.logInfo)
  return loginfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLogRecordRequest::release_loginfo() {
  // @@protoc_insertion_point(field_release:SvrMsg.UserLogRecordRequest.logInfo)
  
  return loginfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogRecordRequest::set_allocated_loginfo(::std::string* loginfo) {
  if (loginfo != NULL) {
    
  } else {
    
  }
  loginfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginfo);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.UserLogRecordRequest.logInfo)
}

// -------------------------------------------------------------------

// UserLogRecordResponse

// -------------------------------------------------------------------

// GameLogRequest

// int32 roomId = 1;
inline void GameLogRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameLogRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.roomId)
  return roomid_;
}
inline void GameLogRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.roomId)
}

// int64 smallBlind = 2;
inline void GameLogRequest::clear_smallblind() {
  smallblind_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLogRequest::smallblind() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.smallBlind)
  return smallblind_;
}
inline void GameLogRequest::set_smallblind(::google::protobuf::int64 value) {
  
  smallblind_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.smallBlind)
}

// int64 logTime = 3;
inline void GameLogRequest::clear_logtime() {
  logtime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLogRequest::logtime() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.logTime)
  return logtime_;
}
inline void GameLogRequest::set_logtime(::google::protobuf::int64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.logTime)
}

// int64 tipsTotal = 4;
inline void GameLogRequest::clear_tipstotal() {
  tipstotal_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLogRequest::tipstotal() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.tipsTotal)
  return tipstotal_;
}
inline void GameLogRequest::set_tipstotal(::google::protobuf::int64 value) {
  
  tipstotal_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.tipsTotal)
}

// bytes gameId = 5;
inline void GameLogRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLogRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.gameId)
  return gameid_.GetNoArena();
}
inline void GameLogRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.gameId)
}
#if LANG_CXX11
inline void GameLogRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameLogRequest.gameId)
}
#endif
inline void GameLogRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameLogRequest.gameId)
}
inline void GameLogRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameLogRequest.gameId)
}
inline ::std::string* GameLogRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameLogRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLogRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameLogRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLogRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameLogRequest.gameId)
}

// bytes logInfo = 6;
inline void GameLogRequest::clear_loginfo() {
  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLogRequest::loginfo() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.logInfo)
  return loginfo_.GetNoArena();
}
inline void GameLogRequest::set_loginfo(const ::std::string& value) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.logInfo)
}
#if LANG_CXX11
inline void GameLogRequest::set_loginfo(::std::string&& value) {
  
  loginfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameLogRequest.logInfo)
}
#endif
inline void GameLogRequest::set_loginfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameLogRequest.logInfo)
}
inline void GameLogRequest::set_loginfo(const void* value, size_t size) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameLogRequest.logInfo)
}
inline ::std::string* GameLogRequest::mutable_loginfo() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameLogRequest.logInfo)
  return loginfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLogRequest::release_loginfo() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameLogRequest.logInfo)
  
  return loginfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLogRequest::set_allocated_loginfo(::std::string* loginfo) {
  if (loginfo != NULL) {
    
  } else {
    
  }
  loginfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginfo);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameLogRequest.logInfo)
}

// repeated int32 playerId = 7;
inline int GameLogRequest::playerid_size() const {
  return playerid_.size();
}
inline void GameLogRequest::clear_playerid() {
  playerid_.Clear();
}
inline ::google::protobuf::int32 GameLogRequest::playerid(int index) const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.playerId)
  return playerid_.Get(index);
}
inline void GameLogRequest::set_playerid(int index, ::google::protobuf::int32 value) {
  playerid_.Set(index, value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.playerId)
}
inline void GameLogRequest::add_playerid(::google::protobuf::int32 value) {
  playerid_.Add(value);
  // @@protoc_insertion_point(field_add:SvrMsg.GameLogRequest.playerId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameLogRequest::playerid() const {
  // @@protoc_insertion_point(field_list:SvrMsg.GameLogRequest.playerId)
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameLogRequest::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable_list:SvrMsg.GameLogRequest.playerId)
  return &playerid_;
}

// int64 chipsPool = 8;
inline void GameLogRequest::clear_chipspool() {
  chipspool_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameLogRequest::chipspool() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.chipsPool)
  return chipspool_;
}
inline void GameLogRequest::set_chipspool(::google::protobuf::int64 value) {
  
  chipspool_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.chipsPool)
}

// bytes roomType = 9;
inline void GameLogRequest::clear_roomtype() {
  roomtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLogRequest::roomtype() const {
  // @@protoc_insertion_point(field_get:SvrMsg.GameLogRequest.roomType)
  return roomtype_.GetNoArena();
}
inline void GameLogRequest::set_roomtype(const ::std::string& value) {
  
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.GameLogRequest.roomType)
}
#if LANG_CXX11
inline void GameLogRequest::set_roomtype(::std::string&& value) {
  
  roomtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.GameLogRequest.roomType)
}
#endif
inline void GameLogRequest::set_roomtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.GameLogRequest.roomType)
}
inline void GameLogRequest::set_roomtype(const void* value, size_t size) {
  
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.GameLogRequest.roomType)
}
inline ::std::string* GameLogRequest::mutable_roomtype() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.GameLogRequest.roomType)
  return roomtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLogRequest::release_roomtype() {
  // @@protoc_insertion_point(field_release:SvrMsg.GameLogRequest.roomType)
  
  return roomtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLogRequest::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype != NULL) {
    
  } else {
    
  }
  roomtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomtype);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.GameLogRequest.roomType)
}

// -------------------------------------------------------------------

// GameLogResponse

// -------------------------------------------------------------------

// AppLogRecordRequest

// int32 userId = 1;
inline void AppLogRecordRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 AppLogRecordRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AppLogRecordRequest.userId)
  return userid_;
}
inline void AppLogRecordRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.AppLogRecordRequest.userId)
}

// bytes logInfo = 2;
inline void AppLogRecordRequest::clear_loginfo() {
  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppLogRecordRequest::loginfo() const {
  // @@protoc_insertion_point(field_get:SvrMsg.AppLogRecordRequest.logInfo)
  return loginfo_.GetNoArena();
}
inline void AppLogRecordRequest::set_loginfo(const ::std::string& value) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.AppLogRecordRequest.logInfo)
}
#if LANG_CXX11
inline void AppLogRecordRequest::set_loginfo(::std::string&& value) {
  
  loginfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.AppLogRecordRequest.logInfo)
}
#endif
inline void AppLogRecordRequest::set_loginfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.AppLogRecordRequest.logInfo)
}
inline void AppLogRecordRequest::set_loginfo(const void* value, size_t size) {
  
  loginfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.AppLogRecordRequest.logInfo)
}
inline ::std::string* AppLogRecordRequest::mutable_loginfo() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.AppLogRecordRequest.logInfo)
  return loginfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppLogRecordRequest::release_loginfo() {
  // @@protoc_insertion_point(field_release:SvrMsg.AppLogRecordRequest.logInfo)
  
  return loginfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppLogRecordRequest::set_allocated_loginfo(::std::string* loginfo) {
  if (loginfo != NULL) {
    
  } else {
    
  }
  loginfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginfo);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.AppLogRecordRequest.logInfo)
}

// -------------------------------------------------------------------

// AppLogRecordResponse

// -------------------------------------------------------------------

// UserChipsLogRequest

// int32 userId = 1;
inline void UserChipsLogRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 UserChipsLogRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.userId)
  return userid_;
}
inline void UserChipsLogRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.userId)
}

// int64 logTime = 2;
inline void UserChipsLogRequest::clear_logtime() {
  logtime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserChipsLogRequest::logtime() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.logTime)
  return logtime_;
}
inline void UserChipsLogRequest::set_logtime(::google::protobuf::int64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.logTime)
}

// int64 oldTotal = 3;
inline void UserChipsLogRequest::clear_oldtotal() {
  oldtotal_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserChipsLogRequest::oldtotal() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.oldTotal)
  return oldtotal_;
}
inline void UserChipsLogRequest::set_oldtotal(::google::protobuf::int64 value) {
  
  oldtotal_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.oldTotal)
}

// int64 newTotal = 4;
inline void UserChipsLogRequest::clear_newtotal() {
  newtotal_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserChipsLogRequest::newtotal() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.newTotal)
  return newtotal_;
}
inline void UserChipsLogRequest::set_newtotal(::google::protobuf::int64 value) {
  
  newtotal_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.newTotal)
}

// int32 changeReaseon = 5;
inline void UserChipsLogRequest::clear_changereaseon() {
  changereaseon_ = 0;
}
inline ::google::protobuf::int32 UserChipsLogRequest::changereaseon() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.changeReaseon)
  return changereaseon_;
}
inline void UserChipsLogRequest::set_changereaseon(::google::protobuf::int32 value) {
  
  changereaseon_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.changeReaseon)
}

// int32 userType = 6;
inline void UserChipsLogRequest::clear_usertype() {
  usertype_ = 0;
}
inline ::google::protobuf::int32 UserChipsLogRequest::usertype() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.userType)
  return usertype_;
}
inline void UserChipsLogRequest::set_usertype(::google::protobuf::int32 value) {
  
  usertype_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.userType)
}

// int32 roomId = 7;
inline void UserChipsLogRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 UserChipsLogRequest::roomid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.roomId)
  return roomid_;
}
inline void UserChipsLogRequest::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.roomId)
}

// int64 carry = 8;
inline void UserChipsLogRequest::clear_carry() {
  carry_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserChipsLogRequest::carry() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.carry)
  return carry_;
}
inline void UserChipsLogRequest::set_carry(::google::protobuf::int64 value) {
  
  carry_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.carry)
}

// bytes gameId = 9;
inline void UserChipsLogRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserChipsLogRequest::gameid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.UserChipsLogRequest.gameId)
  return gameid_.GetNoArena();
}
inline void UserChipsLogRequest::set_gameid(const ::std::string& value) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrMsg.UserChipsLogRequest.gameId)
}
#if LANG_CXX11
inline void UserChipsLogRequest::set_gameid(::std::string&& value) {
  
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrMsg.UserChipsLogRequest.gameId)
}
#endif
inline void UserChipsLogRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrMsg.UserChipsLogRequest.gameId)
}
inline void UserChipsLogRequest::set_gameid(const void* value, size_t size) {
  
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrMsg.UserChipsLogRequest.gameId)
}
inline ::std::string* UserChipsLogRequest::mutable_gameid() {
  
  // @@protoc_insertion_point(field_mutable:SvrMsg.UserChipsLogRequest.gameId)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserChipsLogRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:SvrMsg.UserChipsLogRequest.gameId)
  
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserChipsLogRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    
  } else {
    
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:SvrMsg.UserChipsLogRequest.gameId)
}

// -------------------------------------------------------------------

// UserChipsLogResponse

// -------------------------------------------------------------------

// BankruptLogRequest

// int32 userId = 1;
inline void BankruptLogRequest::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 BankruptLogRequest::userid() const {
  // @@protoc_insertion_point(field_get:SvrMsg.BankruptLogRequest.userId)
  return userid_;
}
inline void BankruptLogRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.BankruptLogRequest.userId)
}

// int64 logTime = 2;
inline void BankruptLogRequest::clear_logtime() {
  logtime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 BankruptLogRequest::logtime() const {
  // @@protoc_insertion_point(field_get:SvrMsg.BankruptLogRequest.logTime)
  return logtime_;
}
inline void BankruptLogRequest::set_logtime(::google::protobuf::int64 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.BankruptLogRequest.logTime)
}

// -------------------------------------------------------------------

// BankruptLogResponse

// -------------------------------------------------------------------

// QueryRoomMatchRequest

// -------------------------------------------------------------------

// QueryRoomMatchResponse

// bool isAvailable = 1;
inline void QueryRoomMatchResponse::clear_isavailable() {
  isavailable_ = false;
}
inline bool QueryRoomMatchResponse::isavailable() const {
  // @@protoc_insertion_point(field_get:SvrMsg.QueryRoomMatchResponse.isAvailable)
  return isavailable_;
}
inline void QueryRoomMatchResponse::set_isavailable(bool value) {
  
  isavailable_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.QueryRoomMatchResponse.isAvailable)
}

// -------------------------------------------------------------------

// RoomMatchStatusRequest

// bool isAvailable = 1;
inline void RoomMatchStatusRequest::clear_isavailable() {
  isavailable_ = false;
}
inline bool RoomMatchStatusRequest::isavailable() const {
  // @@protoc_insertion_point(field_get:SvrMsg.RoomMatchStatusRequest.isAvailable)
  return isavailable_;
}
inline void RoomMatchStatusRequest::set_isavailable(bool value) {
  
  isavailable_ = value;
  // @@protoc_insertion_point(field_set:SvrMsg.RoomMatchStatusRequest.isAvailable)
}

// -------------------------------------------------------------------

// RoomMatchStatusResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SvrMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SvrMsg::PlayerGameResult_EnumResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SvrMsg::PlayerGameResult_EnumResult>() {
  return ::SvrMsg::PlayerGameResult_EnumResult_descriptor();
}
template <> struct is_proto_enum< ::SvrMsg::FlushUserInGameRequest_EnumGameStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SvrMsg::FlushUserInGameRequest_EnumGameStatus>() {
  return ::SvrMsg::FlushUserInGameRequest_EnumGameStatus_descriptor();
}
template <> struct is_proto_enum< ::SvrMsg::EnumLoginAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SvrMsg::EnumLoginAction>() {
  return ::SvrMsg::EnumLoginAction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SvrMsg_2eproto
