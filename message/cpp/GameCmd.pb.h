// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameCmd.proto

#ifndef PROTOBUF_INCLUDED_GameCmd_2eproto
#define PROTOBUF_INCLUDED_GameCmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameCmd_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GameCmd_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GameCmd_2eproto();
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
namespace GameCmd {

enum EnumGameCmd {
  CMD_BEGIN = 0,
  CMD_APPLY_ENTER_ROOM = 1000,
  CMD_APPLY_QUIT_ROOM = 1001,
  CMD_FLUSH_ROOM = 1002,
  CMD_APPLY_SEAT = 1003,
  CMD_PLAYER_SITDOWN = 1004,
  CMD_APPLY_STANDUP = 1005,
  CMD_PLAYER_STANDUP = 1006,
  CMD_APPLY_FLUSHROOM = 1007,
  CMD_PLAYER_BUYIN = 1008,
  CMD_DEAL_CARDS = 1010,
  CMD_APPLY_FACESHOW = 1011,
  CMD_PLAYER_FACESHOW = 1012,
  CMD_APPLY_CHAT = 1013,
  CMD_PLAYER_CHAT = 1014,
  CMD_APPLY_USE_PROPS = 1015,
  CMD_PLAYER_USE_PROPS = 1016,
  CMD_APPLY_PRESENT_CHIPS = 1017,
  CMD_PLAYER_PRESENT_CHIPS = 1018,
  CMD_APPLY_PRESENT_GIFT = 1019,
  CMD_PLAYER_PRESENT_GIFT = 1020,
  CMD_PLAYER_ENTER_ROOM = 1021,
  CMD_PLAYER_QUIT_ROOM = 1022,
  CMD_APPLY_TRANSMIT_MESSAGE = 1023,
  CMD_PLAYER_TRANSMIT_MESSAGE = 1024,
  CMD_APPLY_PRESENT_GIFT_NEWINTER = 1026,
  CMD_PLAYER_PRESENT_GIFT_NEWINTER = 1027,
  CMD_PLAYER_TRUSTEE_ON = 1028,
  CMD_APPLY_TRUSTEE_OFF = 1029,
  CMD_PLAYER_TRUSTEE_OFF = 1030,
  CMD_ACTIVE_PLAYER = 1031,
  CMD_APPLY_DIG_CARD = 1032,
  CMD_PLAYER_DIG_CARD = 1033,
  CMD_APPLY_DROP = 1034,
  CMD_PLAYER_DROP = 1035,
  CMD_APPLY_POST_CARD = 1036,
  CMD_PLAYER_POST_CARD = 1037,
  CMD_APPLY_DECLARE = 1038,
  CMD_PLAYER_DECLARE = 1039,
  CMD_APPLY_LOSE_DECLARE = 1040,
  CMD_PLAYER_LOSE_DECLARE = 1041,
  CMD_GAME_OVER = 1042,
  CMD_APPLY_ROOM_STATUS = 1043,
  CMD_NOTIFY_WAIT_GAME = 1044,
  CMD_SHUFFLE_CARD = 1045,
  CMD_APPLY_CLOSE_ACCOUNT_BOX = 1046,
  CMD_PLAYER_CLOSE_ACCOUNT_BOX = 1047
};
bool EnumGameCmd_IsValid(int value);
const EnumGameCmd EnumGameCmd_MIN = CMD_BEGIN;
const EnumGameCmd EnumGameCmd_MAX = CMD_PLAYER_CLOSE_ACCOUNT_BOX;
const int EnumGameCmd_ARRAYSIZE = EnumGameCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumGameCmd_descriptor();
inline const ::std::string& EnumGameCmd_Name(EnumGameCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumGameCmd_descriptor(), value);
}
inline bool EnumGameCmd_Parse(
    const ::std::string& name, EnumGameCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumGameCmd>(
    EnumGameCmd_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameCmd

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameCmd::EnumGameCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameCmd::EnumGameCmd>() {
  return ::GameCmd::EnumGameCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GameCmd_2eproto
