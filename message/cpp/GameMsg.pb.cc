// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMsg.proto

#include "GameMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MsgCard_GameMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PB_IngamePlayer_GameMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChips_GameMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LoserInfo_GameMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PB_CardGroup_GameMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameMsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfo_GameMsg_2eproto;
namespace GameMsg {
class EmptyGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmptyGameRequest> _instance;
} _EmptyGameRequest_default_instance_;
class NormalGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalGameResponse> _instance;
} _NormalGameResponse_default_instance_;
class MsgCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgCard> _instance;
} _MsgCard_default_instance_;
class PB_CardGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_CardGroup> _instance;
} _PB_CardGroup_default_instance_;
class ApplyFlushRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyFlushRoomRequest> _instance;
} _ApplyFlushRoomRequest_default_instance_;
class ApplyFlushRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyFlushRoomResponse> _instance;
} _ApplyFlushRoomResponse_default_instance_;
class ApplyEnterRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyEnterRoomRequest> _instance;
} _ApplyEnterRoomRequest_default_instance_;
class ApplyEnterRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyEnterRoomResponse> _instance;
} _ApplyEnterRoomResponse_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class PB_IngamePlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PB_IngamePlayer> _instance;
} _PB_IngamePlayer_default_instance_;
class FlushRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushRoomRequest> _instance;
} _FlushRoomRequest_default_instance_;
class FlushRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushRoomResponse> _instance;
} _FlushRoomResponse_default_instance_;
class ApplySeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplySeatRequest> _instance;
} _ApplySeatRequest_default_instance_;
class ApplySeatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplySeatResponse> _instance;
} _ApplySeatResponse_default_instance_;
class PlayerSitDownRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerSitDownRequest> _instance;
} _PlayerSitDownRequest_default_instance_;
class PlayerSitDownResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerSitDownResponse> _instance;
} _PlayerSitDownResponse_default_instance_;
class ApplyStandupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyStandupRequest> _instance;
} _ApplyStandupRequest_default_instance_;
class ApplyStandupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyStandupResponse> _instance;
} _ApplyStandupResponse_default_instance_;
class PlayerStandUpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStandUpRequest> _instance;
} _PlayerStandUpRequest_default_instance_;
class PlayerStandUpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStandUpResponse> _instance;
} _PlayerStandUpResponse_default_instance_;
class ApplyQuitRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyQuitRoomRequest> _instance;
} _ApplyQuitRoomRequest_default_instance_;
class ApplyQuitRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyQuitRoomResponse> _instance;
} _ApplyQuitRoomResponse_default_instance_;
class PlayerQuitRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitRoomRequest> _instance;
} _PlayerQuitRoomRequest_default_instance_;
class PlayerQuitRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitRoomResponse> _instance;
} _PlayerQuitRoomResponse_default_instance_;
class PlayerChipsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChips> _instance;
} _PlayerChips_default_instance_;
class PlayerBuyinRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerBuyinRequest> _instance;
} _PlayerBuyinRequest_default_instance_;
class PlayerBuyinResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerBuyinResponse> _instance;
} _PlayerBuyinResponse_default_instance_;
class ApplyFaceShowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyFaceShowRequest> _instance;
} _ApplyFaceShowRequest_default_instance_;
class ApplyFaceShowResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyFaceShowResponse> _instance;
} _ApplyFaceShowResponse_default_instance_;
class PlayerFaceShowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerFaceShowRequest> _instance;
} _PlayerFaceShowRequest_default_instance_;
class PlayerFaceShowResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerFaceShowResponse> _instance;
} _PlayerFaceShowResponse_default_instance_;
class ApplyChatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyChatRequest> _instance;
} _ApplyChatRequest_default_instance_;
class ApplyChatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyChatResponse> _instance;
} _ApplyChatResponse_default_instance_;
class PlayerChatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChatRequest> _instance;
} _PlayerChatRequest_default_instance_;
class PlayerChatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChatResponse> _instance;
} _PlayerChatResponse_default_instance_;
class ApplyUsePropsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyUsePropsRequest> _instance;
} _ApplyUsePropsRequest_default_instance_;
class ApplyUsePropsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyUsePropsResponse> _instance;
} _ApplyUsePropsResponse_default_instance_;
class PlayerUsePropsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUsePropsRequest> _instance;
} _PlayerUsePropsRequest_default_instance_;
class PlayerUsePropsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUsePropsResponse> _instance;
} _PlayerUsePropsResponse_default_instance_;
class ApplyPresentGiftRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentGiftRequest> _instance;
} _ApplyPresentGiftRequest_default_instance_;
class ApplyPresentGiftResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentGiftResponse> _instance;
} _ApplyPresentGiftResponse_default_instance_;
class PlayerPresentGiftRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentGiftRequest> _instance;
} _PlayerPresentGiftRequest_default_instance_;
class PlayerPresentGiftResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentGiftResponse> _instance;
} _PlayerPresentGiftResponse_default_instance_;
class ApplyPresentGiftNewInterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentGiftNewInterRequest> _instance;
} _ApplyPresentGiftNewInterRequest_default_instance_;
class ApplyPresentGiftNewInterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentGiftNewInterResponse> _instance;
} _ApplyPresentGiftNewInterResponse_default_instance_;
class ApplyPresentChipsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentChipsRequest> _instance;
} _ApplyPresentChipsRequest_default_instance_;
class ApplyPresentChipsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPresentChipsResponse> _instance;
} _ApplyPresentChipsResponse_default_instance_;
class PlayerPresentChipsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentChipsRequest> _instance;
} _PlayerPresentChipsRequest_default_instance_;
class PlayerPresentChipsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentChipsResponse> _instance;
} _PlayerPresentChipsResponse_default_instance_;
class PlayerPresentGiftNewInterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentGiftNewInterRequest> _instance;
} _PlayerPresentGiftNewInterRequest_default_instance_;
class PlayerPresentGiftNewInterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPresentGiftNewInterResponse> _instance;
} _PlayerPresentGiftNewInterResponse_default_instance_;
class PlayerEnterRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterRoomRequest> _instance;
} _PlayerEnterRoomRequest_default_instance_;
class PlayerEnterRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterRoomResponse> _instance;
} _PlayerEnterRoomResponse_default_instance_;
class ApplyTransmitMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTransmitMessageRequest> _instance;
} _ApplyTransmitMessageRequest_default_instance_;
class ApplyTransmitMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTransmitMessageResponse> _instance;
} _ApplyTransmitMessageResponse_default_instance_;
class PlayerTransmitMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTransmitMessageRequest> _instance;
} _PlayerTransmitMessageRequest_default_instance_;
class PlayerTransmitMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTransmitMessageResponse> _instance;
} _PlayerTransmitMessageResponse_default_instance_;
class ApplyTrusteeOnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTrusteeOnRequest> _instance;
} _ApplyTrusteeOnRequest_default_instance_;
class ApplyTrusteeOnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTrusteeOnResponse> _instance;
} _ApplyTrusteeOnResponse_default_instance_;
class PlayerTrusteeOnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTrusteeOnRequest> _instance;
} _PlayerTrusteeOnRequest_default_instance_;
class PlayerTrusteeOnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTrusteeOnResponse> _instance;
} _PlayerTrusteeOnResponse_default_instance_;
class ApplyTrusteeOffRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTrusteeOffRequest> _instance;
} _ApplyTrusteeOffRequest_default_instance_;
class ApplyTrusteeOffResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyTrusteeOffResponse> _instance;
} _ApplyTrusteeOffResponse_default_instance_;
class PlayerTrusteeOffRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTrusteeOffRequest> _instance;
} _PlayerTrusteeOffRequest_default_instance_;
class PlayerTrusteeOffResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerTrusteeOffResponse> _instance;
} _PlayerTrusteeOffResponse_default_instance_;
class ReadyStartGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadyStartGameRequest> _instance;
} _ReadyStartGameRequest_default_instance_;
class ReadyStartGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadyStartGameResponse> _instance;
} _ReadyStartGameResponse_default_instance_;
class DealCardsReqeustDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DealCardsReqeust> _instance;
} _DealCardsReqeust_default_instance_;
class DealCardsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DealCardsResponse> _instance;
} _DealCardsResponse_default_instance_;
class ActivePlayerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActivePlayerRequest> _instance;
} _ActivePlayerRequest_default_instance_;
class ActivePlayerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActivePlayerResponse> _instance;
} _ActivePlayerResponse_default_instance_;
class ApplyDigCardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDigCardRequest> _instance;
} _ApplyDigCardRequest_default_instance_;
class ApplyDigCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDigCardResponse> _instance;
} _ApplyDigCardResponse_default_instance_;
class PlayerDigCardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDigCardRequest> _instance;
} _PlayerDigCardRequest_default_instance_;
class PlayerDigCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDigCardResponse> _instance;
} _PlayerDigCardResponse_default_instance_;
class ApplyDropRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDropRequest> _instance;
} _ApplyDropRequest_default_instance_;
class ApplyDropResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDropResponse> _instance;
} _ApplyDropResponse_default_instance_;
class PlayerDropRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDropRequest> _instance;
} _PlayerDropRequest_default_instance_;
class PlayerDropResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDropResponse> _instance;
} _PlayerDropResponse_default_instance_;
class ApplyDeclareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDeclareRequest> _instance;
} _ApplyDeclareRequest_default_instance_;
class ApplyDeclareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyDeclareResponse> _instance;
} _ApplyDeclareResponse_default_instance_;
class PlayerDeclareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDeclareRequest> _instance;
} _PlayerDeclareRequest_default_instance_;
class PlayerDeclareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerDeclareResponse> _instance;
} _PlayerDeclareResponse_default_instance_;
class ApplyLoseDeclareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyLoseDeclareRequest> _instance;
} _ApplyLoseDeclareRequest_default_instance_;
class ApplyLoseDeclareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyLoseDeclareResponse> _instance;
} _ApplyLoseDeclareResponse_default_instance_;
class PlayerLoseDeclareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoseDeclareRequest> _instance;
} _PlayerLoseDeclareRequest_default_instance_;
class PlayerLoseDeclareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoseDeclareResponse> _instance;
} _PlayerLoseDeclareResponse_default_instance_;
class ApplyPostCardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPostCardRequest> _instance;
} _ApplyPostCardRequest_default_instance_;
class ApplyPostCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyPostCardResponse> _instance;
} _ApplyPostCardResponse_default_instance_;
class PlayerPostCardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPostCardRequest> _instance;
} _PlayerPostCardRequest_default_instance_;
class PlayerPostCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPostCardResponse> _instance;
} _PlayerPostCardResponse_default_instance_;
class LoserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoserInfo> _instance;
} _LoserInfo_default_instance_;
class GameOverRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameOverRequest> _instance;
} _GameOverRequest_default_instance_;
class GameOverResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameOverResponse> _instance;
} _GameOverResponse_default_instance_;
class ApplyRoomStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyRoomStatusRequest> _instance;
} _ApplyRoomStatusRequest_default_instance_;
class ApplyRoomStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyRoomStatusResponse> _instance;
} _ApplyRoomStatusResponse_default_instance_;
class NotifyWaitGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyWaitGameRequest> _instance;
} _NotifyWaitGameRequest_default_instance_;
class NotifyWaitGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyWaitGameResponse> _instance;
} _NotifyWaitGameResponse_default_instance_;
class ShuffleCardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShuffleCardRequest> _instance;
} _ShuffleCardRequest_default_instance_;
class ShuffleCardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShuffleCardResponse> _instance;
} _ShuffleCardResponse_default_instance_;
class ApplyCloseAccountBoxRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyCloseAccountBoxRequest> _instance;
} _ApplyCloseAccountBoxRequest_default_instance_;
class ApplyCloseAccountBoxResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplyCloseAccountBoxResponse> _instance;
} _ApplyCloseAccountBoxResponse_default_instance_;
class PlayerCloseAccountBoxRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCloseAccountBoxRequest> _instance;
} _PlayerCloseAccountBoxRequest_default_instance_;
class PlayerCloseAccountBoxResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCloseAccountBoxResponse> _instance;
} _PlayerCloseAccountBoxResponse_default_instance_;
}  // namespace GameMsg
static void InitDefaultsEmptyGameRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_EmptyGameRequest_default_instance_;
    new (ptr) ::GameMsg::EmptyGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::EmptyGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmptyGameRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmptyGameRequest_GameMsg_2eproto}, {}};

static void InitDefaultsNormalGameResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_NormalGameResponse_default_instance_;
    new (ptr) ::GameMsg::NormalGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::NormalGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NormalGameResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNormalGameResponse_GameMsg_2eproto}, {}};

static void InitDefaultsMsgCard_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_MsgCard_default_instance_;
    new (ptr) ::GameMsg::MsgCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::MsgCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsgCard_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsgCard_GameMsg_2eproto}, {}};

static void InitDefaultsPB_CardGroup_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PB_CardGroup_default_instance_;
    new (ptr) ::GameMsg::PB_CardGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PB_CardGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PB_CardGroup_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPB_CardGroup_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsApplyFlushRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyFlushRoomRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyFlushRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyFlushRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyFlushRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyFlushRoomRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyFlushRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyFlushRoomResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyFlushRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyFlushRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyFlushRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyFlushRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyEnterRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyEnterRoomRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyEnterRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyEnterRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyEnterRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyEnterRoomRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyEnterRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyEnterRoomResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyEnterRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyEnterRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyEnterRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyEnterRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerInfo_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerInfo_default_instance_;
    new (ptr) ::GameMsg::PlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfo_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerInfo_GameMsg_2eproto}, {
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsPB_IngamePlayer_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PB_IngamePlayer_default_instance_;
    new (ptr) ::GameMsg::PB_IngamePlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PB_IngamePlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PB_IngamePlayer_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPB_IngamePlayer_GameMsg_2eproto}, {}};

static void InitDefaultsFlushRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_FlushRoomRequest_default_instance_;
    new (ptr) ::GameMsg::FlushRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::FlushRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FlushRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFlushRoomRequest_GameMsg_2eproto}, {
      &scc_info_PlayerInfo_GameMsg_2eproto.base,
      &scc_info_MsgCard_GameMsg_2eproto.base,
      &scc_info_PB_IngamePlayer_GameMsg_2eproto.base,}};

static void InitDefaultsFlushRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_FlushRoomResponse_default_instance_;
    new (ptr) ::GameMsg::FlushRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::FlushRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplySeatRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplySeatRequest_default_instance_;
    new (ptr) ::GameMsg::ApplySeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplySeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplySeatRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplySeatRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplySeatResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplySeatResponse_default_instance_;
    new (ptr) ::GameMsg::ApplySeatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplySeatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplySeatResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplySeatResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerSitDownRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerSitDownRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerSitDownRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerSitDownRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSitDownRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerSitDownRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerSitDownResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerSitDownResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerSitDownResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerSitDownResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSitDownResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerSitDownResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyStandupRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyStandupRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyStandupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyStandupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyStandupRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyStandupRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyStandupResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyStandupResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyStandupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyStandupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyStandupResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyStandupResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerStandUpRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerStandUpRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerStandUpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerStandUpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerStandUpRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerStandUpRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerStandUpResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerStandUpResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerStandUpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerStandUpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerStandUpResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerStandUpResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyQuitRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyQuitRoomRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyQuitRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyQuitRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyQuitRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyQuitRoomRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyQuitRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyQuitRoomResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyQuitRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyQuitRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyQuitRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyQuitRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerQuitRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerQuitRoomRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerQuitRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerQuitRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerQuitRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerQuitRoomRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerQuitRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerQuitRoomResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerQuitRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerQuitRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerQuitRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerQuitRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerChips_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerChips_default_instance_;
    new (ptr) ::GameMsg::PlayerChips();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerChips::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChips_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChips_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerBuyinRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerBuyinRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerBuyinRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerBuyinRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerBuyinRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerBuyinRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerBuyinResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerBuyinResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerBuyinResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerBuyinResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerBuyinResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerBuyinResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyFaceShowRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyFaceShowRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyFaceShowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyFaceShowRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyFaceShowRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyFaceShowRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyFaceShowResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyFaceShowResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyFaceShowResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyFaceShowResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyFaceShowResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyFaceShowResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerFaceShowRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerFaceShowRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerFaceShowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerFaceShowRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerFaceShowRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerFaceShowRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerFaceShowResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerFaceShowResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerFaceShowResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerFaceShowResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerFaceShowResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerFaceShowResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyChatRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyChatRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyChatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyChatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyChatRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyChatRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyChatResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyChatResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyChatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyChatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyChatResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyChatResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerChatRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerChatRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerChatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerChatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChatRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChatRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerChatResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerChatResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerChatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerChatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChatResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChatResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyUsePropsRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyUsePropsRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyUsePropsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyUsePropsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyUsePropsRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyUsePropsRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyUsePropsResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyUsePropsResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyUsePropsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyUsePropsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyUsePropsResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyUsePropsResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerUsePropsRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerUsePropsRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerUsePropsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerUsePropsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerUsePropsRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerUsePropsRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerUsePropsResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerUsePropsResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerUsePropsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerUsePropsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerUsePropsResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerUsePropsResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentGiftRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentGiftRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentGiftRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentGiftRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentGiftRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentGiftRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentGiftResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentGiftResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentGiftResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentGiftResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentGiftResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentGiftResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentGiftRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentGiftRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentGiftRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentGiftRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentGiftRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentGiftRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentGiftResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentGiftResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentGiftResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentGiftResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentGiftResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentGiftResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentGiftNewInterRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentGiftNewInterRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentGiftNewInterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentGiftNewInterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentGiftNewInterRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentGiftNewInterRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentGiftNewInterResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentGiftNewInterResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentGiftNewInterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentGiftNewInterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentGiftNewInterResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentGiftNewInterResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentChipsRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentChipsRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentChipsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentChipsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentChipsRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentChipsRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPresentChipsResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPresentChipsResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyPresentChipsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPresentChipsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyPresentChipsResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyPresentChipsResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentChipsRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentChipsRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentChipsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentChipsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentChipsRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentChipsRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentChipsResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentChipsResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentChipsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentChipsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentChipsResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentChipsResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentGiftNewInterRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentGiftNewInterRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentGiftNewInterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentGiftNewInterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentGiftNewInterRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentGiftNewInterRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerPresentGiftNewInterResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPresentGiftNewInterResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerPresentGiftNewInterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPresentGiftNewInterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPresentGiftNewInterResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPresentGiftNewInterResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerEnterRoomRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerEnterRoomRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerEnterRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerEnterRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerEnterRoomRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerEnterRoomRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerEnterRoomResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerEnterRoomResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerEnterRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerEnterRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerEnterRoomResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerEnterRoomResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTransmitMessageRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTransmitMessageRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyTransmitMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTransmitMessageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTransmitMessageRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTransmitMessageRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTransmitMessageResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTransmitMessageResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyTransmitMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTransmitMessageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTransmitMessageResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTransmitMessageResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTransmitMessageRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTransmitMessageRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerTransmitMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTransmitMessageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTransmitMessageRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTransmitMessageRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTransmitMessageResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTransmitMessageResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerTransmitMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTransmitMessageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTransmitMessageResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTransmitMessageResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTrusteeOnRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTrusteeOnRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyTrusteeOnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTrusteeOnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTrusteeOnRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTrusteeOnRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTrusteeOnResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTrusteeOnResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyTrusteeOnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTrusteeOnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTrusteeOnResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTrusteeOnResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTrusteeOnRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTrusteeOnRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerTrusteeOnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTrusteeOnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTrusteeOnRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTrusteeOnRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTrusteeOnResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTrusteeOnResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerTrusteeOnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTrusteeOnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTrusteeOnResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTrusteeOnResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTrusteeOffRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTrusteeOffRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyTrusteeOffRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTrusteeOffRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTrusteeOffRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTrusteeOffRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyTrusteeOffResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyTrusteeOffResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyTrusteeOffResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyTrusteeOffResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyTrusteeOffResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyTrusteeOffResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTrusteeOffRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTrusteeOffRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerTrusteeOffRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTrusteeOffRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTrusteeOffRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTrusteeOffRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerTrusteeOffResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerTrusteeOffResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerTrusteeOffResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerTrusteeOffResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerTrusteeOffResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerTrusteeOffResponse_GameMsg_2eproto}, {}};

static void InitDefaultsReadyStartGameRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ReadyStartGameRequest_default_instance_;
    new (ptr) ::GameMsg::ReadyStartGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ReadyStartGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadyStartGameRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadyStartGameRequest_GameMsg_2eproto}, {}};

static void InitDefaultsReadyStartGameResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ReadyStartGameResponse_default_instance_;
    new (ptr) ::GameMsg::ReadyStartGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ReadyStartGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadyStartGameResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadyStartGameResponse_GameMsg_2eproto}, {}};

static void InitDefaultsDealCardsReqeust_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_DealCardsReqeust_default_instance_;
    new (ptr) ::GameMsg::DealCardsReqeust();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::DealCardsReqeust::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DealCardsReqeust_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDealCardsReqeust_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsDealCardsResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_DealCardsResponse_default_instance_;
    new (ptr) ::GameMsg::DealCardsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::DealCardsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DealCardsResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDealCardsResponse_GameMsg_2eproto}, {}};

static void InitDefaultsActivePlayerRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ActivePlayerRequest_default_instance_;
    new (ptr) ::GameMsg::ActivePlayerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ActivePlayerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActivePlayerRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActivePlayerRequest_GameMsg_2eproto}, {}};

static void InitDefaultsActivePlayerResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ActivePlayerResponse_default_instance_;
    new (ptr) ::GameMsg::ActivePlayerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ActivePlayerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActivePlayerResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActivePlayerResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyDigCardRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDigCardRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyDigCardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDigCardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyDigCardRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyDigCardRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyDigCardResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDigCardResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyDigCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDigCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyDigCardResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyDigCardResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerDigCardRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDigCardRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerDigCardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDigCardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerDigCardRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerDigCardRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerDigCardResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDigCardResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerDigCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDigCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerDigCardResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerDigCardResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyDropRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDropRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyDropRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDropRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyDropRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyDropRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyDropResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDropResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyDropResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDropResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyDropResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyDropResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerDropRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDropRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerDropRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDropRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerDropRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerDropRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerDropResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDropResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerDropResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDropResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerDropResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerDropResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyDeclareRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDeclareRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyDeclareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDeclareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ApplyDeclareRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsApplyDeclareRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsApplyDeclareResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyDeclareResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyDeclareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyDeclareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyDeclareResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyDeclareResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerDeclareRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDeclareRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerDeclareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDeclareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerDeclareRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerDeclareRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerDeclareResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerDeclareResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerDeclareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerDeclareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerDeclareResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerDeclareResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyLoseDeclareRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyLoseDeclareRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyLoseDeclareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyLoseDeclareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplyLoseDeclareRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplyLoseDeclareRequest_GameMsg_2eproto}, {
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsApplyLoseDeclareResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyLoseDeclareResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyLoseDeclareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyLoseDeclareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyLoseDeclareResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyLoseDeclareResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerLoseDeclareRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerLoseDeclareRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerLoseDeclareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerLoseDeclareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerLoseDeclareRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerLoseDeclareRequest_GameMsg_2eproto}, {
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerLoseDeclareResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerLoseDeclareResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerLoseDeclareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerLoseDeclareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLoseDeclareResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerLoseDeclareResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyPostCardRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPostCardRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyPostCardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPostCardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplyPostCardRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplyPostCardRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsApplyPostCardResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyPostCardResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyPostCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyPostCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplyPostCardResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplyPostCardResponse_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerPostCardRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPostCardRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerPostCardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPostCardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerPostCardRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerPostCardRequest_GameMsg_2eproto}, {
      &scc_info_MsgCard_GameMsg_2eproto.base,}};

static void InitDefaultsPlayerPostCardResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerPostCardResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerPostCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerPostCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerPostCardResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerPostCardResponse_GameMsg_2eproto}, {}};

static void InitDefaultsLoserInfo_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_LoserInfo_default_instance_;
    new (ptr) ::GameMsg::LoserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::LoserInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoserInfo_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoserInfo_GameMsg_2eproto}, {
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,}};

static void InitDefaultsGameOverRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_GameOverRequest_default_instance_;
    new (ptr) ::GameMsg::GameOverRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::GameOverRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GameOverRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGameOverRequest_GameMsg_2eproto}, {
      &scc_info_PB_CardGroup_GameMsg_2eproto.base,
      &scc_info_LoserInfo_GameMsg_2eproto.base,
      &scc_info_PlayerChips_GameMsg_2eproto.base,}};

static void InitDefaultsGameOverResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_GameOverResponse_default_instance_;
    new (ptr) ::GameMsg::GameOverResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::GameOverResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameOverResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameOverResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyRoomStatusRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyRoomStatusRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyRoomStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyRoomStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyRoomStatusRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyRoomStatusRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyRoomStatusResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyRoomStatusResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyRoomStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyRoomStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyRoomStatusResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyRoomStatusResponse_GameMsg_2eproto}, {}};

static void InitDefaultsNotifyWaitGameRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_NotifyWaitGameRequest_default_instance_;
    new (ptr) ::GameMsg::NotifyWaitGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::NotifyWaitGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyWaitGameRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyWaitGameRequest_GameMsg_2eproto}, {}};

static void InitDefaultsNotifyWaitGameResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_NotifyWaitGameResponse_default_instance_;
    new (ptr) ::GameMsg::NotifyWaitGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::NotifyWaitGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyWaitGameResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyWaitGameResponse_GameMsg_2eproto}, {}};

static void InitDefaultsShuffleCardRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ShuffleCardRequest_default_instance_;
    new (ptr) ::GameMsg::ShuffleCardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ShuffleCardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShuffleCardRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShuffleCardRequest_GameMsg_2eproto}, {}};

static void InitDefaultsShuffleCardResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ShuffleCardResponse_default_instance_;
    new (ptr) ::GameMsg::ShuffleCardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ShuffleCardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShuffleCardResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShuffleCardResponse_GameMsg_2eproto}, {}};

static void InitDefaultsApplyCloseAccountBoxRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyCloseAccountBoxRequest_default_instance_;
    new (ptr) ::GameMsg::ApplyCloseAccountBoxRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyCloseAccountBoxRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyCloseAccountBoxRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyCloseAccountBoxRequest_GameMsg_2eproto}, {}};

static void InitDefaultsApplyCloseAccountBoxResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_ApplyCloseAccountBoxResponse_default_instance_;
    new (ptr) ::GameMsg::ApplyCloseAccountBoxResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::ApplyCloseAccountBoxResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplyCloseAccountBoxResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplyCloseAccountBoxResponse_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerCloseAccountBoxRequest_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerCloseAccountBoxRequest_default_instance_;
    new (ptr) ::GameMsg::PlayerCloseAccountBoxRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerCloseAccountBoxRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCloseAccountBoxRequest_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCloseAccountBoxRequest_GameMsg_2eproto}, {}};

static void InitDefaultsPlayerCloseAccountBoxResponse_GameMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameMsg::_PlayerCloseAccountBoxResponse_default_instance_;
    new (ptr) ::GameMsg::PlayerCloseAccountBoxResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameMsg::PlayerCloseAccountBoxResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCloseAccountBoxResponse_GameMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCloseAccountBoxResponse_GameMsg_2eproto}, {}};

void InitDefaults_GameMsg_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EmptyGameRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalGameResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsgCard_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PB_CardGroup_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyFlushRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyFlushRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyEnterRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyEnterRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInfo_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PB_IngamePlayer_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplySeatRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplySeatResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerSitDownRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerSitDownResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyStandupRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyStandupResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStandUpRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStandUpResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyQuitRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyQuitRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerQuitRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerQuitRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChips_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerBuyinRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerBuyinResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyFaceShowRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyFaceShowResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerFaceShowRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerFaceShowResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyChatRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyChatResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChatRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChatResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyUsePropsRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyUsePropsResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerUsePropsRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerUsePropsResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentGiftRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentGiftResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentGiftRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentGiftResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentGiftNewInterRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentGiftNewInterResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentChipsRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPresentChipsResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentChipsRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentChipsResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentGiftNewInterRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPresentGiftNewInterResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerEnterRoomRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerEnterRoomResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTransmitMessageRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTransmitMessageResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTransmitMessageRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTransmitMessageResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTrusteeOnRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTrusteeOnResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTrusteeOnRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTrusteeOnResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTrusteeOffRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyTrusteeOffResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTrusteeOffRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerTrusteeOffResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadyStartGameRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadyStartGameResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DealCardsReqeust_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DealCardsResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActivePlayerRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActivePlayerResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDigCardRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDigCardResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDigCardRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDigCardResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDropRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDropResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDropRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDropResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDeclareRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyDeclareResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDeclareRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerDeclareResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyLoseDeclareRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyLoseDeclareResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLoseDeclareRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLoseDeclareResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPostCardRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyPostCardResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPostCardRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerPostCardResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoserInfo_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameOverRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameOverResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyRoomStatusRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyRoomStatusResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyWaitGameRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyWaitGameResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShuffleCardRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShuffleCardResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyCloseAccountBoxRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplyCloseAccountBoxResponse_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCloseAccountBoxRequest_GameMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCloseAccountBoxResponse_GameMsg_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_GameMsg_2eproto[104];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_GameMsg_2eproto[6];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_GameMsg_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_GameMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameMsg::EmptyGameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::EmptyGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::NormalGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::NormalGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::MsgCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::MsgCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::MsgCard, point_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::MsgCard, color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_CardGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_CardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_CardGroup, cards_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_CardGroup, type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomRequest, playername_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFlushRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomRequest, playername_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyEnterRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, totalchips_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, status_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, seatnumber_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, cardgroup_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerInfo, handcardcount_),
  1,
  0,
  3,
  2,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_IngamePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_IngamePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_IngamePlayer, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PB_IngamePlayer, seatnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, smallblind_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, mincarry_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, gamestatus_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, maxplaying_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, player_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, roomtype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, desktype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, cardpool_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, bottomcardcount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, jokercard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, chipspool_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, currentactiveseat_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, dealerindex_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, timeleft_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, applydeclareseatnum_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, active1sec_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, active2sec_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, distributsec_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, declaresec_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, waitgamesec_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, handcard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, dropscore1_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, dropscore2_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, ispoolcardcandig_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomRequest, ingameplayer_),
  1,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  ~0u,
  7,
  0,
  9,
  8,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  18,
  19,
  20,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::FlushRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, seatnumber_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatRequest, autobuyin_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplySeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownRequest, playername_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownRequest, seatnumber_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerSitDownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyStandupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpRequest, standupreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerStandUpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyQuitRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomRequest, quitreason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerQuitRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChips, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChips, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChips, currentchips_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinRequest, buyresult_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinRequest, buyincount_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerBuyinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowRequest, faceid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyFaceShowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowRequest, faceid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerFaceShowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, isshortcut_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatRequest, chatcontent_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, isshortcut_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, chatcontent_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, chatuserid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatRequest, chatusername_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, acceptuserid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsRequest, propsname_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyUsePropsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsRequest, applyuserid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsRequest, acceptuserid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsRequest, propsname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerUsePropsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, giftid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftRequest, acceptorid_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftRequest, presenterid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftRequest, giftid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftRequest, acceptorid_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, giftid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, gifturl_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterRequest, acceptorid_),
  1,
  2,
  3,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentGiftNewInterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, acceptorid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsRequest, chipscount_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPresentChipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, presenterid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, acceptorid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, chipscount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, presentercarry_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsRequest, acceptorcarry_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentChipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, presenterid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, giftid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, gifturl_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterRequest, acceptorid_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPresentGiftNewInterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerEnterRoomRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerEnterRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerEnterRoomRequest, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerEnterRoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerEnterRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, transmitmsgtype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, transmitmsgid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, transmitjsondata_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageRequest, recvuserid_),
  1,
  2,
  3,
  4,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTransmitMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, transmitmsgtype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, transmitmsgid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, transmitjsondata_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageRequest, senduserid_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTransmitMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOnRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOnRequest, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOnResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyTrusteeOffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOffRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOffRequest, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOffResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerTrusteeOffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ReadyStartGameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ReadyStartGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ReadyStartGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ReadyStartGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, dealerseat_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, handcard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, dealcardsorder_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, dealcardcount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, jokercard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, firstpoolcard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsReqeust, bottomcardcount_),
  2,
  ~0u,
  ~0u,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::DealCardsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerRequest, ispoolcardcandig_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ActivePlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardRequest, digtype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDigCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardRequest, digtype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardRequest, card_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDigCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, dropscore_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, dropchips_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropRequest, dropcard_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, declarecard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareRequest, cardgroup_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyDeclareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareRequest, declarecard_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareRequest, cardgroup_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerDeclareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareRequest, cardgroup_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyLoseDeclareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, cardgroup_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, score_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareRequest, chips_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerLoseDeclareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, card_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardRequest, appscore_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardResponse, handcards_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyPostCardResponse, poolcards_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardRequest, card_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerPostCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, loseaccount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, cardgroup_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, score_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, isdrop_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::LoserInfo, cardscore_),
  1,
  0,
  ~0u,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, winnerid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, winaccount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, winnercardgroup_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, loserinfo_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, playerchips_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, winnerscore_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, gameovertype_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverRequest, winnercardscore_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::GameOverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyRoomStatusResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameRequest, flag_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameRequest, seconds_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::NotifyWaitGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardRequest, poolcardcount_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardRequest, bottomcardcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ShuffleCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxRequest, roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::ApplyCloseAccountBoxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerCloseAccountBoxRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerCloseAccountBoxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerCloseAccountBoxRequest, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerCloseAccountBoxResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameMsg::PlayerCloseAccountBoxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::GameMsg::EmptyGameRequest)},
  { 5, 10, sizeof(::GameMsg::NormalGameResponse)},
  { 10, 17, sizeof(::GameMsg::MsgCard)},
  { 19, 26, sizeof(::GameMsg::PB_CardGroup)},
  { 28, 36, sizeof(::GameMsg::ApplyFlushRoomRequest)},
  { 39, 44, sizeof(::GameMsg::ApplyFlushRoomResponse)},
  { 44, 52, sizeof(::GameMsg::ApplyEnterRoomRequest)},
  { 55, 60, sizeof(::GameMsg::ApplyEnterRoomResponse)},
  { 60, 73, sizeof(::GameMsg::PlayerInfo)},
  { 81, 88, sizeof(::GameMsg::PB_IngamePlayer)},
  { 90, 120, sizeof(::GameMsg::FlushRoomRequest)},
  { 145, 150, sizeof(::GameMsg::FlushRoomResponse)},
  { 150, 159, sizeof(::GameMsg::ApplySeatRequest)},
  { 163, 168, sizeof(::GameMsg::ApplySeatResponse)},
  { 168, 176, sizeof(::GameMsg::PlayerSitDownRequest)},
  { 179, 184, sizeof(::GameMsg::PlayerSitDownResponse)},
  { 184, 191, sizeof(::GameMsg::ApplyStandupRequest)},
  { 193, 198, sizeof(::GameMsg::ApplyStandupResponse)},
  { 198, 205, sizeof(::GameMsg::PlayerStandUpRequest)},
  { 207, 212, sizeof(::GameMsg::PlayerStandUpResponse)},
  { 212, 219, sizeof(::GameMsg::ApplyQuitRoomRequest)},
  { 221, 226, sizeof(::GameMsg::ApplyQuitRoomResponse)},
  { 226, 233, sizeof(::GameMsg::PlayerQuitRoomRequest)},
  { 235, 240, sizeof(::GameMsg::PlayerQuitRoomResponse)},
  { 240, 247, sizeof(::GameMsg::PlayerChips)},
  { 249, 256, sizeof(::GameMsg::PlayerBuyinRequest)},
  { 258, 263, sizeof(::GameMsg::PlayerBuyinResponse)},
  { 263, 271, sizeof(::GameMsg::ApplyFaceShowRequest)},
  { 274, 279, sizeof(::GameMsg::ApplyFaceShowResponse)},
  { 279, 286, sizeof(::GameMsg::PlayerFaceShowRequest)},
  { 288, 293, sizeof(::GameMsg::PlayerFaceShowResponse)},
  { 293, 302, sizeof(::GameMsg::ApplyChatRequest)},
  { 306, 311, sizeof(::GameMsg::ApplyChatResponse)},
  { 311, 320, sizeof(::GameMsg::PlayerChatRequest)},
  { 324, 329, sizeof(::GameMsg::PlayerChatResponse)},
  { 329, 338, sizeof(::GameMsg::ApplyUsePropsRequest)},
  { 342, 347, sizeof(::GameMsg::ApplyUsePropsResponse)},
  { 347, 355, sizeof(::GameMsg::PlayerUsePropsRequest)},
  { 358, 363, sizeof(::GameMsg::PlayerUsePropsResponse)},
  { 363, 372, sizeof(::GameMsg::ApplyPresentGiftRequest)},
  { 376, 381, sizeof(::GameMsg::ApplyPresentGiftResponse)},
  { 381, 389, sizeof(::GameMsg::PlayerPresentGiftRequest)},
  { 392, 397, sizeof(::GameMsg::PlayerPresentGiftResponse)},
  { 397, 407, sizeof(::GameMsg::ApplyPresentGiftNewInterRequest)},
  { 412, 417, sizeof(::GameMsg::ApplyPresentGiftNewInterResponse)},
  { 417, 426, sizeof(::GameMsg::ApplyPresentChipsRequest)},
  { 430, 435, sizeof(::GameMsg::ApplyPresentChipsResponse)},
  { 435, 445, sizeof(::GameMsg::PlayerPresentChipsRequest)},
  { 450, 455, sizeof(::GameMsg::PlayerPresentChipsResponse)},
  { 455, 464, sizeof(::GameMsg::PlayerPresentGiftNewInterRequest)},
  { 468, 473, sizeof(::GameMsg::PlayerPresentGiftNewInterResponse)},
  { 473, 479, sizeof(::GameMsg::PlayerEnterRoomRequest)},
  { 480, 485, sizeof(::GameMsg::PlayerEnterRoomResponse)},
  { 485, 496, sizeof(::GameMsg::ApplyTransmitMessageRequest)},
  { 502, 507, sizeof(::GameMsg::ApplyTransmitMessageResponse)},
  { 507, 516, sizeof(::GameMsg::PlayerTransmitMessageRequest)},
  { 520, 525, sizeof(::GameMsg::PlayerTransmitMessageResponse)},
  { 525, 532, sizeof(::GameMsg::ApplyTrusteeOnRequest)},
  { 534, 539, sizeof(::GameMsg::ApplyTrusteeOnResponse)},
  { 539, 545, sizeof(::GameMsg::PlayerTrusteeOnRequest)},
  { 546, 551, sizeof(::GameMsg::PlayerTrusteeOnResponse)},
  { 551, 558, sizeof(::GameMsg::ApplyTrusteeOffRequest)},
  { 560, 565, sizeof(::GameMsg::ApplyTrusteeOffResponse)},
  { 565, 571, sizeof(::GameMsg::PlayerTrusteeOffRequest)},
  { 572, 577, sizeof(::GameMsg::PlayerTrusteeOffResponse)},
  { 577, 582, sizeof(::GameMsg::ReadyStartGameRequest)},
  { 582, 587, sizeof(::GameMsg::ReadyStartGameResponse)},
  { 587, 599, sizeof(::GameMsg::DealCardsReqeust)},
  { 606, 611, sizeof(::GameMsg::DealCardsResponse)},
  { 611, 618, sizeof(::GameMsg::ActivePlayerRequest)},
  { 620, 625, sizeof(::GameMsg::ActivePlayerResponse)},
  { 625, 633, sizeof(::GameMsg::ApplyDigCardRequest)},
  { 636, 641, sizeof(::GameMsg::ApplyDigCardResponse)},
  { 641, 649, sizeof(::GameMsg::PlayerDigCardRequest)},
  { 652, 657, sizeof(::GameMsg::PlayerDigCardResponse)},
  { 657, 664, sizeof(::GameMsg::ApplyDropRequest)},
  { 666, 671, sizeof(::GameMsg::ApplyDropResponse)},
  { 671, 680, sizeof(::GameMsg::PlayerDropRequest)},
  { 684, 689, sizeof(::GameMsg::PlayerDropResponse)},
  { 689, 698, sizeof(::GameMsg::ApplyDeclareRequest)},
  { 702, 707, sizeof(::GameMsg::ApplyDeclareResponse)},
  { 707, 715, sizeof(::GameMsg::PlayerDeclareRequest)},
  { 718, 723, sizeof(::GameMsg::PlayerDeclareResponse)},
  { 723, 731, sizeof(::GameMsg::ApplyLoseDeclareRequest)},
  { 734, 739, sizeof(::GameMsg::ApplyLoseDeclareResponse)},
  { 739, 748, sizeof(::GameMsg::PlayerLoseDeclareRequest)},
  { 752, 757, sizeof(::GameMsg::PlayerLoseDeclareResponse)},
  { 757, 766, sizeof(::GameMsg::ApplyPostCardRequest)},
  { 770, 777, sizeof(::GameMsg::ApplyPostCardResponse)},
  { 779, 786, sizeof(::GameMsg::PlayerPostCardRequest)},
  { 788, 793, sizeof(::GameMsg::PlayerPostCardResponse)},
  { 793, 804, sizeof(::GameMsg::LoserInfo)},
  { 810, 823, sizeof(::GameMsg::GameOverRequest)},
  { 831, 836, sizeof(::GameMsg::GameOverResponse)},
  { 836, 843, sizeof(::GameMsg::ApplyRoomStatusRequest)},
  { 845, 851, sizeof(::GameMsg::ApplyRoomStatusResponse)},
  { 852, 859, sizeof(::GameMsg::NotifyWaitGameRequest)},
  { 861, 866, sizeof(::GameMsg::NotifyWaitGameResponse)},
  { 866, 873, sizeof(::GameMsg::ShuffleCardRequest)},
  { 875, 880, sizeof(::GameMsg::ShuffleCardResponse)},
  { 880, 887, sizeof(::GameMsg::ApplyCloseAccountBoxRequest)},
  { 889, 894, sizeof(::GameMsg::ApplyCloseAccountBoxResponse)},
  { 894, 900, sizeof(::GameMsg::PlayerCloseAccountBoxRequest)},
  { 901, 906, sizeof(::GameMsg::PlayerCloseAccountBoxResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_EmptyGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_NormalGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_MsgCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PB_CardGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyFlushRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyFlushRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyEnterRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyEnterRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PB_IngamePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_FlushRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_FlushRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplySeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplySeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerSitDownRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerSitDownResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyStandupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyStandupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerStandUpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerStandUpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyQuitRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyQuitRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerQuitRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerQuitRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerChips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerBuyinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerBuyinResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyFaceShowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyFaceShowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerFaceShowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerFaceShowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyChatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyChatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerChatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerChatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyUsePropsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyUsePropsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerUsePropsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerUsePropsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentGiftRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentGiftResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentGiftRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentGiftResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentGiftNewInterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentGiftNewInterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentChipsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPresentChipsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentChipsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentChipsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentGiftNewInterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPresentGiftNewInterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerEnterRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerEnterRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTransmitMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTransmitMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTransmitMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTransmitMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTrusteeOnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTrusteeOnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTrusteeOnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTrusteeOnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTrusteeOffRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyTrusteeOffResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTrusteeOffRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerTrusteeOffResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ReadyStartGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ReadyStartGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_DealCardsReqeust_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_DealCardsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ActivePlayerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ActivePlayerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDigCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDigCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDigCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDigCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDropRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDropResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDropRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDropResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDeclareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyDeclareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDeclareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerDeclareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyLoseDeclareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyLoseDeclareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerLoseDeclareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerLoseDeclareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPostCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyPostCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPostCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerPostCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_LoserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_GameOverRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_GameOverResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyRoomStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyRoomStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_NotifyWaitGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_NotifyWaitGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ShuffleCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ShuffleCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyCloseAccountBoxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_ApplyCloseAccountBoxResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerCloseAccountBoxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameMsg::_PlayerCloseAccountBoxResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_GameMsg_2eproto = {
  {}, AddDescriptors_GameMsg_2eproto, "GameMsg.proto", schemas,
  file_default_instances, TableStruct_GameMsg_2eproto::offsets,
  file_level_metadata_GameMsg_2eproto, 104, file_level_enum_descriptors_GameMsg_2eproto, file_level_service_descriptors_GameMsg_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_GameMsg_2eproto = {
  false, InitDefaults_GameMsg_2eproto, 
  "\n\rGameMsg.proto\022\007GameMsg\"\022\n\020EmptyGameReq"
  "uest\"\024\n\022NormalGameResponse\"\'\n\007MsgCard\022\r\n"
  "\005point\030\001 \001(\005\022\r\n\005color\030\002 \001(\005\"\212\001\n\014PB_CardG"
  "roup\022\037\n\005cards\030\001 \003(\0132\020.GameMsg.MsgCard\022\014\n"
  "\004type\030\002 \001(\005\"K\n\rEnumGroupType\022\021\n\rGROUP_IN"
  "VALID\020\000\022\021\n\rGROUP_STAIGHT\020\001\022\024\n\020GROUP_THRE"
  "E_KIND\020\002\"K\n\025ApplyFlushRoomRequest\022\016\n\006use"
  "rId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\022\n\nplayerName\030"
  "\003 \001(\014\"\030\n\026ApplyFlushRoomResponse\"K\n\025Apply"
  "EnterRoomRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006room"
  "Id\030\002 \001(\005\022\022\n\nplayerName\030\003 \001(\014\"\030\n\026ApplyEnt"
  "erRoomResponse\"\252\003\n\nPlayerInfo\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004name\030\002 \001(\014\022\022\n\ntotalChips\030\003 \001(\003\022\016\n\006s"
  "tatus\030\004 \001(\005\022\022\n\nseatNumber\030\005 \001(\005\022\r\n\005score"
  "\030\006 \001(\005\022(\n\tcardGroup\030\007 \003(\0132\025.GameMsg.PB_C"
  "ardGroup\022\025\n\rhandCardCount\030\010 \001(\005\"\371\001\n\020Enum"
  "PlayerStatus\022\027\n\023PLAYER_STATUS_FIRST\020\000\022\031\n"
  "\025PLAYER_WAIT_NEXT_GAME\020\001\022\022\n\016PLAYER_UNREA"
  "DY\020\002\022\022\n\016PLAYER_PLAYING\020\003\022\017\n\013PLAYER_DROP\020"
  "\004\022\022\n\016PLAYER_DECLARE\020\005\022\023\n\017PLAYER_STAND_UP"
  "\020\006\022\017\n\013PLAYER_MASK\020\017\022\024\n\017PLAYER_TRUSTEED\020\200"
  "\001\022\023\n\016PLAYER_OFFLINE\020\200\002\022\023\n\016PLAYER_ESCAPED"
  "\020\200\004\"2\n\017PB_IngamePlayer\022\016\n\006userId\030\001 \001(\005\022\017"
  "\n\007seatNum\030\002 \001(\005\"\335\006\n\020FlushRoomRequest\022\022\n\n"
  "smallBlind\030\001 \001(\003\022\020\n\010minCarry\030\002 \001(\003\022\022\n\nga"
  "meStatus\030\003 \001(\005\022\022\n\nmaxPlaying\030\004 \001(\005\022#\n\006pl"
  "ayer\030\005 \003(\0132\023.GameMsg.PlayerInfo\022\020\n\010roomT"
  "ype\030\006 \001(\005\022\020\n\010deskType\030\007 \001(\005\022\"\n\010cardPool\030"
  "\010 \003(\0132\020.GameMsg.MsgCard\022\027\n\017bottomCardCou"
  "nt\030\t \001(\005\022#\n\tjokerCard\030\n \001(\0132\020.GameMsg.Ms"
  "gCard\022\021\n\tchipsPool\030\013 \001(\003\022\031\n\021currentActiv"
  "eSeat\030\014 \001(\005\022\023\n\013dealerIndex\030\r \001(\005\022\020\n\010time"
  "Left\030\016 \001(\005\022\033\n\023applyDeclareSeatnum\030\017 \001(\005\022"
  "\022\n\nactive1Sec\030\020 \001(\005\022\022\n\nactive2Sec\030\021 \001(\005\022"
  "\024\n\014distributSec\030\022 \001(\005\022\022\n\ndeclareSec\030\023 \001("
  "\005\022\023\n\013waitGameSec\030\024 \001(\005\022\"\n\010handCard\030\025 \003(\013"
  "2\020.GameMsg.MsgCard\022\022\n\ndropScore1\030\026 \001(\005\022\022"
  "\n\ndropScore2\030\027 \001(\005\022\030\n\020isPoolCardCanDig\030\030"
  " \001(\010\022.\n\014ingamePlayer\030\031 \003(\0132\030.GameMsg.PB_"
  "IngamePlayer\"\340\001\n\016EnumGameStatus\022\025\n\021GAME_"
  "STATUS_FIRST\020\000\022\025\n\017GAME_ROUND_MASK\020\377\377\003\022\020\n"
  "\014GAME_UNREADY\020\001\022\025\n\021GAME_WAIT_PLAYING\020\002\022\024"
  "\n\020GAME_DEALER_CARD\020\004\022\020\n\014GAME_ACTIVE1\020\010\022\020"
  "\n\014GAME_ACTIVE2\020\020\022\020\n\014GAME_DECLARE\020 \022\023\n\017GA"
  "ME_DISTRIBUTE\020@\022\026\n\021GAME_SHUFFLE_CARD\020\200\001\""
  "\023\n\021FlushRoomResponse\"Y\n\020ApplySeatRequest"
  "\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\022\n\nseat"
  "Number\030\003 \001(\005\022\021\n\tautoBuyIn\030\004 \001(\005\"\023\n\021Apply"
  "SeatResponse\"N\n\024PlayerSitDownRequest\022\016\n\006"
  "userId\030\001 \001(\005\022\022\n\nplayerName\030\002 \001(\014\022\022\n\nseat"
  "Number\030\003 \001(\005\"\027\n\025PlayerSitDownResponse\"5\n"
  "\023ApplyStandupRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006"
  "roomId\030\002 \001(\005\"\026\n\024ApplyStandupResponse\"\251\001\n"
  "\024PlayerStandUpRequest\022\016\n\006userId\030\001 \001(\005\022\025\n"
  "\rstandUpReason\030\002 \001(\005\"j\n\013StandReason\022\022\n\016A"
  "PPLY_STAND_UP\020\000\022\r\n\tQUIT_ROOM\020\001\022\021\n\rNO_MOR"
  "E_CHIPS\020\002\022\023\n\017OFFLINE_TIMEOUT\020\003\022\020\n\014OTHER_"
  "REASON\020\004\"\027\n\025PlayerStandUpResponse\"6\n\024App"
  "lyQuitRoomRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roo"
  "mId\030\002 \001(\005\"\027\n\025ApplyQuitRoomResponse\";\n\025Pl"
  "ayerQuitRoomRequest\022\016\n\006userId\030\001 \001(\005\022\022\n\nq"
  "uitReason\030\002 \001(\005\"\030\n\026PlayerQuitRoomRespons"
  "e\"3\n\013PlayerChips\022\016\n\006userId\030\001 \001(\005\022\024\n\014curr"
  "entChips\030\002 \001(\003\";\n\022PlayerBuyinRequest\022\021\n\t"
  "buyResult\030\001 \001(\010\022\022\n\nbuyinCount\030\002 \001(\003\"\025\n\023P"
  "layerBuyinResponse\"F\n\024ApplyFaceShowReque"
  "st\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\016\n\006fa"
  "ceId\030\003 \001(\005\"\027\n\025ApplyFaceShowResponse\"7\n\025P"
  "layerFaceShowRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006"
  "faceId\030\002 \001(\005\"\030\n\026PlayerFaceShowResponse\"["
  "\n\020ApplyChatRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006ro"
  "omId\030\002 \001(\005\022\022\n\nIsShortcut\030\003 \001(\005\022\023\n\013chatCo"
  "ntent\030\004 \001(\014\"\023\n\021ApplyChatResponse\"f\n\021Play"
  "erChatRequest\022\022\n\nisShortcut\030\001 \001(\005\022\023\n\013cha"
  "tContent\030\002 \001(\014\022\022\n\nchatUserId\030\003 \001(\005\022\024\n\014ch"
  "atUserName\030\004 \001(\014\"\024\n\022PlayerChatResponse\"_"
  "\n\024ApplyUsePropsRequest\022\016\n\006userId\030\001 \001(\005\022\016"
  "\n\006roomId\030\002 \001(\005\022\024\n\014acceptUserId\030\003 \001(\005\022\021\n\t"
  "propsName\030\004 \001(\014\"\027\n\025ApplyUsePropsResponse"
  "\"U\n\025PlayerUsePropsRequest\022\023\n\013applyUserId"
  "\030\001 \001(\005\022\024\n\014acceptUserId\030\002 \001(\005\022\021\n\tpropsNam"
  "e\030\003 \001(\014\"\030\n\026PlayerUsePropsResponse\"]\n\027App"
  "lyPresentGiftRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006"
  "roomId\030\002 \001(\005\022\016\n\006giftId\030\003 \001(\005\022\022\n\nacceptor"
  "Id\030\004 \003(\005\"\032\n\030ApplyPresentGiftResponse\"S\n\030"
  "PlayerPresentGiftRequest\022\023\n\013presenterId\030"
  "\001 \001(\005\022\016\n\006giftId\030\002 \001(\005\022\022\n\nacceptorId\030\003 \003("
  "\005\"\033\n\031PlayerPresentGiftResponse\"v\n\037ApplyP"
  "resentGiftNewInterRequest\022\016\n\006userId\030\001 \001("
  "\005\022\016\n\006roomId\030\002 \001(\005\022\016\n\006giftId\030\003 \001(\005\022\017\n\007gif"
  "tUrl\030\004 \001(\014\022\022\n\nacceptorId\030\005 \003(\005\"\"\n ApplyP"
  "resentGiftNewInterResponse\"b\n\030ApplyPrese"
  "ntChipsRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId"
  "\030\002 \001(\005\022\022\n\nacceptorId\030\003 \001(\005\022\022\n\nchipsCount"
  "\030\004 \001(\003\"\033\n\031ApplyPresentChipsResponse\"\207\001\n\031"
  "PlayerPresentChipsRequest\022\023\n\013presenterId"
  "\030\001 \001(\005\022\022\n\nacceptorId\030\002 \001(\005\022\022\n\nchipsCount"
  "\030\003 \001(\003\022\026\n\016presenterCarry\030\004 \001(\003\022\025\n\raccept"
  "orCarry\030\005 \001(\003\"\034\n\032PlayerPresentChipsRespo"
  "nse\"l\n PlayerPresentGiftNewInterRequest\022"
  "\023\n\013presenterId\030\001 \001(\005\022\016\n\006giftId\030\002 \001(\005\022\017\n\007"
  "giftUrl\030\003 \001(\014\022\022\n\nacceptorId\030\004 \003(\005\"#\n!Pla"
  "yerPresentGiftNewInterResponse\"(\n\026Player"
  "EnterRoomRequest\022\016\n\006userId\030\001 \001(\005\"\031\n\027Play"
  "erEnterRoomResponse\"\233\001\n\033ApplyTransmitMes"
  "sageRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 "
  "\001(\005\022\027\n\017transmitMsgType\030\003 \001(\005\022\025\n\rtransmit"
  "MsgId\030\004 \001(\005\022\030\n\020transmitJsonData\030\005 \001(\014\022\022\n"
  "\nrecvUserId\030\006 \003(\005\"\036\n\034ApplyTransmitMessag"
  "eResponse\"|\n\034PlayerTransmitMessageReques"
  "t\022\027\n\017transmitMsgType\030\001 \001(\005\022\025\n\rtransmitMs"
  "gId\030\002 \001(\005\022\030\n\020transmitJsonData\030\003 \001(\014\022\022\n\ns"
  "endUserId\030\004 \001(\005\"\037\n\035PlayerTransmitMessage"
  "Response\"7\n\025ApplyTrusteeOnRequest\022\016\n\006use"
  "rId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\"\030\n\026ApplyTruste"
  "eOnResponse\"(\n\026PlayerTrusteeOnRequest\022\016\n"
  "\006userId\030\001 \001(\005\"\031\n\027PlayerTrusteeOnResponse"
  "\"8\n\026ApplyTrusteeOffRequest\022\016\n\006userId\030\001 \001"
  "(\005\022\016\n\006roomId\030\002 \001(\005\"\031\n\027ApplyTrusteeOffRes"
  "ponse\")\n\027PlayerTrusteeOffRequest\022\016\n\006user"
  "Id\030\001 \001(\005\"\032\n\030PlayerTrusteeOffResponse\"\027\n\025"
  "ReadyStartGameRequest\"\030\n\026ReadyStartGameR"
  "esponse\"\340\001\n\020DealCardsReqeust\022\022\n\ndealerSe"
  "at\030\001 \001(\005\022\"\n\010handCard\030\002 \003(\0132\020.GameMsg.Msg"
  "Card\022\026\n\016dealCardsOrder\030\003 \003(\005\022\025\n\rdealCard"
  "Count\030\004 \001(\005\022#\n\tjokerCard\030\005 \001(\0132\020.GameMsg"
  ".MsgCard\022\'\n\rfirstPoolCard\030\006 \001(\0132\020.GameMs"
  "g.MsgCard\022\027\n\017bottomCardCount\030\007 \001(\005\"\023\n\021De"
  "alCardsResponse\"\?\n\023ActivePlayerRequest\022\016"
  "\n\006userId\030\001 \001(\005\022\030\n\020isPoolCardCanDig\030\002 \001(\010"
  "\"\026\n\024ActivePlayerResponse\"F\n\023ApplyDigCard"
  "Request\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022"
  "\017\n\007digType\030\003 \001(\005\"\026\n\024ApplyDigCardResponse"
  "\"W\n\024PlayerDigCardRequest\022\016\n\006userId\030\001 \001(\005"
  "\022\017\n\007digType\030\002 \001(\005\022\036\n\004card\030\003 \001(\0132\020.GameMs"
  "g.MsgCard\"\027\n\025PlayerDigCardResponse\"2\n\020Ap"
  "plyDropRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId"
  "\030\002 \001(\005\"\023\n\021ApplyDropResponse\"m\n\021PlayerDro"
  "pRequest\022\016\n\006userId\030\001 \001(\005\022\021\n\tdropScore\030\002 "
  "\001(\005\022\021\n\tdropChips\030\003 \001(\003\022\"\n\010dropCard\030\004 \001(\013"
  "2\020.GameMsg.MsgCard\"\024\n\022PlayerDropResponse"
  "\"\206\001\n\023ApplyDeclareRequest\022\016\n\006userId\030\001 \001(\005"
  "\022\016\n\006roomId\030\002 \001(\005\022%\n\013declareCard\030\003 \001(\0132\020."
  "GameMsg.MsgCard\022(\n\tcardGroup\030\004 \003(\0132\025.Gam"
  "eMsg.PB_CardGroup\"\026\n\024ApplyDeclareRespons"
  "e\"w\n\024PlayerDeclareRequest\022\016\n\006userId\030\001 \001("
  "\005\022%\n\013declareCard\030\002 \001(\0132\020.GameMsg.MsgCard"
  "\022(\n\tcardGroup\030\003 \003(\0132\025.GameMsg.PB_CardGro"
  "up\"\027\n\025PlayerDeclareResponse\"c\n\027ApplyLose"
  "DeclareRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId"
  "\030\002 \001(\005\022(\n\tcardGroup\030\003 \003(\0132\025.GameMsg.PB_C"
  "ardGroup\"\032\n\030ApplyLoseDeclareResponse\"r\n\030"
  "PlayerLoseDeclareRequest\022\016\n\006userId\030\001 \001(\005"
  "\022(\n\tcardGroup\030\002 \003(\0132\025.GameMsg.PB_CardGro"
  "up\022\r\n\005score\030\003 \001(\005\022\r\n\005chips\030\004 \001(\003\"\033\n\031Play"
  "erLoseDeclareResponse\"l\n\024ApplyPostCardRe"
  "quest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\036\n"
  "\004card\030\003 \001(\0132\020.GameMsg.MsgCard\022\024\n\010appScor"
  "e\030\004 \001(\005:\002-1\"a\n\025ApplyPostCardResponse\022#\n\t"
  "handCards\030\001 \003(\0132\020.GameMsg.MsgCard\022#\n\tpoo"
  "lCards\030\002 \003(\0132\020.GameMsg.MsgCard\"G\n\025Player"
  "PostCardRequest\022\016\n\006userId\030\001 \001(\005\022\036\n\004card\030"
  "\002 \001(\0132\020.GameMsg.MsgCard\"\030\n\026PlayerPostCar"
  "dResponse\"\214\001\n\tLoserInfo\022\016\n\006userId\030\001 \001(\005\022"
  "\023\n\013loseAccount\030\002 \001(\003\022(\n\tcardGroup\030\003 \003(\0132"
  "\025.GameMsg.PB_CardGroup\022\r\n\005score\030\004 \001(\005\022\016\n"
  "\006isDrop\030\005 \001(\005\022\021\n\tcardScore\030\006 \001(\005\"\375\001\n\017Gam"
  "eOverRequest\022\020\n\010winnerId\030\001 \001(\005\022\022\n\nwinAcc"
  "ount\030\002 \001(\003\022.\n\017winnerCardGroup\030\003 \003(\0132\025.Ga"
  "meMsg.PB_CardGroup\022%\n\tloserInfo\030\004 \003(\0132\022."
  "GameMsg.LoserInfo\022)\n\013playerChips\030\005 \003(\0132\024"
  ".GameMsg.PlayerChips\022\023\n\013winnerScore\030\006 \001("
  "\005\022\024\n\014gameoverType\030\007 \001(\005\022\027\n\017winnerCardSco"
  "re\030\010 \001(\005\"\022\n\020GameOverResponse\"8\n\026ApplyRoo"
  "mStatusRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId"
  "\030\002 \001(\005\")\n\027ApplyRoomStatusResponse\022\016\n\006sta"
  "tus\030\002 \001(\005\"6\n\025NotifyWaitGameRequest\022\014\n\004fl"
  "ag\030\001 \001(\005\022\017\n\007seconds\030\002 \001(\005\"\030\n\026NotifyWaitG"
  "ameResponse\"D\n\022ShuffleCardRequest\022\025\n\rpoo"
  "lCardCount\030\001 \001(\005\022\027\n\017bottomCardCount\030\002 \001("
  "\005\"\025\n\023ShuffleCardResponse\"=\n\033ApplyCloseAc"
  "countBoxRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomI"
  "d\030\002 \001(\005\"\036\n\034ApplyCloseAccountBoxResponse\""
  ".\n\034PlayerCloseAccountBoxRequest\022\016\n\006userI"
  "d\030\001 \001(\005\"\037\n\035PlayerCloseAccountBoxResponse"
  "*A\n\016EnumPokerColor\022\n\n\006spades\020\001\022\n\n\006hearts"
  "\020\002\022\t\n\005clubs\020\003\022\014\n\010diamonds\020\004*\215\001\n\016EnumPoke"
  "rPoint\022\006\n\002P2\020\002\022\006\n\002P3\020\003\022\006\n\002P4\020\004\022\006\n\002P5\020\005\022\006"
  "\n\002P6\020\006\022\006\n\002P7\020\007\022\006\n\002P8\020\010\022\006\n\002P9\020\t\022\007\n\003P10\020\n\022"
  "\005\n\001J\020\013\022\005\n\001Q\020\014\022\005\n\001K\020\r\022\005\n\001A\020\016\022\n\n\006JOKER1\020\017\022"
  "\n\n\006JOKER2\020\020"
,
  "GameMsg.proto", &assign_descriptors_table_GameMsg_2eproto, 7611,
};

void AddDescriptors_GameMsg_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_GameMsg_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameMsg_2eproto = []() { AddDescriptors_GameMsg_2eproto(); return true; }();
namespace GameMsg {
const ::google::protobuf::EnumDescriptor* PB_CardGroup_EnumGroupType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[0];
}
bool PB_CardGroup_EnumGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PB_CardGroup_EnumGroupType PB_CardGroup::GROUP_INVALID;
const PB_CardGroup_EnumGroupType PB_CardGroup::GROUP_STAIGHT;
const PB_CardGroup_EnumGroupType PB_CardGroup::GROUP_THREE_KIND;
const PB_CardGroup_EnumGroupType PB_CardGroup::EnumGroupType_MIN;
const PB_CardGroup_EnumGroupType PB_CardGroup::EnumGroupType_MAX;
const int PB_CardGroup::EnumGroupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerInfo_EnumPlayerStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[1];
}
bool PlayerInfo_EnumPlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 15:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_STATUS_FIRST;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_WAIT_NEXT_GAME;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_UNREADY;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_PLAYING;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_DROP;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_DECLARE;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_STAND_UP;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_MASK;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_TRUSTEED;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_OFFLINE;
const PlayerInfo_EnumPlayerStatus PlayerInfo::PLAYER_ESCAPED;
const PlayerInfo_EnumPlayerStatus PlayerInfo::EnumPlayerStatus_MIN;
const PlayerInfo_EnumPlayerStatus PlayerInfo::EnumPlayerStatus_MAX;
const int PlayerInfo::EnumPlayerStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlushRoomRequest_EnumGameStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[2];
}
bool FlushRoomRequest_EnumGameStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 65535:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_STATUS_FIRST;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_ROUND_MASK;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_UNREADY;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_WAIT_PLAYING;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_DEALER_CARD;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_ACTIVE1;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_ACTIVE2;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_DECLARE;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_DISTRIBUTE;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::GAME_SHUFFLE_CARD;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::EnumGameStatus_MIN;
const FlushRoomRequest_EnumGameStatus FlushRoomRequest::EnumGameStatus_MAX;
const int FlushRoomRequest::EnumGameStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerStandUpRequest_StandReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[3];
}
bool PlayerStandUpRequest_StandReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::APPLY_STAND_UP;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::QUIT_ROOM;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::NO_MORE_CHIPS;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::OFFLINE_TIMEOUT;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::OTHER_REASON;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::StandReason_MIN;
const PlayerStandUpRequest_StandReason PlayerStandUpRequest::StandReason_MAX;
const int PlayerStandUpRequest::StandReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumPokerColor_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[4];
}
bool EnumPokerColor_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumPokerPoint_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_GameMsg_2eproto);
  return file_level_enum_descriptors_GameMsg_2eproto[5];
}
bool EnumPokerPoint_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EmptyGameRequest::InitAsDefaultInstance() {
}
class EmptyGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyGameRequest::EmptyGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.EmptyGameRequest)
}
EmptyGameRequest::EmptyGameRequest(const EmptyGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.EmptyGameRequest)
}

void EmptyGameRequest::SharedCtor() {
}

EmptyGameRequest::~EmptyGameRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.EmptyGameRequest)
  SharedDtor();
}

void EmptyGameRequest::SharedDtor() {
}

void EmptyGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyGameRequest& EmptyGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmptyGameRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void EmptyGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.EmptyGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmptyGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.EmptyGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.EmptyGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.EmptyGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.EmptyGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.EmptyGameRequest)
}

::google::protobuf::uint8* EmptyGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.EmptyGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.EmptyGameRequest)
  return target;
}

size_t EmptyGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.EmptyGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.EmptyGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EmptyGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.EmptyGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.EmptyGameRequest)
    MergeFrom(*source);
  }
}

void EmptyGameRequest::MergeFrom(const EmptyGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.EmptyGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.EmptyGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyGameRequest::CopyFrom(const EmptyGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.EmptyGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyGameRequest::IsInitialized() const {
  return true;
}

void EmptyGameRequest::Swap(EmptyGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyGameRequest::InternalSwap(EmptyGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata EmptyGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NormalGameResponse::InitAsDefaultInstance() {
}
class NormalGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalGameResponse::NormalGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.NormalGameResponse)
}
NormalGameResponse::NormalGameResponse(const NormalGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.NormalGameResponse)
}

void NormalGameResponse::SharedCtor() {
}

NormalGameResponse::~NormalGameResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.NormalGameResponse)
  SharedDtor();
}

void NormalGameResponse::SharedDtor() {
}

void NormalGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalGameResponse& NormalGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NormalGameResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void NormalGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.NormalGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NormalGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NormalGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NormalGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.NormalGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.NormalGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.NormalGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NormalGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.NormalGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.NormalGameResponse)
}

::google::protobuf::uint8* NormalGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.NormalGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.NormalGameResponse)
  return target;
}

size_t NormalGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.NormalGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.NormalGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NormalGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.NormalGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.NormalGameResponse)
    MergeFrom(*source);
  }
}

void NormalGameResponse::MergeFrom(const NormalGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.NormalGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NormalGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.NormalGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalGameResponse::CopyFrom(const NormalGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.NormalGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGameResponse::IsInitialized() const {
  return true;
}

void NormalGameResponse::Swap(NormalGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalGameResponse::InternalSwap(NormalGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata NormalGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MsgCard::InitAsDefaultInstance() {
}
class MsgCard::HasBitSetters {
 public:
  static void set_has_point(MsgCard* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_color(MsgCard* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCard::kPointFieldNumber;
const int MsgCard::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCard::MsgCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.MsgCard)
}
MsgCard::MsgCard(const MsgCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&point_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.MsgCard)
}

void MsgCard::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&point_)) + sizeof(color_));
}

MsgCard::~MsgCard() {
  // @@protoc_insertion_point(destructor:GameMsg.MsgCard)
  SharedDtor();
}

void MsgCard::SharedDtor() {
}

void MsgCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCard& MsgCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MsgCard_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void MsgCard::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.MsgCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&point_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MsgCard::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MsgCard*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_point(value);
        break;
      }
      // optional int32 color = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_color(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MsgCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.MsgCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_color(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.MsgCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.MsgCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MsgCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.MsgCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->point(), output);
  }

  // optional int32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.MsgCard)
}

::google::protobuf::uint8* MsgCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.MsgCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->point(), target);
  }

  // optional int32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.MsgCard)
  return target;
}

size_t MsgCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.MsgCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.MsgCard)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCard* source =
      ::google::protobuf::DynamicCastToGenerated<MsgCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.MsgCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.MsgCard)
    MergeFrom(*source);
  }
}

void MsgCard::MergeFrom(const MsgCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.MsgCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.MsgCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCard::CopyFrom(const MsgCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.MsgCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCard::IsInitialized() const {
  return true;
}

void MsgCard::Swap(MsgCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCard::InternalSwap(MsgCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(point_, other->point_);
  swap(color_, other->color_);
}

::google::protobuf::Metadata MsgCard::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PB_CardGroup::InitAsDefaultInstance() {
}
class PB_CardGroup::HasBitSetters {
 public:
  static void set_has_type(PB_CardGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_CardGroup::kCardsFieldNumber;
const int PB_CardGroup::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_CardGroup::PB_CardGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PB_CardGroup)
}
PB_CardGroup::PB_CardGroup(const PB_CardGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PB_CardGroup)
}

void PB_CardGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PB_CardGroup_GameMsg_2eproto.base);
  type_ = 0;
}

PB_CardGroup::~PB_CardGroup() {
  // @@protoc_insertion_point(destructor:GameMsg.PB_CardGroup)
  SharedDtor();
}

void PB_CardGroup::SharedDtor() {
}

void PB_CardGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_CardGroup& PB_CardGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PB_CardGroup_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PB_CardGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PB_CardGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PB_CardGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PB_CardGroup*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .GameMsg.MsgCard cards = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_cards();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PB_CardGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PB_CardGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameMsg.MsgCard cards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PB_CardGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PB_CardGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PB_CardGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PB_CardGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cards(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PB_CardGroup)
}

::google::protobuf::uint8* PB_CardGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PB_CardGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard cards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cards(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PB_CardGroup)
  return target;
}

size_t PB_CardGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PB_CardGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard cards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cards(static_cast<int>(i)));
    }
  }

  // optional int32 type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_CardGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PB_CardGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CardGroup* source =
      ::google::protobuf::DynamicCastToGenerated<PB_CardGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PB_CardGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PB_CardGroup)
    MergeFrom(*source);
  }
}

void PB_CardGroup::MergeFrom(const PB_CardGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PB_CardGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void PB_CardGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PB_CardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CardGroup::CopyFrom(const PB_CardGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PB_CardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CardGroup::IsInitialized() const {
  return true;
}

void PB_CardGroup::Swap(PB_CardGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_CardGroup::InternalSwap(PB_CardGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cards_)->InternalSwap(CastToBase(&other->cards_));
  swap(type_, other->type_);
}

::google::protobuf::Metadata PB_CardGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyFlushRoomRequest::InitAsDefaultInstance() {
}
class ApplyFlushRoomRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyFlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyFlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playername(ApplyFlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyFlushRoomRequest::kUserIdFieldNumber;
const int ApplyFlushRoomRequest::kRoomIdFieldNumber;
const int ApplyFlushRoomRequest::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyFlushRoomRequest::ApplyFlushRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyFlushRoomRequest)
}
ApplyFlushRoomRequest::ApplyFlushRoomRequest(const ApplyFlushRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyFlushRoomRequest)
}

void ApplyFlushRoomRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyFlushRoomRequest_GameMsg_2eproto.base);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyFlushRoomRequest::~ApplyFlushRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyFlushRoomRequest)
  SharedDtor();
}

void ApplyFlushRoomRequest::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyFlushRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyFlushRoomRequest& ApplyFlushRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyFlushRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyFlushRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyFlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyFlushRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyFlushRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional bytes playerName = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_playername();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyFlushRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyFlushRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes playerName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyFlushRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyFlushRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyFlushRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyFlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional bytes playerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->playername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyFlushRoomRequest)
}

::google::protobuf::uint8* ApplyFlushRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyFlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional bytes playerName = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->playername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyFlushRoomRequest)
  return target;
}

size_t ApplyFlushRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyFlushRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes playerName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playername());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyFlushRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyFlushRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyFlushRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyFlushRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyFlushRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyFlushRoomRequest)
    MergeFrom(*source);
  }
}

void ApplyFlushRoomRequest::MergeFrom(const ApplyFlushRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyFlushRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyFlushRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyFlushRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFlushRoomRequest::CopyFrom(const ApplyFlushRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyFlushRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFlushRoomRequest::IsInitialized() const {
  return true;
}

void ApplyFlushRoomRequest::Swap(ApplyFlushRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyFlushRoomRequest::InternalSwap(ApplyFlushRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyFlushRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyFlushRoomResponse::InitAsDefaultInstance() {
}
class ApplyFlushRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyFlushRoomResponse::ApplyFlushRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyFlushRoomResponse)
}
ApplyFlushRoomResponse::ApplyFlushRoomResponse(const ApplyFlushRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyFlushRoomResponse)
}

void ApplyFlushRoomResponse::SharedCtor() {
}

ApplyFlushRoomResponse::~ApplyFlushRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyFlushRoomResponse)
  SharedDtor();
}

void ApplyFlushRoomResponse::SharedDtor() {
}

void ApplyFlushRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyFlushRoomResponse& ApplyFlushRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyFlushRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyFlushRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyFlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyFlushRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyFlushRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyFlushRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyFlushRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyFlushRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyFlushRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyFlushRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyFlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyFlushRoomResponse)
}

::google::protobuf::uint8* ApplyFlushRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyFlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyFlushRoomResponse)
  return target;
}

size_t ApplyFlushRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyFlushRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyFlushRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyFlushRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyFlushRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyFlushRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyFlushRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyFlushRoomResponse)
    MergeFrom(*source);
  }
}

void ApplyFlushRoomResponse::MergeFrom(const ApplyFlushRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyFlushRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyFlushRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyFlushRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFlushRoomResponse::CopyFrom(const ApplyFlushRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyFlushRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFlushRoomResponse::IsInitialized() const {
  return true;
}

void ApplyFlushRoomResponse::Swap(ApplyFlushRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyFlushRoomResponse::InternalSwap(ApplyFlushRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyFlushRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyEnterRoomRequest::InitAsDefaultInstance() {
}
class ApplyEnterRoomRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyEnterRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyEnterRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playername(ApplyEnterRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyEnterRoomRequest::kUserIdFieldNumber;
const int ApplyEnterRoomRequest::kRoomIdFieldNumber;
const int ApplyEnterRoomRequest::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyEnterRoomRequest::ApplyEnterRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyEnterRoomRequest)
}
ApplyEnterRoomRequest::ApplyEnterRoomRequest(const ApplyEnterRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyEnterRoomRequest)
}

void ApplyEnterRoomRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyEnterRoomRequest_GameMsg_2eproto.base);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyEnterRoomRequest::~ApplyEnterRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyEnterRoomRequest)
  SharedDtor();
}

void ApplyEnterRoomRequest::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyEnterRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyEnterRoomRequest& ApplyEnterRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyEnterRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyEnterRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyEnterRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyEnterRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional bytes playerName = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_playername();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyEnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyEnterRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes playerName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyEnterRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyEnterRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyEnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional bytes playerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->playername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyEnterRoomRequest)
}

::google::protobuf::uint8* ApplyEnterRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional bytes playerName = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->playername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyEnterRoomRequest)
  return target;
}

size_t ApplyEnterRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyEnterRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes playerName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playername());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyEnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyEnterRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyEnterRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyEnterRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyEnterRoomRequest)
    MergeFrom(*source);
  }
}

void ApplyEnterRoomRequest::MergeFrom(const ApplyEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyEnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyEnterRoomRequest::CopyFrom(const ApplyEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyEnterRoomRequest::IsInitialized() const {
  return true;
}

void ApplyEnterRoomRequest::Swap(ApplyEnterRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyEnterRoomRequest::InternalSwap(ApplyEnterRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyEnterRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyEnterRoomResponse::InitAsDefaultInstance() {
}
class ApplyEnterRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyEnterRoomResponse::ApplyEnterRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyEnterRoomResponse)
}
ApplyEnterRoomResponse::ApplyEnterRoomResponse(const ApplyEnterRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyEnterRoomResponse)
}

void ApplyEnterRoomResponse::SharedCtor() {
}

ApplyEnterRoomResponse::~ApplyEnterRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyEnterRoomResponse)
  SharedDtor();
}

void ApplyEnterRoomResponse::SharedDtor() {
}

void ApplyEnterRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyEnterRoomResponse& ApplyEnterRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyEnterRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyEnterRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyEnterRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyEnterRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyEnterRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyEnterRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyEnterRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyEnterRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyEnterRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyEnterRoomResponse)
}

::google::protobuf::uint8* ApplyEnterRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyEnterRoomResponse)
  return target;
}

size_t ApplyEnterRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyEnterRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyEnterRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyEnterRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyEnterRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyEnterRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyEnterRoomResponse)
    MergeFrom(*source);
  }
}

void ApplyEnterRoomResponse::MergeFrom(const ApplyEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyEnterRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyEnterRoomResponse::CopyFrom(const ApplyEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyEnterRoomResponse::IsInitialized() const {
  return true;
}

void ApplyEnterRoomResponse::Swap(ApplyEnterRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyEnterRoomResponse::InternalSwap(ApplyEnterRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyEnterRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
class PlayerInfo::HasBitSetters {
 public:
  static void set_has_id(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_totalchips(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_status(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seatnumber(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_score(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_handcardcount(PlayerInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kTotalChipsFieldNumber;
const int PlayerInfo::kStatusFieldNumber;
const int PlayerInfo::kSeatNumberFieldNumber;
const int PlayerInfo::kScoreFieldNumber;
const int PlayerInfo::kCardGroupFieldNumber;
const int PlayerInfo::kHandCardCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&handcardcount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(handcardcount_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerInfo_GameMsg_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handcardcount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(handcardcount_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfo_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handcardcount_) -
        reinterpret_cast<char*>(&id_)) + sizeof(handcardcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional int64 totalChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_totalchips(value);
        break;
      }
      // optional int32 status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_status(value);
        break;
      }
      // optional int32 seatNumber = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_seatnumber(value);
        break;
      }
      // optional int32 score = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_score(value);
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // optional int32 handCardCount = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_handcardcount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 totalChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_totalchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seatNumber = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seatnumber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 handCardCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_handcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 totalChips = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totalchips(), output);
  }

  // optional int32 status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 seatNumber = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seatnumber(), output);
  }

  // optional int32 score = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  // optional int32 handCardCount = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->handcardcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 totalChips = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totalchips(), target);
  }

  // optional int32 status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 seatNumber = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seatnumber(), target);
  }

  // optional int32 score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 handCardCount = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->handcardcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 totalChips = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalchips());
    }

    // optional int32 seatNumber = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatnumber());
    }

    // optional int32 score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 handCardCount = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcardcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalchips_ = from.totalchips_;
    }
    if (cached_has_bits & 0x00000010u) {
      seatnumber_ = from.seatnumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000040u) {
      handcardcount_ = from.handcardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(status_, other->status_);
  swap(totalchips_, other->totalchips_);
  swap(seatnumber_, other->seatnumber_);
  swap(score_, other->score_);
  swap(handcardcount_, other->handcardcount_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PB_IngamePlayer::InitAsDefaultInstance() {
}
class PB_IngamePlayer::HasBitSetters {
 public:
  static void set_has_userid(PB_IngamePlayer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_seatnum(PB_IngamePlayer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_IngamePlayer::kUserIdFieldNumber;
const int PB_IngamePlayer::kSeatNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_IngamePlayer::PB_IngamePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PB_IngamePlayer)
}
PB_IngamePlayer::PB_IngamePlayer(const PB_IngamePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seatnum_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(seatnum_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PB_IngamePlayer)
}

void PB_IngamePlayer::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seatnum_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(seatnum_));
}

PB_IngamePlayer::~PB_IngamePlayer() {
  // @@protoc_insertion_point(destructor:GameMsg.PB_IngamePlayer)
  SharedDtor();
}

void PB_IngamePlayer::SharedDtor() {
}

void PB_IngamePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_IngamePlayer& PB_IngamePlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PB_IngamePlayer_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PB_IngamePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PB_IngamePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seatnum_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(seatnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PB_IngamePlayer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PB_IngamePlayer*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 seatNum = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_seatnum(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PB_IngamePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PB_IngamePlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seatNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_seatnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PB_IngamePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PB_IngamePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PB_IngamePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PB_IngamePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 seatNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PB_IngamePlayer)
}

::google::protobuf::uint8* PB_IngamePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PB_IngamePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 seatNum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PB_IngamePlayer)
  return target;
}

size_t PB_IngamePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PB_IngamePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 seatNum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_IngamePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PB_IngamePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_IngamePlayer* source =
      ::google::protobuf::DynamicCastToGenerated<PB_IngamePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PB_IngamePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PB_IngamePlayer)
    MergeFrom(*source);
  }
}

void PB_IngamePlayer::MergeFrom(const PB_IngamePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PB_IngamePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seatnum_ = from.seatnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PB_IngamePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PB_IngamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_IngamePlayer::CopyFrom(const PB_IngamePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PB_IngamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_IngamePlayer::IsInitialized() const {
  return true;
}

void PB_IngamePlayer::Swap(PB_IngamePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_IngamePlayer::InternalSwap(PB_IngamePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(seatnum_, other->seatnum_);
}

::google::protobuf::Metadata PB_IngamePlayer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushRoomRequest::InitAsDefaultInstance() {
  ::GameMsg::_FlushRoomRequest_default_instance_._instance.get_mutable()->jokercard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class FlushRoomRequest::HasBitSetters {
 public:
  static void set_has_smallblind(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_mincarry(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gamestatus(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_maxplaying(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_roomtype(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_desktype(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_bottomcardcount(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::GameMsg::MsgCard& jokercard(const FlushRoomRequest* msg);
  static void set_has_jokercard(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chipspool(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_currentactiveseat(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_dealerindex(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_timeleft(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_applydeclareseatnum(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_active1sec(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_active2sec(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_distributsec(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_declaresec(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_waitgamesec(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_dropscore1(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_dropscore2(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_ispoolcardcandig(FlushRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
};

const ::GameMsg::MsgCard&
FlushRoomRequest::HasBitSetters::jokercard(const FlushRoomRequest* msg) {
  return *msg->jokercard_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushRoomRequest::kSmallBlindFieldNumber;
const int FlushRoomRequest::kMinCarryFieldNumber;
const int FlushRoomRequest::kGameStatusFieldNumber;
const int FlushRoomRequest::kMaxPlayingFieldNumber;
const int FlushRoomRequest::kPlayerFieldNumber;
const int FlushRoomRequest::kRoomTypeFieldNumber;
const int FlushRoomRequest::kDeskTypeFieldNumber;
const int FlushRoomRequest::kCardPoolFieldNumber;
const int FlushRoomRequest::kBottomCardCountFieldNumber;
const int FlushRoomRequest::kJokerCardFieldNumber;
const int FlushRoomRequest::kChipsPoolFieldNumber;
const int FlushRoomRequest::kCurrentActiveSeatFieldNumber;
const int FlushRoomRequest::kDealerIndexFieldNumber;
const int FlushRoomRequest::kTimeLeftFieldNumber;
const int FlushRoomRequest::kApplyDeclareSeatnumFieldNumber;
const int FlushRoomRequest::kActive1SecFieldNumber;
const int FlushRoomRequest::kActive2SecFieldNumber;
const int FlushRoomRequest::kDistributSecFieldNumber;
const int FlushRoomRequest::kDeclareSecFieldNumber;
const int FlushRoomRequest::kWaitGameSecFieldNumber;
const int FlushRoomRequest::kHandCardFieldNumber;
const int FlushRoomRequest::kDropScore1FieldNumber;
const int FlushRoomRequest::kDropScore2FieldNumber;
const int FlushRoomRequest::kIsPoolCardCanDigFieldNumber;
const int FlushRoomRequest::kIngamePlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushRoomRequest::FlushRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.FlushRoomRequest)
}
FlushRoomRequest::FlushRoomRequest(const FlushRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_(from.player_),
      cardpool_(from.cardpool_),
      handcard_(from.handcard_),
      ingameplayer_(from.ingameplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_jokercard()) {
    jokercard_ = new ::GameMsg::MsgCard(*from.jokercard_);
  } else {
    jokercard_ = NULL;
  }
  ::memcpy(&smallblind_, &from.smallblind_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispoolcardcandig_) -
    reinterpret_cast<char*>(&smallblind_)) + sizeof(ispoolcardcandig_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.FlushRoomRequest)
}

void FlushRoomRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlushRoomRequest_GameMsg_2eproto.base);
  ::memset(&jokercard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispoolcardcandig_) -
      reinterpret_cast<char*>(&jokercard_)) + sizeof(ispoolcardcandig_));
}

FlushRoomRequest::~FlushRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.FlushRoomRequest)
  SharedDtor();
}

void FlushRoomRequest::SharedDtor() {
  if (this != internal_default_instance()) delete jokercard_;
}

void FlushRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRoomRequest& FlushRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.FlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  cardpool_.Clear();
  handcard_.Clear();
  ingameplayer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(jokercard_ != NULL);
    jokercard_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&smallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottomcardcount_) -
        reinterpret_cast<char*>(&smallblind_)) + sizeof(bottomcardcount_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&currentactiveseat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distributsec_) -
        reinterpret_cast<char*>(&currentactiveseat_)) + sizeof(distributsec_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&declaresec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ispoolcardcandig_) -
        reinterpret_cast<char*>(&declaresec_)) + sizeof(ispoolcardcandig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 smallBlind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      // optional int64 minCarry = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_mincarry(value);
        break;
      }
      // optional int32 gameStatus = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gamestatus(value);
        break;
      }
      // optional int32 maxPlaying = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_maxplaying(value);
        break;
      }
      // repeated .GameMsg.PlayerInfo player = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PlayerInfo::_InternalParse;
          object = msg->add_player();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional int32 roomType = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomtype(value);
        break;
      }
      // optional int32 deskType = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_desktype(value);
        break;
      }
      // repeated .GameMsg.MsgCard cardPool = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_cardpool();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional int32 bottomCardCount = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_bottomcardcount(value);
        break;
      }
      // optional .GameMsg.MsgCard jokerCard = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_jokercard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional int64 chipsPool = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipspool(value);
        break;
      }
      // optional int32 currentActiveSeat = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_currentactiveseat(value);
        break;
      }
      // optional int32 dealerIndex = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dealerindex(value);
        break;
      }
      // optional int32 timeLeft = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_timeleft(value);
        break;
      }
      // optional int32 applyDeclareSeatnum = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_applydeclareseatnum(value);
        break;
      }
      // optional int32 active1Sec = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_active1sec(value);
        break;
      }
      // optional int32 active2Sec = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_active2sec(value);
        break;
      }
      // optional int32 distributSec = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_distributsec(value);
        break;
      }
      // optional int32 declareSec = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_declaresec(value);
        break;
      }
      // optional int32 waitGameSec = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_waitgamesec(value);
        break;
      }
      // repeated .GameMsg.MsgCard handCard = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_handcard();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 426 && (ptr += 2));
        break;
      }
      // optional int32 dropScore1 = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dropscore1(value);
        break;
      }
      // optional int32 dropScore2 = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dropscore2(value);
        break;
      }
      // optional bool isPoolCardCanDig = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_ispoolcardcandig(value);
        break;
      }
      // repeated .GameMsg.PB_IngamePlayer ingamePlayer = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_IngamePlayer::_InternalParse;
          object = msg->add_ingameplayer();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 458 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.FlushRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 smallBlind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_smallblind(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 minCarry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mincarry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mincarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gameStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gamestatus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxPlaying = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_maxplaying(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplaying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PlayerInfo player = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_roomtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deskType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_desktype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.MsgCard cardPool = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardpool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bottomCardCount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_bottomcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottomcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard jokerCard = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jokercard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 chipsPool = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_chipspool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipspool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currentActiveSeat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_currentactiveseat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentactiveseat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dealerIndex = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_dealerindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeLeft = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_timeleft(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 applyDeclareSeatnum = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_applydeclareseatnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydeclareseatnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active1Sec = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_active1sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active1sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active2Sec = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_active2sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active2sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 distributSec = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_distributsec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distributsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 declareSec = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_declaresec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &declaresec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 waitGameSec = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_waitgamesec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waitgamesec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.MsgCard handCard = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_handcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropScore1 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_dropscore1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropscore1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropScore2 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_dropscore2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropscore2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isPoolCardCanDig = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_ispoolcardcandig(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispoolcardcandig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_IngamePlayer ingamePlayer = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ingameplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.FlushRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.FlushRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.FlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 smallBlind = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->smallblind(), output);
  }

  // optional int64 minCarry = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mincarry(), output);
  }

  // optional int32 gameStatus = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamestatus(), output);
  }

  // optional int32 maxPlaying = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplaying(), output);
  }

  // repeated .GameMsg.PlayerInfo player = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->player(static_cast<int>(i)),
      output);
  }

  // optional int32 roomType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomtype(), output);
  }

  // optional int32 deskType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->desktype(), output);
  }

  // repeated .GameMsg.MsgCard cardPool = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardpool_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->cardpool(static_cast<int>(i)),
      output);
  }

  // optional int32 bottomCardCount = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bottomcardcount(), output);
  }

  // optional .GameMsg.MsgCard jokerCard = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::jokercard(this), output);
  }

  // optional int64 chipsPool = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->chipspool(), output);
  }

  // optional int32 currentActiveSeat = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->currentactiveseat(), output);
  }

  // optional int32 dealerIndex = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dealerindex(), output);
  }

  // optional int32 timeLeft = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->timeleft(), output);
  }

  // optional int32 applyDeclareSeatnum = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->applydeclareseatnum(), output);
  }

  // optional int32 active1Sec = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->active1sec(), output);
  }

  // optional int32 active2Sec = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->active2sec(), output);
  }

  // optional int32 distributSec = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->distributsec(), output);
  }

  // optional int32 declareSec = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->declaresec(), output);
  }

  // optional int32 waitGameSec = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->waitgamesec(), output);
  }

  // repeated .GameMsg.MsgCard handCard = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcard_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->handcard(static_cast<int>(i)),
      output);
  }

  // optional int32 dropScore1 = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->dropscore1(), output);
  }

  // optional int32 dropScore2 = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->dropscore2(), output);
  }

  // optional bool isPoolCardCanDig = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->ispoolcardcandig(), output);
  }

  // repeated .GameMsg.PB_IngamePlayer ingamePlayer = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ingameplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->ingameplayer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.FlushRoomRequest)
}

::google::protobuf::uint8* FlushRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.FlushRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 smallBlind = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->smallblind(), target);
  }

  // optional int64 minCarry = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mincarry(), target);
  }

  // optional int32 gameStatus = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamestatus(), target);
  }

  // optional int32 maxPlaying = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxplaying(), target);
  }

  // repeated .GameMsg.PlayerInfo player = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->player(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 roomType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomtype(), target);
  }

  // optional int32 deskType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->desktype(), target);
  }

  // repeated .GameMsg.MsgCard cardPool = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardpool_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->cardpool(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 bottomCardCount = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bottomcardcount(), target);
  }

  // optional .GameMsg.MsgCard jokerCard = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::jokercard(this), deterministic, target);
  }

  // optional int64 chipsPool = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->chipspool(), target);
  }

  // optional int32 currentActiveSeat = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->currentactiveseat(), target);
  }

  // optional int32 dealerIndex = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dealerindex(), target);
  }

  // optional int32 timeLeft = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->timeleft(), target);
  }

  // optional int32 applyDeclareSeatnum = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->applydeclareseatnum(), target);
  }

  // optional int32 active1Sec = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->active1sec(), target);
  }

  // optional int32 active2Sec = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->active2sec(), target);
  }

  // optional int32 distributSec = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->distributsec(), target);
  }

  // optional int32 declareSec = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->declaresec(), target);
  }

  // optional int32 waitGameSec = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->waitgamesec(), target);
  }

  // repeated .GameMsg.MsgCard handCard = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcard_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->handcard(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 dropScore1 = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->dropscore1(), target);
  }

  // optional int32 dropScore2 = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->dropscore2(), target);
  }

  // optional bool isPoolCardCanDig = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->ispoolcardcandig(), target);
  }

  // repeated .GameMsg.PB_IngamePlayer ingamePlayer = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ingameplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->ingameplayer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.FlushRoomRequest)
  return target;
}

size_t FlushRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.FlushRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PlayerInfo player = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->player_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.MsgCard cardPool = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->cardpool_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardpool(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.MsgCard handCard = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->handcard_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->handcard(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.PB_IngamePlayer ingamePlayer = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->ingameplayer_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ingameplayer(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .GameMsg.MsgCard jokerCard = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *jokercard_);
    }

    // optional int64 smallBlind = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->smallblind());
    }

    // optional int64 minCarry = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mincarry());
    }

    // optional int32 gameStatus = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamestatus());
    }

    // optional int32 maxPlaying = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplaying());
    }

    // optional int32 roomType = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 deskType = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desktype());
    }

    // optional int32 bottomCardCount = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomcardcount());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 currentActiveSeat = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentactiveseat());
    }

    // optional int64 chipsPool = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chipspool());
    }

    // optional int32 dealerIndex = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerindex());
    }

    // optional int32 timeLeft = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }

    // optional int32 applyDeclareSeatnum = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydeclareseatnum());
    }

    // optional int32 active1Sec = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active1sec());
    }

    // optional int32 active2Sec = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active2sec());
    }

    // optional int32 distributSec = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distributsec());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 declareSec = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->declaresec());
    }

    // optional int32 waitGameSec = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waitgamesec());
    }

    // optional int32 dropScore1 = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropscore1());
    }

    // optional int32 dropScore2 = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropscore2());
    }

    // optional bool isPoolCardCanDig = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.FlushRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlushRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.FlushRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.FlushRoomRequest)
    MergeFrom(*source);
  }
}

void FlushRoomRequest::MergeFrom(const FlushRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.FlushRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  cardpool_.MergeFrom(from.cardpool_);
  handcard_.MergeFrom(from.handcard_);
  ingameplayer_.MergeFrom(from.ingameplayer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_jokercard()->::GameMsg::MsgCard::MergeFrom(from.jokercard());
    }
    if (cached_has_bits & 0x00000002u) {
      smallblind_ = from.smallblind_;
    }
    if (cached_has_bits & 0x00000004u) {
      mincarry_ = from.mincarry_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamestatus_ = from.gamestatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxplaying_ = from.maxplaying_;
    }
    if (cached_has_bits & 0x00000020u) {
      roomtype_ = from.roomtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      desktype_ = from.desktype_;
    }
    if (cached_has_bits & 0x00000080u) {
      bottomcardcount_ = from.bottomcardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      currentactiveseat_ = from.currentactiveseat_;
    }
    if (cached_has_bits & 0x00000200u) {
      chipspool_ = from.chipspool_;
    }
    if (cached_has_bits & 0x00000400u) {
      dealerindex_ = from.dealerindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      timeleft_ = from.timeleft_;
    }
    if (cached_has_bits & 0x00001000u) {
      applydeclareseatnum_ = from.applydeclareseatnum_;
    }
    if (cached_has_bits & 0x00002000u) {
      active1sec_ = from.active1sec_;
    }
    if (cached_has_bits & 0x00004000u) {
      active2sec_ = from.active2sec_;
    }
    if (cached_has_bits & 0x00008000u) {
      distributsec_ = from.distributsec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      declaresec_ = from.declaresec_;
    }
    if (cached_has_bits & 0x00020000u) {
      waitgamesec_ = from.waitgamesec_;
    }
    if (cached_has_bits & 0x00040000u) {
      dropscore1_ = from.dropscore1_;
    }
    if (cached_has_bits & 0x00080000u) {
      dropscore2_ = from.dropscore2_;
    }
    if (cached_has_bits & 0x00100000u) {
      ispoolcardcandig_ = from.ispoolcardcandig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlushRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.FlushRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRoomRequest::CopyFrom(const FlushRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.FlushRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRoomRequest::IsInitialized() const {
  return true;
}

void FlushRoomRequest::Swap(FlushRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushRoomRequest::InternalSwap(FlushRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&player_)->InternalSwap(CastToBase(&other->player_));
  CastToBase(&cardpool_)->InternalSwap(CastToBase(&other->cardpool_));
  CastToBase(&handcard_)->InternalSwap(CastToBase(&other->handcard_));
  CastToBase(&ingameplayer_)->InternalSwap(CastToBase(&other->ingameplayer_));
  swap(jokercard_, other->jokercard_);
  swap(smallblind_, other->smallblind_);
  swap(mincarry_, other->mincarry_);
  swap(gamestatus_, other->gamestatus_);
  swap(maxplaying_, other->maxplaying_);
  swap(roomtype_, other->roomtype_);
  swap(desktype_, other->desktype_);
  swap(bottomcardcount_, other->bottomcardcount_);
  swap(currentactiveseat_, other->currentactiveseat_);
  swap(chipspool_, other->chipspool_);
  swap(dealerindex_, other->dealerindex_);
  swap(timeleft_, other->timeleft_);
  swap(applydeclareseatnum_, other->applydeclareseatnum_);
  swap(active1sec_, other->active1sec_);
  swap(active2sec_, other->active2sec_);
  swap(distributsec_, other->distributsec_);
  swap(declaresec_, other->declaresec_);
  swap(waitgamesec_, other->waitgamesec_);
  swap(dropscore1_, other->dropscore1_);
  swap(dropscore2_, other->dropscore2_);
  swap(ispoolcardcandig_, other->ispoolcardcandig_);
}

::google::protobuf::Metadata FlushRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushRoomResponse::InitAsDefaultInstance() {
}
class FlushRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushRoomResponse::FlushRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.FlushRoomResponse)
}
FlushRoomResponse::FlushRoomResponse(const FlushRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.FlushRoomResponse)
}

void FlushRoomResponse::SharedCtor() {
}

FlushRoomResponse::~FlushRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.FlushRoomResponse)
  SharedDtor();
}

void FlushRoomResponse::SharedDtor() {
}

void FlushRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRoomResponse& FlushRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.FlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.FlushRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.FlushRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.FlushRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.FlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.FlushRoomResponse)
}

::google::protobuf::uint8* FlushRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.FlushRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.FlushRoomResponse)
  return target;
}

size_t FlushRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.FlushRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.FlushRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FlushRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.FlushRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.FlushRoomResponse)
    MergeFrom(*source);
  }
}

void FlushRoomResponse::MergeFrom(const FlushRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.FlushRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.FlushRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRoomResponse::CopyFrom(const FlushRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.FlushRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRoomResponse::IsInitialized() const {
  return true;
}

void FlushRoomResponse::Swap(FlushRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushRoomResponse::InternalSwap(FlushRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata FlushRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplySeatRequest::InitAsDefaultInstance() {
}
class ApplySeatRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplySeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplySeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seatnumber(ApplySeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_autobuyin(ApplySeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplySeatRequest::kUserIdFieldNumber;
const int ApplySeatRequest::kRoomIdFieldNumber;
const int ApplySeatRequest::kSeatNumberFieldNumber;
const int ApplySeatRequest::kAutoBuyInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplySeatRequest::ApplySeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplySeatRequest)
}
ApplySeatRequest::ApplySeatRequest(const ApplySeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autobuyin_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(autobuyin_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplySeatRequest)
}

void ApplySeatRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autobuyin_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(autobuyin_));
}

ApplySeatRequest::~ApplySeatRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplySeatRequest)
  SharedDtor();
}

void ApplySeatRequest::SharedDtor() {
}

void ApplySeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplySeatRequest& ApplySeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplySeatRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplySeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplySeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autobuyin_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(autobuyin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplySeatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplySeatRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 seatNumber = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_seatnumber(value);
        break;
      }
      // optional int32 autoBuyIn = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_autobuyin(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplySeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplySeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seatNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seatnumber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 autoBuyIn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_autobuyin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autobuyin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplySeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplySeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplySeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplySeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 seatNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatnumber(), output);
  }

  // optional int32 autoBuyIn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->autobuyin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplySeatRequest)
}

::google::protobuf::uint8* ApplySeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplySeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 seatNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatnumber(), target);
  }

  // optional int32 autoBuyIn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->autobuyin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplySeatRequest)
  return target;
}

size_t ApplySeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplySeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 seatNumber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatnumber());
    }

    // optional int32 autoBuyIn = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autobuyin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplySeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplySeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplySeatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplySeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplySeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplySeatRequest)
    MergeFrom(*source);
  }
}

void ApplySeatRequest::MergeFrom(const ApplySeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplySeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seatnumber_ = from.seatnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      autobuyin_ = from.autobuyin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplySeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplySeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplySeatRequest::CopyFrom(const ApplySeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplySeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplySeatRequest::IsInitialized() const {
  return true;
}

void ApplySeatRequest::Swap(ApplySeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplySeatRequest::InternalSwap(ApplySeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(seatnumber_, other->seatnumber_);
  swap(autobuyin_, other->autobuyin_);
}

::google::protobuf::Metadata ApplySeatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplySeatResponse::InitAsDefaultInstance() {
}
class ApplySeatResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplySeatResponse::ApplySeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplySeatResponse)
}
ApplySeatResponse::ApplySeatResponse(const ApplySeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplySeatResponse)
}

void ApplySeatResponse::SharedCtor() {
}

ApplySeatResponse::~ApplySeatResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplySeatResponse)
  SharedDtor();
}

void ApplySeatResponse::SharedDtor() {
}

void ApplySeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplySeatResponse& ApplySeatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplySeatResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplySeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplySeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplySeatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplySeatResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplySeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplySeatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplySeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplySeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplySeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplySeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplySeatResponse)
}

::google::protobuf::uint8* ApplySeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplySeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplySeatResponse)
  return target;
}

size_t ApplySeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplySeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplySeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplySeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplySeatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplySeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplySeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplySeatResponse)
    MergeFrom(*source);
  }
}

void ApplySeatResponse::MergeFrom(const ApplySeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplySeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplySeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplySeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplySeatResponse::CopyFrom(const ApplySeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplySeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplySeatResponse::IsInitialized() const {
  return true;
}

void ApplySeatResponse::Swap(ApplySeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplySeatResponse::InternalSwap(ApplySeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplySeatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerSitDownRequest::InitAsDefaultInstance() {
}
class PlayerSitDownRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerSitDownRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playername(PlayerSitDownRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_seatnumber(PlayerSitDownRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSitDownRequest::kUserIdFieldNumber;
const int PlayerSitDownRequest::kPlayerNameFieldNumber;
const int PlayerSitDownRequest::kSeatNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSitDownRequest::PlayerSitDownRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerSitDownRequest)
}
PlayerSitDownRequest::PlayerSitDownRequest(const PlayerSitDownRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seatnumber_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(seatnumber_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerSitDownRequest)
}

void PlayerSitDownRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerSitDownRequest_GameMsg_2eproto.base);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seatnumber_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(seatnumber_));
}

PlayerSitDownRequest::~PlayerSitDownRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerSitDownRequest)
  SharedDtor();
}

void PlayerSitDownRequest::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerSitDownRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSitDownRequest& PlayerSitDownRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerSitDownRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerSitDownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerSitDownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seatnumber_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(seatnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerSitDownRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerSitDownRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional bytes playerName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_playername();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional int32 seatNumber = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_seatnumber(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerSitDownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerSitDownRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes playerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seatNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seatnumber(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerSitDownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerSitDownRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerSitDownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerSitDownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional bytes playerName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 seatNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatnumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerSitDownRequest)
}

::google::protobuf::uint8* PlayerSitDownRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerSitDownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional bytes playerName = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->playername(), target);
  }

  // optional int32 seatNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatnumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerSitDownRequest)
  return target;
}

size_t PlayerSitDownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerSitDownRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes playerName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playername());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 seatNumber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatnumber());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSitDownRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerSitDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSitDownRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerSitDownRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerSitDownRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerSitDownRequest)
    MergeFrom(*source);
  }
}

void PlayerSitDownRequest::MergeFrom(const PlayerSitDownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerSitDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seatnumber_ = from.seatnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerSitDownRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerSitDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSitDownRequest::CopyFrom(const PlayerSitDownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerSitDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSitDownRequest::IsInitialized() const {
  return true;
}

void PlayerSitDownRequest::Swap(PlayerSitDownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSitDownRequest::InternalSwap(PlayerSitDownRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(seatnumber_, other->seatnumber_);
}

::google::protobuf::Metadata PlayerSitDownRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerSitDownResponse::InitAsDefaultInstance() {
}
class PlayerSitDownResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSitDownResponse::PlayerSitDownResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerSitDownResponse)
}
PlayerSitDownResponse::PlayerSitDownResponse(const PlayerSitDownResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerSitDownResponse)
}

void PlayerSitDownResponse::SharedCtor() {
}

PlayerSitDownResponse::~PlayerSitDownResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerSitDownResponse)
  SharedDtor();
}

void PlayerSitDownResponse::SharedDtor() {
}

void PlayerSitDownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSitDownResponse& PlayerSitDownResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerSitDownResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerSitDownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerSitDownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerSitDownResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerSitDownResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerSitDownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerSitDownResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerSitDownResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerSitDownResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerSitDownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerSitDownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerSitDownResponse)
}

::google::protobuf::uint8* PlayerSitDownResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerSitDownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerSitDownResponse)
  return target;
}

size_t PlayerSitDownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerSitDownResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSitDownResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerSitDownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSitDownResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerSitDownResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerSitDownResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerSitDownResponse)
    MergeFrom(*source);
  }
}

void PlayerSitDownResponse::MergeFrom(const PlayerSitDownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerSitDownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerSitDownResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerSitDownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSitDownResponse::CopyFrom(const PlayerSitDownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerSitDownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSitDownResponse::IsInitialized() const {
  return true;
}

void PlayerSitDownResponse::Swap(PlayerSitDownResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSitDownResponse::InternalSwap(PlayerSitDownResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerSitDownResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyStandupRequest::InitAsDefaultInstance() {
}
class ApplyStandupRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyStandupRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyStandupRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyStandupRequest::kUserIdFieldNumber;
const int ApplyStandupRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyStandupRequest::ApplyStandupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyStandupRequest)
}
ApplyStandupRequest::ApplyStandupRequest(const ApplyStandupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyStandupRequest)
}

void ApplyStandupRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyStandupRequest::~ApplyStandupRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyStandupRequest)
  SharedDtor();
}

void ApplyStandupRequest::SharedDtor() {
}

void ApplyStandupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyStandupRequest& ApplyStandupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyStandupRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyStandupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyStandupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyStandupRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyStandupRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyStandupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyStandupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyStandupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyStandupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyStandupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyStandupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyStandupRequest)
}

::google::protobuf::uint8* ApplyStandupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyStandupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyStandupRequest)
  return target;
}

size_t ApplyStandupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyStandupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyStandupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyStandupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyStandupRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyStandupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyStandupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyStandupRequest)
    MergeFrom(*source);
  }
}

void ApplyStandupRequest::MergeFrom(const ApplyStandupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyStandupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyStandupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyStandupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyStandupRequest::CopyFrom(const ApplyStandupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyStandupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyStandupRequest::IsInitialized() const {
  return true;
}

void ApplyStandupRequest::Swap(ApplyStandupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyStandupRequest::InternalSwap(ApplyStandupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyStandupRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyStandupResponse::InitAsDefaultInstance() {
}
class ApplyStandupResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyStandupResponse::ApplyStandupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyStandupResponse)
}
ApplyStandupResponse::ApplyStandupResponse(const ApplyStandupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyStandupResponse)
}

void ApplyStandupResponse::SharedCtor() {
}

ApplyStandupResponse::~ApplyStandupResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyStandupResponse)
  SharedDtor();
}

void ApplyStandupResponse::SharedDtor() {
}

void ApplyStandupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyStandupResponse& ApplyStandupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyStandupResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyStandupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyStandupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyStandupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyStandupResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyStandupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyStandupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyStandupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyStandupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyStandupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyStandupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyStandupResponse)
}

::google::protobuf::uint8* ApplyStandupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyStandupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyStandupResponse)
  return target;
}

size_t ApplyStandupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyStandupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyStandupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyStandupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyStandupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyStandupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyStandupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyStandupResponse)
    MergeFrom(*source);
  }
}

void ApplyStandupResponse::MergeFrom(const ApplyStandupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyStandupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyStandupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyStandupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyStandupResponse::CopyFrom(const ApplyStandupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyStandupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyStandupResponse::IsInitialized() const {
  return true;
}

void ApplyStandupResponse::Swap(ApplyStandupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyStandupResponse::InternalSwap(ApplyStandupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyStandupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerStandUpRequest::InitAsDefaultInstance() {
}
class PlayerStandUpRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerStandUpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_standupreason(PlayerStandUpRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStandUpRequest::kUserIdFieldNumber;
const int PlayerStandUpRequest::kStandUpReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStandUpRequest::PlayerStandUpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerStandUpRequest)
}
PlayerStandUpRequest::PlayerStandUpRequest(const PlayerStandUpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&standupreason_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(standupreason_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerStandUpRequest)
}

void PlayerStandUpRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standupreason_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(standupreason_));
}

PlayerStandUpRequest::~PlayerStandUpRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerStandUpRequest)
  SharedDtor();
}

void PlayerStandUpRequest::SharedDtor() {
}

void PlayerStandUpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerStandUpRequest& PlayerStandUpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerStandUpRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerStandUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerStandUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&standupreason_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(standupreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerStandUpRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerStandUpRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 standUpReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_standupreason(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStandUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerStandUpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 standUpReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_standupreason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standupreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerStandUpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerStandUpRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerStandUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerStandUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 standUpReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->standupreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerStandUpRequest)
}

::google::protobuf::uint8* PlayerStandUpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerStandUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 standUpReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->standupreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerStandUpRequest)
  return target;
}

size_t PlayerStandUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerStandUpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 standUpReason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->standupreason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerStandUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerStandUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStandUpRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerStandUpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerStandUpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerStandUpRequest)
    MergeFrom(*source);
  }
}

void PlayerStandUpRequest::MergeFrom(const PlayerStandUpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerStandUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      standupreason_ = from.standupreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerStandUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerStandUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStandUpRequest::CopyFrom(const PlayerStandUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerStandUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStandUpRequest::IsInitialized() const {
  return true;
}

void PlayerStandUpRequest::Swap(PlayerStandUpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStandUpRequest::InternalSwap(PlayerStandUpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(standupreason_, other->standupreason_);
}

::google::protobuf::Metadata PlayerStandUpRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerStandUpResponse::InitAsDefaultInstance() {
}
class PlayerStandUpResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStandUpResponse::PlayerStandUpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerStandUpResponse)
}
PlayerStandUpResponse::PlayerStandUpResponse(const PlayerStandUpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerStandUpResponse)
}

void PlayerStandUpResponse::SharedCtor() {
}

PlayerStandUpResponse::~PlayerStandUpResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerStandUpResponse)
  SharedDtor();
}

void PlayerStandUpResponse::SharedDtor() {
}

void PlayerStandUpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerStandUpResponse& PlayerStandUpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerStandUpResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerStandUpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerStandUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerStandUpResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerStandUpResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStandUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerStandUpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerStandUpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerStandUpResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerStandUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerStandUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerStandUpResponse)
}

::google::protobuf::uint8* PlayerStandUpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerStandUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerStandUpResponse)
  return target;
}

size_t PlayerStandUpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerStandUpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerStandUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerStandUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStandUpResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerStandUpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerStandUpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerStandUpResponse)
    MergeFrom(*source);
  }
}

void PlayerStandUpResponse::MergeFrom(const PlayerStandUpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerStandUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerStandUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerStandUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStandUpResponse::CopyFrom(const PlayerStandUpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerStandUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStandUpResponse::IsInitialized() const {
  return true;
}

void PlayerStandUpResponse::Swap(PlayerStandUpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStandUpResponse::InternalSwap(PlayerStandUpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerStandUpResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyQuitRoomRequest::InitAsDefaultInstance() {
}
class ApplyQuitRoomRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyQuitRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyQuitRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyQuitRoomRequest::kUserIdFieldNumber;
const int ApplyQuitRoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyQuitRoomRequest::ApplyQuitRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyQuitRoomRequest)
}
ApplyQuitRoomRequest::ApplyQuitRoomRequest(const ApplyQuitRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyQuitRoomRequest)
}

void ApplyQuitRoomRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyQuitRoomRequest::~ApplyQuitRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyQuitRoomRequest)
  SharedDtor();
}

void ApplyQuitRoomRequest::SharedDtor() {
}

void ApplyQuitRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyQuitRoomRequest& ApplyQuitRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyQuitRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyQuitRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyQuitRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyQuitRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyQuitRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyQuitRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyQuitRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyQuitRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyQuitRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyQuitRoomRequest)
}

::google::protobuf::uint8* ApplyQuitRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyQuitRoomRequest)
  return target;
}

size_t ApplyQuitRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyQuitRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyQuitRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyQuitRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyQuitRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyQuitRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyQuitRoomRequest)
    MergeFrom(*source);
  }
}

void ApplyQuitRoomRequest::MergeFrom(const ApplyQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyQuitRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyQuitRoomRequest::CopyFrom(const ApplyQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyQuitRoomRequest::IsInitialized() const {
  return true;
}

void ApplyQuitRoomRequest::Swap(ApplyQuitRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyQuitRoomRequest::InternalSwap(ApplyQuitRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyQuitRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyQuitRoomResponse::InitAsDefaultInstance() {
}
class ApplyQuitRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyQuitRoomResponse::ApplyQuitRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyQuitRoomResponse)
}
ApplyQuitRoomResponse::ApplyQuitRoomResponse(const ApplyQuitRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyQuitRoomResponse)
}

void ApplyQuitRoomResponse::SharedCtor() {
}

ApplyQuitRoomResponse::~ApplyQuitRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyQuitRoomResponse)
  SharedDtor();
}

void ApplyQuitRoomResponse::SharedDtor() {
}

void ApplyQuitRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyQuitRoomResponse& ApplyQuitRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyQuitRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyQuitRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyQuitRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyQuitRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyQuitRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyQuitRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyQuitRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyQuitRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyQuitRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyQuitRoomResponse)
}

::google::protobuf::uint8* ApplyQuitRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyQuitRoomResponse)
  return target;
}

size_t ApplyQuitRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyQuitRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyQuitRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyQuitRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyQuitRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyQuitRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyQuitRoomResponse)
    MergeFrom(*source);
  }
}

void ApplyQuitRoomResponse::MergeFrom(const ApplyQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyQuitRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyQuitRoomResponse::CopyFrom(const ApplyQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyQuitRoomResponse::IsInitialized() const {
  return true;
}

void ApplyQuitRoomResponse::Swap(ApplyQuitRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyQuitRoomResponse::InternalSwap(ApplyQuitRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyQuitRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerQuitRoomRequest::InitAsDefaultInstance() {
}
class PlayerQuitRoomRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerQuitRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_quitreason(PlayerQuitRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuitRoomRequest::kUserIdFieldNumber;
const int PlayerQuitRoomRequest::kQuitReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitRoomRequest::PlayerQuitRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerQuitRoomRequest)
}
PlayerQuitRoomRequest::PlayerQuitRoomRequest(const PlayerQuitRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&quitreason_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(quitreason_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerQuitRoomRequest)
}

void PlayerQuitRoomRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quitreason_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(quitreason_));
}

PlayerQuitRoomRequest::~PlayerQuitRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerQuitRoomRequest)
  SharedDtor();
}

void PlayerQuitRoomRequest::SharedDtor() {
}

void PlayerQuitRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerQuitRoomRequest& PlayerQuitRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerQuitRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerQuitRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quitreason_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(quitreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerQuitRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerQuitRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 quitReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_quitreason(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerQuitRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerQuitRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quitReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_quitreason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quitreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerQuitRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerQuitRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerQuitRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 quitReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quitreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerQuitRoomRequest)
}

::google::protobuf::uint8* PlayerQuitRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 quitReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quitreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerQuitRoomRequest)
  return target;
}

size_t PlayerQuitRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerQuitRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 quitReason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quitreason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuitRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerQuitRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerQuitRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerQuitRoomRequest)
    MergeFrom(*source);
  }
}

void PlayerQuitRoomRequest::MergeFrom(const PlayerQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      quitreason_ = from.quitreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerQuitRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitRoomRequest::CopyFrom(const PlayerQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitRoomRequest::IsInitialized() const {
  return true;
}

void PlayerQuitRoomRequest::Swap(PlayerQuitRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitRoomRequest::InternalSwap(PlayerQuitRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(quitreason_, other->quitreason_);
}

::google::protobuf::Metadata PlayerQuitRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerQuitRoomResponse::InitAsDefaultInstance() {
}
class PlayerQuitRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitRoomResponse::PlayerQuitRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerQuitRoomResponse)
}
PlayerQuitRoomResponse::PlayerQuitRoomResponse(const PlayerQuitRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerQuitRoomResponse)
}

void PlayerQuitRoomResponse::SharedCtor() {
}

PlayerQuitRoomResponse::~PlayerQuitRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerQuitRoomResponse)
  SharedDtor();
}

void PlayerQuitRoomResponse::SharedDtor() {
}

void PlayerQuitRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerQuitRoomResponse& PlayerQuitRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerQuitRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerQuitRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerQuitRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerQuitRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerQuitRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerQuitRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerQuitRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerQuitRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerQuitRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerQuitRoomResponse)
}

::google::protobuf::uint8* PlayerQuitRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerQuitRoomResponse)
  return target;
}

size_t PlayerQuitRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerQuitRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerQuitRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerQuitRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerQuitRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerQuitRoomResponse)
    MergeFrom(*source);
  }
}

void PlayerQuitRoomResponse::MergeFrom(const PlayerQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerQuitRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitRoomResponse::CopyFrom(const PlayerQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitRoomResponse::IsInitialized() const {
  return true;
}

void PlayerQuitRoomResponse::Swap(PlayerQuitRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitRoomResponse::InternalSwap(PlayerQuitRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerQuitRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerChips::InitAsDefaultInstance() {
}
class PlayerChips::HasBitSetters {
 public:
  static void set_has_userid(PlayerChips* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currentchips(PlayerChips* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerChips::kUserIdFieldNumber;
const int PlayerChips::kCurrentChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChips::PlayerChips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerChips)
}
PlayerChips::PlayerChips(const PlayerChips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentchips_, &from.currentchips_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&currentchips_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerChips)
}

void PlayerChips::SharedCtor() {
  ::memset(&currentchips_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&currentchips_)) + sizeof(userid_));
}

PlayerChips::~PlayerChips() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerChips)
  SharedDtor();
}

void PlayerChips::SharedDtor() {
}

void PlayerChips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChips& PlayerChips::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChips_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerChips::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerChips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&currentchips_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&currentchips_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChips::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChips*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int64 currentChips = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentchips(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerChips)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currentChips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_currentchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerChips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerChips)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerChips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int64 currentChips = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->currentchips(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerChips)
}

::google::protobuf::uint8* PlayerChips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerChips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int64 currentChips = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->currentchips(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerChips)
  return target;
}

size_t PlayerChips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerChips)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 currentChips = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentchips());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerChips)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChips* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerChips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerChips)
    MergeFrom(*source);
  }
}

void PlayerChips::MergeFrom(const PlayerChips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerChips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      currentchips_ = from.currentchips_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerChips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerChips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChips::CopyFrom(const PlayerChips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerChips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChips::IsInitialized() const {
  return true;
}

void PlayerChips::Swap(PlayerChips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChips::InternalSwap(PlayerChips* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(currentchips_, other->currentchips_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerChips::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerBuyinRequest::InitAsDefaultInstance() {
}
class PlayerBuyinRequest::HasBitSetters {
 public:
  static void set_has_buyresult(PlayerBuyinRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_buyincount(PlayerBuyinRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerBuyinRequest::kBuyResultFieldNumber;
const int PlayerBuyinRequest::kBuyinCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerBuyinRequest::PlayerBuyinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerBuyinRequest)
}
PlayerBuyinRequest::PlayerBuyinRequest(const PlayerBuyinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buyincount_, &from.buyincount_,
    static_cast<size_t>(reinterpret_cast<char*>(&buyresult_) -
    reinterpret_cast<char*>(&buyincount_)) + sizeof(buyresult_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerBuyinRequest)
}

void PlayerBuyinRequest::SharedCtor() {
  ::memset(&buyincount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buyresult_) -
      reinterpret_cast<char*>(&buyincount_)) + sizeof(buyresult_));
}

PlayerBuyinRequest::~PlayerBuyinRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerBuyinRequest)
  SharedDtor();
}

void PlayerBuyinRequest::SharedDtor() {
}

void PlayerBuyinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerBuyinRequest& PlayerBuyinRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerBuyinRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerBuyinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerBuyinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&buyincount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyresult_) -
        reinterpret_cast<char*>(&buyincount_)) + sizeof(buyresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerBuyinRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerBuyinRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool buyResult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_buyresult(value);
        break;
      }
      // optional int64 buyinCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_buyincount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerBuyinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerBuyinRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool buyResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_buyresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 buyinCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_buyincount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerBuyinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerBuyinRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerBuyinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerBuyinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool buyResult = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->buyresult(), output);
  }

  // optional int64 buyinCount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->buyincount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerBuyinRequest)
}

::google::protobuf::uint8* PlayerBuyinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerBuyinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool buyResult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->buyresult(), target);
  }

  // optional int64 buyinCount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->buyincount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerBuyinRequest)
  return target;
}

size_t PlayerBuyinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerBuyinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 buyinCount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyincount());
    }

    // optional bool buyResult = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerBuyinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerBuyinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerBuyinRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerBuyinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerBuyinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerBuyinRequest)
    MergeFrom(*source);
  }
}

void PlayerBuyinRequest::MergeFrom(const PlayerBuyinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerBuyinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      buyincount_ = from.buyincount_;
    }
    if (cached_has_bits & 0x00000002u) {
      buyresult_ = from.buyresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerBuyinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerBuyinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBuyinRequest::CopyFrom(const PlayerBuyinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerBuyinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBuyinRequest::IsInitialized() const {
  return true;
}

void PlayerBuyinRequest::Swap(PlayerBuyinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerBuyinRequest::InternalSwap(PlayerBuyinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buyincount_, other->buyincount_);
  swap(buyresult_, other->buyresult_);
}

::google::protobuf::Metadata PlayerBuyinRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerBuyinResponse::InitAsDefaultInstance() {
}
class PlayerBuyinResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerBuyinResponse::PlayerBuyinResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerBuyinResponse)
}
PlayerBuyinResponse::PlayerBuyinResponse(const PlayerBuyinResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerBuyinResponse)
}

void PlayerBuyinResponse::SharedCtor() {
}

PlayerBuyinResponse::~PlayerBuyinResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerBuyinResponse)
  SharedDtor();
}

void PlayerBuyinResponse::SharedDtor() {
}

void PlayerBuyinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerBuyinResponse& PlayerBuyinResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerBuyinResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerBuyinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerBuyinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerBuyinResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerBuyinResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerBuyinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerBuyinResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerBuyinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerBuyinResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerBuyinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerBuyinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerBuyinResponse)
}

::google::protobuf::uint8* PlayerBuyinResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerBuyinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerBuyinResponse)
  return target;
}

size_t PlayerBuyinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerBuyinResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerBuyinResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerBuyinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerBuyinResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerBuyinResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerBuyinResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerBuyinResponse)
    MergeFrom(*source);
  }
}

void PlayerBuyinResponse::MergeFrom(const PlayerBuyinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerBuyinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerBuyinResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerBuyinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBuyinResponse::CopyFrom(const PlayerBuyinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerBuyinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBuyinResponse::IsInitialized() const {
  return true;
}

void PlayerBuyinResponse::Swap(PlayerBuyinResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerBuyinResponse::InternalSwap(PlayerBuyinResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerBuyinResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyFaceShowRequest::InitAsDefaultInstance() {
}
class ApplyFaceShowRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyFaceShowRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyFaceShowRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_faceid(ApplyFaceShowRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyFaceShowRequest::kUserIdFieldNumber;
const int ApplyFaceShowRequest::kRoomIdFieldNumber;
const int ApplyFaceShowRequest::kFaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyFaceShowRequest::ApplyFaceShowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyFaceShowRequest)
}
ApplyFaceShowRequest::ApplyFaceShowRequest(const ApplyFaceShowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&faceid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyFaceShowRequest)
}

void ApplyFaceShowRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&faceid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
}

ApplyFaceShowRequest::~ApplyFaceShowRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyFaceShowRequest)
  SharedDtor();
}

void ApplyFaceShowRequest::SharedDtor() {
}

void ApplyFaceShowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyFaceShowRequest& ApplyFaceShowRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyFaceShowRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyFaceShowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&faceid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyFaceShowRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyFaceShowRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 faceId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_faceid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyFaceShowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyFaceShowRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 faceId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_faceid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyFaceShowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyFaceShowRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyFaceShowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 faceId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->faceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyFaceShowRequest)
}

::google::protobuf::uint8* ApplyFaceShowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 faceId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->faceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyFaceShowRequest)
  return target;
}

size_t ApplyFaceShowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyFaceShowRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 faceId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyFaceShowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyFaceShowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyFaceShowRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyFaceShowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyFaceShowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyFaceShowRequest)
    MergeFrom(*source);
  }
}

void ApplyFaceShowRequest::MergeFrom(const ApplyFaceShowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyFaceShowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      faceid_ = from.faceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyFaceShowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyFaceShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFaceShowRequest::CopyFrom(const ApplyFaceShowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyFaceShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFaceShowRequest::IsInitialized() const {
  return true;
}

void ApplyFaceShowRequest::Swap(ApplyFaceShowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyFaceShowRequest::InternalSwap(ApplyFaceShowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(faceid_, other->faceid_);
}

::google::protobuf::Metadata ApplyFaceShowRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyFaceShowResponse::InitAsDefaultInstance() {
}
class ApplyFaceShowResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyFaceShowResponse::ApplyFaceShowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyFaceShowResponse)
}
ApplyFaceShowResponse::ApplyFaceShowResponse(const ApplyFaceShowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyFaceShowResponse)
}

void ApplyFaceShowResponse::SharedCtor() {
}

ApplyFaceShowResponse::~ApplyFaceShowResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyFaceShowResponse)
  SharedDtor();
}

void ApplyFaceShowResponse::SharedDtor() {
}

void ApplyFaceShowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyFaceShowResponse& ApplyFaceShowResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyFaceShowResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyFaceShowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyFaceShowResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyFaceShowResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyFaceShowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyFaceShowResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyFaceShowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyFaceShowResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyFaceShowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyFaceShowResponse)
}

::google::protobuf::uint8* ApplyFaceShowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyFaceShowResponse)
  return target;
}

size_t ApplyFaceShowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyFaceShowResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyFaceShowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyFaceShowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyFaceShowResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyFaceShowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyFaceShowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyFaceShowResponse)
    MergeFrom(*source);
  }
}

void ApplyFaceShowResponse::MergeFrom(const ApplyFaceShowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyFaceShowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyFaceShowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyFaceShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFaceShowResponse::CopyFrom(const ApplyFaceShowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyFaceShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFaceShowResponse::IsInitialized() const {
  return true;
}

void ApplyFaceShowResponse::Swap(ApplyFaceShowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyFaceShowResponse::InternalSwap(ApplyFaceShowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyFaceShowResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerFaceShowRequest::InitAsDefaultInstance() {
}
class PlayerFaceShowRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerFaceShowRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_faceid(PlayerFaceShowRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerFaceShowRequest::kUserIdFieldNumber;
const int PlayerFaceShowRequest::kFaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerFaceShowRequest::PlayerFaceShowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerFaceShowRequest)
}
PlayerFaceShowRequest::PlayerFaceShowRequest(const PlayerFaceShowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&faceid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerFaceShowRequest)
}

void PlayerFaceShowRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&faceid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
}

PlayerFaceShowRequest::~PlayerFaceShowRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerFaceShowRequest)
  SharedDtor();
}

void PlayerFaceShowRequest::SharedDtor() {
}

void PlayerFaceShowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerFaceShowRequest& PlayerFaceShowRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerFaceShowRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerFaceShowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&faceid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(faceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerFaceShowRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerFaceShowRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 faceId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_faceid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerFaceShowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerFaceShowRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 faceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_faceid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerFaceShowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerFaceShowRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerFaceShowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 faceId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->faceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerFaceShowRequest)
}

::google::protobuf::uint8* PlayerFaceShowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerFaceShowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 faceId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->faceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerFaceShowRequest)
  return target;
}

size_t PlayerFaceShowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerFaceShowRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 faceId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFaceShowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerFaceShowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerFaceShowRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerFaceShowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerFaceShowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerFaceShowRequest)
    MergeFrom(*source);
  }
}

void PlayerFaceShowRequest::MergeFrom(const PlayerFaceShowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerFaceShowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      faceid_ = from.faceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerFaceShowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerFaceShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFaceShowRequest::CopyFrom(const PlayerFaceShowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerFaceShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFaceShowRequest::IsInitialized() const {
  return true;
}

void PlayerFaceShowRequest::Swap(PlayerFaceShowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerFaceShowRequest::InternalSwap(PlayerFaceShowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(faceid_, other->faceid_);
}

::google::protobuf::Metadata PlayerFaceShowRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerFaceShowResponse::InitAsDefaultInstance() {
}
class PlayerFaceShowResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerFaceShowResponse::PlayerFaceShowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerFaceShowResponse)
}
PlayerFaceShowResponse::PlayerFaceShowResponse(const PlayerFaceShowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerFaceShowResponse)
}

void PlayerFaceShowResponse::SharedCtor() {
}

PlayerFaceShowResponse::~PlayerFaceShowResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerFaceShowResponse)
  SharedDtor();
}

void PlayerFaceShowResponse::SharedDtor() {
}

void PlayerFaceShowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerFaceShowResponse& PlayerFaceShowResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerFaceShowResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerFaceShowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerFaceShowResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerFaceShowResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerFaceShowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerFaceShowResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerFaceShowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerFaceShowResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerFaceShowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerFaceShowResponse)
}

::google::protobuf::uint8* PlayerFaceShowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerFaceShowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerFaceShowResponse)
  return target;
}

size_t PlayerFaceShowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerFaceShowResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFaceShowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerFaceShowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerFaceShowResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerFaceShowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerFaceShowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerFaceShowResponse)
    MergeFrom(*source);
  }
}

void PlayerFaceShowResponse::MergeFrom(const PlayerFaceShowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerFaceShowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerFaceShowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerFaceShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFaceShowResponse::CopyFrom(const PlayerFaceShowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerFaceShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFaceShowResponse::IsInitialized() const {
  return true;
}

void PlayerFaceShowResponse::Swap(PlayerFaceShowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerFaceShowResponse::InternalSwap(PlayerFaceShowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerFaceShowResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyChatRequest::InitAsDefaultInstance() {
}
class ApplyChatRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_isshortcut(ApplyChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chatcontent(ApplyChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyChatRequest::kUserIdFieldNumber;
const int ApplyChatRequest::kRoomIdFieldNumber;
const int ApplyChatRequest::kIsShortcutFieldNumber;
const int ApplyChatRequest::kChatContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyChatRequest::ApplyChatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyChatRequest)
}
ApplyChatRequest::ApplyChatRequest(const ApplyChatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatcontent()) {
    chatcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatcontent_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshortcut_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(isshortcut_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyChatRequest)
}

void ApplyChatRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyChatRequest_GameMsg_2eproto.base);
  chatcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshortcut_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(isshortcut_));
}

ApplyChatRequest::~ApplyChatRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyChatRequest)
  SharedDtor();
}

void ApplyChatRequest::SharedDtor() {
  chatcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyChatRequest& ApplyChatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyChatRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chatcontent_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isshortcut_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(isshortcut_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyChatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyChatRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 IsShortcut = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_isshortcut(value);
        break;
      }
      // optional bytes chatContent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_chatcontent();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyChatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 IsShortcut = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_isshortcut(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshortcut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chatContent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chatcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyChatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 IsShortcut = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isshortcut(), output);
  }

  // optional bytes chatContent = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chatcontent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyChatRequest)
}

::google::protobuf::uint8* ApplyChatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 IsShortcut = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isshortcut(), target);
  }

  // optional bytes chatContent = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chatcontent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyChatRequest)
  return target;
}

size_t ApplyChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyChatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes chatContent = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chatcontent());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 IsShortcut = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshortcut());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyChatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyChatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyChatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyChatRequest)
    MergeFrom(*source);
  }
}

void ApplyChatRequest::MergeFrom(const ApplyChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chatcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatcontent_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      isshortcut_ = from.isshortcut_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyChatRequest::CopyFrom(const ApplyChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyChatRequest::IsInitialized() const {
  return true;
}

void ApplyChatRequest::Swap(ApplyChatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyChatRequest::InternalSwap(ApplyChatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chatcontent_.Swap(&other->chatcontent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(isshortcut_, other->isshortcut_);
}

::google::protobuf::Metadata ApplyChatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyChatResponse::InitAsDefaultInstance() {
}
class ApplyChatResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyChatResponse::ApplyChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyChatResponse)
}
ApplyChatResponse::ApplyChatResponse(const ApplyChatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyChatResponse)
}

void ApplyChatResponse::SharedCtor() {
}

ApplyChatResponse::~ApplyChatResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyChatResponse)
  SharedDtor();
}

void ApplyChatResponse::SharedDtor() {
}

void ApplyChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyChatResponse& ApplyChatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyChatResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyChatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyChatResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyChatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyChatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyChatResponse)
}

::google::protobuf::uint8* ApplyChatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyChatResponse)
  return target;
}

size_t ApplyChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyChatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyChatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyChatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyChatResponse)
    MergeFrom(*source);
  }
}

void ApplyChatResponse::MergeFrom(const ApplyChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyChatResponse::CopyFrom(const ApplyChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyChatResponse::IsInitialized() const {
  return true;
}

void ApplyChatResponse::Swap(ApplyChatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyChatResponse::InternalSwap(ApplyChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyChatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerChatRequest::InitAsDefaultInstance() {
}
class PlayerChatRequest::HasBitSetters {
 public:
  static void set_has_isshortcut(PlayerChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_chatcontent(PlayerChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chatuserid(PlayerChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chatusername(PlayerChatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerChatRequest::kIsShortcutFieldNumber;
const int PlayerChatRequest::kChatContentFieldNumber;
const int PlayerChatRequest::kChatUserIdFieldNumber;
const int PlayerChatRequest::kChatUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChatRequest::PlayerChatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerChatRequest)
}
PlayerChatRequest::PlayerChatRequest(const PlayerChatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatcontent()) {
    chatcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatcontent_);
  }
  chatusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatusername()) {
    chatusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatusername_);
  }
  ::memcpy(&isshortcut_, &from.isshortcut_,
    static_cast<size_t>(reinterpret_cast<char*>(&chatuserid_) -
    reinterpret_cast<char*>(&isshortcut_)) + sizeof(chatuserid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerChatRequest)
}

void PlayerChatRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerChatRequest_GameMsg_2eproto.base);
  chatcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&isshortcut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatuserid_) -
      reinterpret_cast<char*>(&isshortcut_)) + sizeof(chatuserid_));
}

PlayerChatRequest::~PlayerChatRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerChatRequest)
  SharedDtor();
}

void PlayerChatRequest::SharedDtor() {
  chatcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerChatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChatRequest& PlayerChatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChatRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chatcontent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chatusername_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&isshortcut_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chatuserid_) -
        reinterpret_cast<char*>(&isshortcut_)) + sizeof(chatuserid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChatRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 isShortcut = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_isshortcut(value);
        break;
      }
      // optional bytes chatContent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_chatcontent();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional int32 chatUserId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_chatuserid(value);
        break;
      }
      // optional bytes chatUserName = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_chatusername();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerChatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isShortcut = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_isshortcut(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshortcut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chatContent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chatcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chatUserId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_chatuserid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chatUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chatusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerChatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 isShortcut = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isshortcut(), output);
  }

  // optional bytes chatContent = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chatcontent(), output);
  }

  // optional int32 chatUserId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chatuserid(), output);
  }

  // optional bytes chatUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chatusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerChatRequest)
}

::google::protobuf::uint8* PlayerChatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerChatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 isShortcut = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isshortcut(), target);
  }

  // optional bytes chatContent = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chatcontent(), target);
  }

  // optional int32 chatUserId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chatuserid(), target);
  }

  // optional bytes chatUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chatusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerChatRequest)
  return target;
}

size_t PlayerChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerChatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes chatContent = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chatcontent());
    }

    // optional bytes chatUserName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chatusername());
    }

    // optional int32 isShortcut = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshortcut());
    }

    // optional int32 chatUserId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatuserid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerChatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerChatRequest)
    MergeFrom(*source);
  }
}

void PlayerChatRequest::MergeFrom(const PlayerChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerChatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chatcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatcontent_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      chatusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      isshortcut_ = from.isshortcut_;
    }
    if (cached_has_bits & 0x00000008u) {
      chatuserid_ = from.chatuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChatRequest::CopyFrom(const PlayerChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChatRequest::IsInitialized() const {
  return true;
}

void PlayerChatRequest::Swap(PlayerChatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChatRequest::InternalSwap(PlayerChatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chatcontent_.Swap(&other->chatcontent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chatusername_.Swap(&other->chatusername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isshortcut_, other->isshortcut_);
  swap(chatuserid_, other->chatuserid_);
}

::google::protobuf::Metadata PlayerChatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerChatResponse::InitAsDefaultInstance() {
}
class PlayerChatResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChatResponse::PlayerChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerChatResponse)
}
PlayerChatResponse::PlayerChatResponse(const PlayerChatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerChatResponse)
}

void PlayerChatResponse::SharedCtor() {
}

PlayerChatResponse::~PlayerChatResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerChatResponse)
  SharedDtor();
}

void PlayerChatResponse::SharedDtor() {
}

void PlayerChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChatResponse& PlayerChatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChatResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChatResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerChatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerChatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerChatResponse)
}

::google::protobuf::uint8* PlayerChatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerChatResponse)
  return target;
}

size_t PlayerChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerChatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerChatResponse)
    MergeFrom(*source);
  }
}

void PlayerChatResponse::MergeFrom(const PlayerChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChatResponse::CopyFrom(const PlayerChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChatResponse::IsInitialized() const {
  return true;
}

void PlayerChatResponse::Swap(PlayerChatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChatResponse::InternalSwap(PlayerChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerChatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyUsePropsRequest::InitAsDefaultInstance() {
}
class ApplyUsePropsRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_acceptuserid(ApplyUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_propsname(ApplyUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyUsePropsRequest::kUserIdFieldNumber;
const int ApplyUsePropsRequest::kRoomIdFieldNumber;
const int ApplyUsePropsRequest::kAcceptUserIdFieldNumber;
const int ApplyUsePropsRequest::kPropsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyUsePropsRequest::ApplyUsePropsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyUsePropsRequest)
}
ApplyUsePropsRequest::ApplyUsePropsRequest(const ApplyUsePropsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  propsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propsname()) {
    propsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptuserid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(acceptuserid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyUsePropsRequest)
}

void ApplyUsePropsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyUsePropsRequest_GameMsg_2eproto.base);
  propsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptuserid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(acceptuserid_));
}

ApplyUsePropsRequest::~ApplyUsePropsRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyUsePropsRequest)
  SharedDtor();
}

void ApplyUsePropsRequest::SharedDtor() {
  propsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyUsePropsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyUsePropsRequest& ApplyUsePropsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyUsePropsRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyUsePropsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    propsname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptuserid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(acceptuserid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyUsePropsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyUsePropsRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 acceptUserId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_acceptuserid(value);
        break;
      }
      // optional bytes propsName = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_propsname();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyUsePropsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyUsePropsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptUserId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_acceptuserid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes propsName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_propsname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyUsePropsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyUsePropsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyUsePropsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 acceptUserId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->acceptuserid(), output);
  }

  // optional bytes propsName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->propsname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyUsePropsRequest)
}

::google::protobuf::uint8* ApplyUsePropsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 acceptUserId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->acceptuserid(), target);
  }

  // optional bytes propsName = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->propsname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyUsePropsRequest)
  return target;
}

size_t ApplyUsePropsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyUsePropsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes propsName = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->propsname());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 acceptUserId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptuserid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyUsePropsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyUsePropsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyUsePropsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyUsePropsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyUsePropsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyUsePropsRequest)
    MergeFrom(*source);
  }
}

void ApplyUsePropsRequest::MergeFrom(const ApplyUsePropsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyUsePropsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      propsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsname_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      acceptuserid_ = from.acceptuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyUsePropsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyUsePropsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyUsePropsRequest::CopyFrom(const ApplyUsePropsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyUsePropsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyUsePropsRequest::IsInitialized() const {
  return true;
}

void ApplyUsePropsRequest::Swap(ApplyUsePropsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyUsePropsRequest::InternalSwap(ApplyUsePropsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  propsname_.Swap(&other->propsname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(acceptuserid_, other->acceptuserid_);
}

::google::protobuf::Metadata ApplyUsePropsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyUsePropsResponse::InitAsDefaultInstance() {
}
class ApplyUsePropsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyUsePropsResponse::ApplyUsePropsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyUsePropsResponse)
}
ApplyUsePropsResponse::ApplyUsePropsResponse(const ApplyUsePropsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyUsePropsResponse)
}

void ApplyUsePropsResponse::SharedCtor() {
}

ApplyUsePropsResponse::~ApplyUsePropsResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyUsePropsResponse)
  SharedDtor();
}

void ApplyUsePropsResponse::SharedDtor() {
}

void ApplyUsePropsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyUsePropsResponse& ApplyUsePropsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyUsePropsResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyUsePropsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyUsePropsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyUsePropsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyUsePropsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyUsePropsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyUsePropsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyUsePropsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyUsePropsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyUsePropsResponse)
}

::google::protobuf::uint8* ApplyUsePropsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyUsePropsResponse)
  return target;
}

size_t ApplyUsePropsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyUsePropsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyUsePropsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyUsePropsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyUsePropsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyUsePropsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyUsePropsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyUsePropsResponse)
    MergeFrom(*source);
  }
}

void ApplyUsePropsResponse::MergeFrom(const ApplyUsePropsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyUsePropsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyUsePropsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyUsePropsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyUsePropsResponse::CopyFrom(const ApplyUsePropsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyUsePropsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyUsePropsResponse::IsInitialized() const {
  return true;
}

void ApplyUsePropsResponse::Swap(ApplyUsePropsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyUsePropsResponse::InternalSwap(ApplyUsePropsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyUsePropsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerUsePropsRequest::InitAsDefaultInstance() {
}
class PlayerUsePropsRequest::HasBitSetters {
 public:
  static void set_has_applyuserid(PlayerUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_acceptuserid(PlayerUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_propsname(PlayerUsePropsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUsePropsRequest::kApplyUserIdFieldNumber;
const int PlayerUsePropsRequest::kAcceptUserIdFieldNumber;
const int PlayerUsePropsRequest::kPropsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUsePropsRequest::PlayerUsePropsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerUsePropsRequest)
}
PlayerUsePropsRequest::PlayerUsePropsRequest(const PlayerUsePropsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  propsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propsname()) {
    propsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsname_);
  }
  ::memcpy(&applyuserid_, &from.applyuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptuserid_) -
    reinterpret_cast<char*>(&applyuserid_)) + sizeof(acceptuserid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerUsePropsRequest)
}

void PlayerUsePropsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerUsePropsRequest_GameMsg_2eproto.base);
  propsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applyuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptuserid_) -
      reinterpret_cast<char*>(&applyuserid_)) + sizeof(acceptuserid_));
}

PlayerUsePropsRequest::~PlayerUsePropsRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerUsePropsRequest)
  SharedDtor();
}

void PlayerUsePropsRequest::SharedDtor() {
  propsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerUsePropsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerUsePropsRequest& PlayerUsePropsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerUsePropsRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerUsePropsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    propsname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&applyuserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptuserid_) -
        reinterpret_cast<char*>(&applyuserid_)) + sizeof(acceptuserid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerUsePropsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerUsePropsRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 applyUserId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_applyuserid(value);
        break;
      }
      // optional int32 acceptUserId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_acceptuserid(value);
        break;
      }
      // optional bytes propsName = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_propsname();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerUsePropsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerUsePropsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 applyUserId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_applyuserid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applyuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptUserId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_acceptuserid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes propsName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_propsname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerUsePropsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerUsePropsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerUsePropsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 applyUserId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->applyuserid(), output);
  }

  // optional int32 acceptUserId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->acceptuserid(), output);
  }

  // optional bytes propsName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->propsname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerUsePropsRequest)
}

::google::protobuf::uint8* PlayerUsePropsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerUsePropsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 applyUserId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->applyuserid(), target);
  }

  // optional int32 acceptUserId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->acceptuserid(), target);
  }

  // optional bytes propsName = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->propsname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerUsePropsRequest)
  return target;
}

size_t PlayerUsePropsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerUsePropsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes propsName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->propsname());
    }

    // optional int32 applyUserId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applyuserid());
    }

    // optional int32 acceptUserId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptuserid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerUsePropsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerUsePropsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUsePropsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerUsePropsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerUsePropsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerUsePropsRequest)
    MergeFrom(*source);
  }
}

void PlayerUsePropsRequest::MergeFrom(const PlayerUsePropsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerUsePropsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      propsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propsname_);
    }
    if (cached_has_bits & 0x00000002u) {
      applyuserid_ = from.applyuserid_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceptuserid_ = from.acceptuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerUsePropsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerUsePropsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUsePropsRequest::CopyFrom(const PlayerUsePropsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerUsePropsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUsePropsRequest::IsInitialized() const {
  return true;
}

void PlayerUsePropsRequest::Swap(PlayerUsePropsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUsePropsRequest::InternalSwap(PlayerUsePropsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  propsname_.Swap(&other->propsname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(applyuserid_, other->applyuserid_);
  swap(acceptuserid_, other->acceptuserid_);
}

::google::protobuf::Metadata PlayerUsePropsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerUsePropsResponse::InitAsDefaultInstance() {
}
class PlayerUsePropsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUsePropsResponse::PlayerUsePropsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerUsePropsResponse)
}
PlayerUsePropsResponse::PlayerUsePropsResponse(const PlayerUsePropsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerUsePropsResponse)
}

void PlayerUsePropsResponse::SharedCtor() {
}

PlayerUsePropsResponse::~PlayerUsePropsResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerUsePropsResponse)
  SharedDtor();
}

void PlayerUsePropsResponse::SharedDtor() {
}

void PlayerUsePropsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerUsePropsResponse& PlayerUsePropsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerUsePropsResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerUsePropsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerUsePropsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerUsePropsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerUsePropsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerUsePropsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerUsePropsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerUsePropsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerUsePropsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerUsePropsResponse)
}

::google::protobuf::uint8* PlayerUsePropsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerUsePropsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerUsePropsResponse)
  return target;
}

size_t PlayerUsePropsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerUsePropsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerUsePropsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerUsePropsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUsePropsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerUsePropsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerUsePropsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerUsePropsResponse)
    MergeFrom(*source);
  }
}

void PlayerUsePropsResponse::MergeFrom(const PlayerUsePropsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerUsePropsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerUsePropsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerUsePropsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUsePropsResponse::CopyFrom(const PlayerUsePropsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerUsePropsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUsePropsResponse::IsInitialized() const {
  return true;
}

void PlayerUsePropsResponse::Swap(PlayerUsePropsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUsePropsResponse::InternalSwap(PlayerUsePropsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerUsePropsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentGiftRequest::InitAsDefaultInstance() {
}
class ApplyPresentGiftRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyPresentGiftRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyPresentGiftRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_giftid(ApplyPresentGiftRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPresentGiftRequest::kUserIdFieldNumber;
const int ApplyPresentGiftRequest::kRoomIdFieldNumber;
const int ApplyPresentGiftRequest::kGiftIdFieldNumber;
const int ApplyPresentGiftRequest::kAcceptorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentGiftRequest::ApplyPresentGiftRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentGiftRequest)
}
ApplyPresentGiftRequest::ApplyPresentGiftRequest(const ApplyPresentGiftRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acceptorid_(from.acceptorid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&giftid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentGiftRequest)
}

void ApplyPresentGiftRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&giftid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
}

ApplyPresentGiftRequest::~ApplyPresentGiftRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentGiftRequest)
  SharedDtor();
}

void ApplyPresentGiftRequest::SharedDtor() {
}

void ApplyPresentGiftRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentGiftRequest& ApplyPresentGiftRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentGiftRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentGiftRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceptorid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&giftid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentGiftRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentGiftRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 giftId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_giftid(value);
        break;
      }
      // repeated int32 acceptorId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_acceptorid(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_acceptorid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentGiftRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 giftId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_giftid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 acceptorId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_acceptorid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_acceptorid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentGiftRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentGiftRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 giftId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->giftid(), output);
  }

  // repeated int32 acceptorId = 4;
  for (int i = 0, n = this->acceptorid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->acceptorid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentGiftRequest)
}

::google::protobuf::uint8* ApplyPresentGiftRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 giftId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->giftid(), target);
  }

  // repeated int32 acceptorId = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->acceptorid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentGiftRequest)
  return target;
}

size_t ApplyPresentGiftRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentGiftRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 acceptorId = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->acceptorid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acceptorid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 giftId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentGiftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentGiftRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentGiftRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentGiftRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentGiftRequest)
    MergeFrom(*source);
  }
}

void ApplyPresentGiftRequest::MergeFrom(const ApplyPresentGiftRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentGiftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acceptorid_.MergeFrom(from.acceptorid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      giftid_ = from.giftid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyPresentGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentGiftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentGiftRequest::CopyFrom(const ApplyPresentGiftRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentGiftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentGiftRequest::IsInitialized() const {
  return true;
}

void ApplyPresentGiftRequest::Swap(ApplyPresentGiftRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentGiftRequest::InternalSwap(ApplyPresentGiftRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acceptorid_.InternalSwap(&other->acceptorid_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(giftid_, other->giftid_);
}

::google::protobuf::Metadata ApplyPresentGiftRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentGiftResponse::InitAsDefaultInstance() {
}
class ApplyPresentGiftResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentGiftResponse::ApplyPresentGiftResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentGiftResponse)
}
ApplyPresentGiftResponse::ApplyPresentGiftResponse(const ApplyPresentGiftResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentGiftResponse)
}

void ApplyPresentGiftResponse::SharedCtor() {
}

ApplyPresentGiftResponse::~ApplyPresentGiftResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentGiftResponse)
  SharedDtor();
}

void ApplyPresentGiftResponse::SharedDtor() {
}

void ApplyPresentGiftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentGiftResponse& ApplyPresentGiftResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentGiftResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentGiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentGiftResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentGiftResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentGiftResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentGiftResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentGiftResponse)
}

::google::protobuf::uint8* ApplyPresentGiftResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentGiftResponse)
  return target;
}

size_t ApplyPresentGiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentGiftResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentGiftResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentGiftResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentGiftResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentGiftResponse)
    MergeFrom(*source);
  }
}

void ApplyPresentGiftResponse::MergeFrom(const ApplyPresentGiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyPresentGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentGiftResponse::CopyFrom(const ApplyPresentGiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentGiftResponse::IsInitialized() const {
  return true;
}

void ApplyPresentGiftResponse::Swap(ApplyPresentGiftResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentGiftResponse::InternalSwap(ApplyPresentGiftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyPresentGiftResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentGiftRequest::InitAsDefaultInstance() {
}
class PlayerPresentGiftRequest::HasBitSetters {
 public:
  static void set_has_presenterid(PlayerPresentGiftRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_giftid(PlayerPresentGiftRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPresentGiftRequest::kPresenterIdFieldNumber;
const int PlayerPresentGiftRequest::kGiftIdFieldNumber;
const int PlayerPresentGiftRequest::kAcceptorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentGiftRequest::PlayerPresentGiftRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentGiftRequest)
}
PlayerPresentGiftRequest::PlayerPresentGiftRequest(const PlayerPresentGiftRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acceptorid_(from.acceptorid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&presenterid_, &from.presenterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&giftid_) -
    reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentGiftRequest)
}

void PlayerPresentGiftRequest::SharedCtor() {
  ::memset(&presenterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&giftid_) -
      reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
}

PlayerPresentGiftRequest::~PlayerPresentGiftRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentGiftRequest)
  SharedDtor();
}

void PlayerPresentGiftRequest::SharedDtor() {
}

void PlayerPresentGiftRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentGiftRequest& PlayerPresentGiftRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentGiftRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentGiftRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceptorid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&presenterid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&giftid_) -
        reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentGiftRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentGiftRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_presenterid(value);
        break;
      }
      // optional int32 giftId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_giftid(value);
        break;
      }
      // repeated int32 acceptorId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_acceptorid(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_acceptorid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentGiftRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_presenterid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 giftId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_giftid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 acceptorId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_acceptorid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_acceptorid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentGiftRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentGiftRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->presenterid(), output);
  }

  // optional int32 giftId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  // repeated int32 acceptorId = 3;
  for (int i = 0, n = this->acceptorid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->acceptorid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentGiftRequest)
}

::google::protobuf::uint8* PlayerPresentGiftRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentGiftRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->presenterid(), target);
  }

  // optional int32 giftId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftid(), target);
  }

  // repeated int32 acceptorId = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->acceptorid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentGiftRequest)
  return target;
}

size_t PlayerPresentGiftRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentGiftRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 acceptorId = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->acceptorid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acceptorid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 presenterId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenterid());
    }

    // optional int32 giftId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentGiftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentGiftRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentGiftRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentGiftRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentGiftRequest)
    MergeFrom(*source);
  }
}

void PlayerPresentGiftRequest::MergeFrom(const PlayerPresentGiftRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentGiftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acceptorid_.MergeFrom(from.acceptorid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      presenterid_ = from.presenterid_;
    }
    if (cached_has_bits & 0x00000002u) {
      giftid_ = from.giftid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPresentGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentGiftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentGiftRequest::CopyFrom(const PlayerPresentGiftRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentGiftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentGiftRequest::IsInitialized() const {
  return true;
}

void PlayerPresentGiftRequest::Swap(PlayerPresentGiftRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentGiftRequest::InternalSwap(PlayerPresentGiftRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acceptorid_.InternalSwap(&other->acceptorid_);
  swap(presenterid_, other->presenterid_);
  swap(giftid_, other->giftid_);
}

::google::protobuf::Metadata PlayerPresentGiftRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentGiftResponse::InitAsDefaultInstance() {
}
class PlayerPresentGiftResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentGiftResponse::PlayerPresentGiftResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentGiftResponse)
}
PlayerPresentGiftResponse::PlayerPresentGiftResponse(const PlayerPresentGiftResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentGiftResponse)
}

void PlayerPresentGiftResponse::SharedCtor() {
}

PlayerPresentGiftResponse::~PlayerPresentGiftResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentGiftResponse)
  SharedDtor();
}

void PlayerPresentGiftResponse::SharedDtor() {
}

void PlayerPresentGiftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentGiftResponse& PlayerPresentGiftResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentGiftResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentGiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentGiftResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentGiftResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentGiftResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentGiftResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentGiftResponse)
}

::google::protobuf::uint8* PlayerPresentGiftResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentGiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentGiftResponse)
  return target;
}

size_t PlayerPresentGiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentGiftResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentGiftResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentGiftResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentGiftResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentGiftResponse)
    MergeFrom(*source);
  }
}

void PlayerPresentGiftResponse::MergeFrom(const PlayerPresentGiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerPresentGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentGiftResponse::CopyFrom(const PlayerPresentGiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentGiftResponse::IsInitialized() const {
  return true;
}

void PlayerPresentGiftResponse::Swap(PlayerPresentGiftResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentGiftResponse::InternalSwap(PlayerPresentGiftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerPresentGiftResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentGiftNewInterRequest::InitAsDefaultInstance() {
}
class ApplyPresentGiftNewInterRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_giftid(ApplyPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_gifturl(ApplyPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPresentGiftNewInterRequest::kUserIdFieldNumber;
const int ApplyPresentGiftNewInterRequest::kRoomIdFieldNumber;
const int ApplyPresentGiftNewInterRequest::kGiftIdFieldNumber;
const int ApplyPresentGiftNewInterRequest::kGiftUrlFieldNumber;
const int ApplyPresentGiftNewInterRequest::kAcceptorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentGiftNewInterRequest::ApplyPresentGiftNewInterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentGiftNewInterRequest)
}
ApplyPresentGiftNewInterRequest::ApplyPresentGiftNewInterRequest(const ApplyPresentGiftNewInterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acceptorid_(from.acceptorid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gifturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gifturl()) {
    gifturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gifturl_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&giftid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentGiftNewInterRequest)
}

void ApplyPresentGiftNewInterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyPresentGiftNewInterRequest_GameMsg_2eproto.base);
  gifturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&giftid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
}

ApplyPresentGiftNewInterRequest::~ApplyPresentGiftNewInterRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentGiftNewInterRequest)
  SharedDtor();
}

void ApplyPresentGiftNewInterRequest::SharedDtor() {
  gifturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyPresentGiftNewInterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentGiftNewInterRequest& ApplyPresentGiftNewInterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentGiftNewInterRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentGiftNewInterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceptorid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gifturl_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&giftid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(giftid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentGiftNewInterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentGiftNewInterRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 giftId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_giftid(value);
        break;
      }
      // optional bytes giftUrl = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gifturl();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated int32 acceptorId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_acceptorid(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_acceptorid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentGiftNewInterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentGiftNewInterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 giftId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_giftid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes giftUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gifturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 acceptorId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_acceptorid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_acceptorid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentGiftNewInterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentGiftNewInterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentGiftNewInterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 giftId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->giftid(), output);
  }

  // optional bytes giftUrl = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->gifturl(), output);
  }

  // repeated int32 acceptorId = 5;
  for (int i = 0, n = this->acceptorid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->acceptorid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentGiftNewInterRequest)
}

::google::protobuf::uint8* ApplyPresentGiftNewInterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 giftId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->giftid(), target);
  }

  // optional bytes giftUrl = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->gifturl(), target);
  }

  // repeated int32 acceptorId = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->acceptorid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentGiftNewInterRequest)
  return target;
}

size_t ApplyPresentGiftNewInterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentGiftNewInterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 acceptorId = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->acceptorid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acceptorid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes giftUrl = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gifturl());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 giftId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentGiftNewInterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentGiftNewInterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentGiftNewInterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentGiftNewInterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentGiftNewInterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentGiftNewInterRequest)
    MergeFrom(*source);
  }
}

void ApplyPresentGiftNewInterRequest::MergeFrom(const ApplyPresentGiftNewInterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentGiftNewInterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acceptorid_.MergeFrom(from.acceptorid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gifturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gifturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      giftid_ = from.giftid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyPresentGiftNewInterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentGiftNewInterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentGiftNewInterRequest::CopyFrom(const ApplyPresentGiftNewInterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentGiftNewInterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentGiftNewInterRequest::IsInitialized() const {
  return true;
}

void ApplyPresentGiftNewInterRequest::Swap(ApplyPresentGiftNewInterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentGiftNewInterRequest::InternalSwap(ApplyPresentGiftNewInterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acceptorid_.InternalSwap(&other->acceptorid_);
  gifturl_.Swap(&other->gifturl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(giftid_, other->giftid_);
}

::google::protobuf::Metadata ApplyPresentGiftNewInterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentGiftNewInterResponse::InitAsDefaultInstance() {
}
class ApplyPresentGiftNewInterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentGiftNewInterResponse::ApplyPresentGiftNewInterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentGiftNewInterResponse)
}
ApplyPresentGiftNewInterResponse::ApplyPresentGiftNewInterResponse(const ApplyPresentGiftNewInterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentGiftNewInterResponse)
}

void ApplyPresentGiftNewInterResponse::SharedCtor() {
}

ApplyPresentGiftNewInterResponse::~ApplyPresentGiftNewInterResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentGiftNewInterResponse)
  SharedDtor();
}

void ApplyPresentGiftNewInterResponse::SharedDtor() {
}

void ApplyPresentGiftNewInterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentGiftNewInterResponse& ApplyPresentGiftNewInterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentGiftNewInterResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentGiftNewInterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentGiftNewInterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentGiftNewInterResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentGiftNewInterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentGiftNewInterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentGiftNewInterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentGiftNewInterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentGiftNewInterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentGiftNewInterResponse)
}

::google::protobuf::uint8* ApplyPresentGiftNewInterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentGiftNewInterResponse)
  return target;
}

size_t ApplyPresentGiftNewInterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentGiftNewInterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentGiftNewInterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentGiftNewInterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentGiftNewInterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentGiftNewInterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentGiftNewInterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentGiftNewInterResponse)
    MergeFrom(*source);
  }
}

void ApplyPresentGiftNewInterResponse::MergeFrom(const ApplyPresentGiftNewInterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentGiftNewInterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyPresentGiftNewInterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentGiftNewInterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentGiftNewInterResponse::CopyFrom(const ApplyPresentGiftNewInterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentGiftNewInterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentGiftNewInterResponse::IsInitialized() const {
  return true;
}

void ApplyPresentGiftNewInterResponse::Swap(ApplyPresentGiftNewInterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentGiftNewInterResponse::InternalSwap(ApplyPresentGiftNewInterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyPresentGiftNewInterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentChipsRequest::InitAsDefaultInstance() {
}
class ApplyPresentChipsRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_acceptorid(ApplyPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chipscount(ApplyPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPresentChipsRequest::kUserIdFieldNumber;
const int ApplyPresentChipsRequest::kRoomIdFieldNumber;
const int ApplyPresentChipsRequest::kAcceptorIdFieldNumber;
const int ApplyPresentChipsRequest::kChipsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentChipsRequest::ApplyPresentChipsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentChipsRequest)
}
ApplyPresentChipsRequest::ApplyPresentChipsRequest(const ApplyPresentChipsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptorid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(acceptorid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentChipsRequest)
}

void ApplyPresentChipsRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptorid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(acceptorid_));
}

ApplyPresentChipsRequest::~ApplyPresentChipsRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentChipsRequest)
  SharedDtor();
}

void ApplyPresentChipsRequest::SharedDtor() {
}

void ApplyPresentChipsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentChipsRequest& ApplyPresentChipsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentChipsRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentChipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptorid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(acceptorid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentChipsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentChipsRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 acceptorId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_acceptorid(value);
        break;
      }
      // optional int64 chipsCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipscount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentChipsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentChipsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptorId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_acceptorid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 chipsCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_chipscount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentChipsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentChipsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentChipsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 acceptorId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->acceptorid(), output);
  }

  // optional int64 chipsCount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->chipscount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentChipsRequest)
}

::google::protobuf::uint8* ApplyPresentChipsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 acceptorId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->acceptorid(), target);
  }

  // optional int64 chipsCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->chipscount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentChipsRequest)
  return target;
}

size_t ApplyPresentChipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentChipsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int64 chipsCount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chipscount());
    }

    // optional int32 acceptorId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptorid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentChipsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentChipsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentChipsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentChipsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentChipsRequest)
    MergeFrom(*source);
  }
}

void ApplyPresentChipsRequest::MergeFrom(const ApplyPresentChipsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chipscount_ = from.chipscount_;
    }
    if (cached_has_bits & 0x00000008u) {
      acceptorid_ = from.acceptorid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyPresentChipsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentChipsRequest::CopyFrom(const ApplyPresentChipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentChipsRequest::IsInitialized() const {
  return true;
}

void ApplyPresentChipsRequest::Swap(ApplyPresentChipsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentChipsRequest::InternalSwap(ApplyPresentChipsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(chipscount_, other->chipscount_);
  swap(acceptorid_, other->acceptorid_);
}

::google::protobuf::Metadata ApplyPresentChipsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPresentChipsResponse::InitAsDefaultInstance() {
}
class ApplyPresentChipsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPresentChipsResponse::ApplyPresentChipsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPresentChipsResponse)
}
ApplyPresentChipsResponse::ApplyPresentChipsResponse(const ApplyPresentChipsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPresentChipsResponse)
}

void ApplyPresentChipsResponse::SharedCtor() {
}

ApplyPresentChipsResponse::~ApplyPresentChipsResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPresentChipsResponse)
  SharedDtor();
}

void ApplyPresentChipsResponse::SharedDtor() {
}

void ApplyPresentChipsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPresentChipsResponse& ApplyPresentChipsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPresentChipsResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPresentChipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPresentChipsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPresentChipsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPresentChipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPresentChipsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPresentChipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPresentChipsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPresentChipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPresentChipsResponse)
}

::google::protobuf::uint8* ApplyPresentChipsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPresentChipsResponse)
  return target;
}

size_t ApplyPresentChipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPresentChipsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPresentChipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPresentChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPresentChipsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPresentChipsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPresentChipsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPresentChipsResponse)
    MergeFrom(*source);
  }
}

void ApplyPresentChipsResponse::MergeFrom(const ApplyPresentChipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPresentChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyPresentChipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPresentChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPresentChipsResponse::CopyFrom(const ApplyPresentChipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPresentChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPresentChipsResponse::IsInitialized() const {
  return true;
}

void ApplyPresentChipsResponse::Swap(ApplyPresentChipsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPresentChipsResponse::InternalSwap(ApplyPresentChipsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyPresentChipsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentChipsRequest::InitAsDefaultInstance() {
}
class PlayerPresentChipsRequest::HasBitSetters {
 public:
  static void set_has_presenterid(PlayerPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_acceptorid(PlayerPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chipscount(PlayerPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_presentercarry(PlayerPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_acceptorcarry(PlayerPresentChipsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPresentChipsRequest::kPresenterIdFieldNumber;
const int PlayerPresentChipsRequest::kAcceptorIdFieldNumber;
const int PlayerPresentChipsRequest::kChipsCountFieldNumber;
const int PlayerPresentChipsRequest::kPresenterCarryFieldNumber;
const int PlayerPresentChipsRequest::kAcceptorCarryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentChipsRequest::PlayerPresentChipsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentChipsRequest)
}
PlayerPresentChipsRequest::PlayerPresentChipsRequest(const PlayerPresentChipsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&presenterid_, &from.presenterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptorcarry_) -
    reinterpret_cast<char*>(&presenterid_)) + sizeof(acceptorcarry_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentChipsRequest)
}

void PlayerPresentChipsRequest::SharedCtor() {
  ::memset(&presenterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptorcarry_) -
      reinterpret_cast<char*>(&presenterid_)) + sizeof(acceptorcarry_));
}

PlayerPresentChipsRequest::~PlayerPresentChipsRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentChipsRequest)
  SharedDtor();
}

void PlayerPresentChipsRequest::SharedDtor() {
}

void PlayerPresentChipsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentChipsRequest& PlayerPresentChipsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentChipsRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentChipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&presenterid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptorcarry_) -
        reinterpret_cast<char*>(&presenterid_)) + sizeof(acceptorcarry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentChipsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentChipsRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_presenterid(value);
        break;
      }
      // optional int32 acceptorId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_acceptorid(value);
        break;
      }
      // optional int64 chipsCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipscount(value);
        break;
      }
      // optional int64 presenterCarry = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_presentercarry(value);
        break;
      }
      // optional int64 acceptorCarry = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_acceptorcarry(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentChipsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentChipsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_presenterid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptorId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_acceptorid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 chipsCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_chipscount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 presenterCarry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_presentercarry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &presentercarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 acceptorCarry = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_acceptorcarry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acceptorcarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentChipsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentChipsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentChipsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->presenterid(), output);
  }

  // optional int32 acceptorId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->acceptorid(), output);
  }

  // optional int64 chipsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chipscount(), output);
  }

  // optional int64 presenterCarry = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->presentercarry(), output);
  }

  // optional int64 acceptorCarry = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->acceptorcarry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentChipsRequest)
}

::google::protobuf::uint8* PlayerPresentChipsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->presenterid(), target);
  }

  // optional int32 acceptorId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->acceptorid(), target);
  }

  // optional int64 chipsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chipscount(), target);
  }

  // optional int64 presenterCarry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->presentercarry(), target);
  }

  // optional int64 acceptorCarry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->acceptorcarry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentChipsRequest)
  return target;
}

size_t PlayerPresentChipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentChipsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 presenterId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenterid());
    }

    // optional int32 acceptorId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptorid());
    }

    // optional int64 chipsCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chipscount());
    }

    // optional int64 presenterCarry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->presentercarry());
    }

    // optional int64 acceptorCarry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->acceptorcarry());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentChipsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentChipsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentChipsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentChipsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentChipsRequest)
    MergeFrom(*source);
  }
}

void PlayerPresentChipsRequest::MergeFrom(const PlayerPresentChipsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      presenterid_ = from.presenterid_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceptorid_ = from.acceptorid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chipscount_ = from.chipscount_;
    }
    if (cached_has_bits & 0x00000008u) {
      presentercarry_ = from.presentercarry_;
    }
    if (cached_has_bits & 0x00000010u) {
      acceptorcarry_ = from.acceptorcarry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPresentChipsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentChipsRequest::CopyFrom(const PlayerPresentChipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentChipsRequest::IsInitialized() const {
  return true;
}

void PlayerPresentChipsRequest::Swap(PlayerPresentChipsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentChipsRequest::InternalSwap(PlayerPresentChipsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(presenterid_, other->presenterid_);
  swap(acceptorid_, other->acceptorid_);
  swap(chipscount_, other->chipscount_);
  swap(presentercarry_, other->presentercarry_);
  swap(acceptorcarry_, other->acceptorcarry_);
}

::google::protobuf::Metadata PlayerPresentChipsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentChipsResponse::InitAsDefaultInstance() {
}
class PlayerPresentChipsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentChipsResponse::PlayerPresentChipsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentChipsResponse)
}
PlayerPresentChipsResponse::PlayerPresentChipsResponse(const PlayerPresentChipsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentChipsResponse)
}

void PlayerPresentChipsResponse::SharedCtor() {
}

PlayerPresentChipsResponse::~PlayerPresentChipsResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentChipsResponse)
  SharedDtor();
}

void PlayerPresentChipsResponse::SharedDtor() {
}

void PlayerPresentChipsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentChipsResponse& PlayerPresentChipsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentChipsResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentChipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentChipsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentChipsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentChipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentChipsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentChipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentChipsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentChipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentChipsResponse)
}

::google::protobuf::uint8* PlayerPresentChipsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentChipsResponse)
  return target;
}

size_t PlayerPresentChipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentChipsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentChipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentChipsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentChipsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentChipsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentChipsResponse)
    MergeFrom(*source);
  }
}

void PlayerPresentChipsResponse::MergeFrom(const PlayerPresentChipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerPresentChipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentChipsResponse::CopyFrom(const PlayerPresentChipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentChipsResponse::IsInitialized() const {
  return true;
}

void PlayerPresentChipsResponse::Swap(PlayerPresentChipsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentChipsResponse::InternalSwap(PlayerPresentChipsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerPresentChipsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentGiftNewInterRequest::InitAsDefaultInstance() {
}
class PlayerPresentGiftNewInterRequest::HasBitSetters {
 public:
  static void set_has_presenterid(PlayerPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_giftid(PlayerPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gifturl(PlayerPresentGiftNewInterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPresentGiftNewInterRequest::kPresenterIdFieldNumber;
const int PlayerPresentGiftNewInterRequest::kGiftIdFieldNumber;
const int PlayerPresentGiftNewInterRequest::kGiftUrlFieldNumber;
const int PlayerPresentGiftNewInterRequest::kAcceptorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentGiftNewInterRequest::PlayerPresentGiftNewInterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentGiftNewInterRequest)
}
PlayerPresentGiftNewInterRequest::PlayerPresentGiftNewInterRequest(const PlayerPresentGiftNewInterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acceptorid_(from.acceptorid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gifturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gifturl()) {
    gifturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gifturl_);
  }
  ::memcpy(&presenterid_, &from.presenterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&giftid_) -
    reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentGiftNewInterRequest)
}

void PlayerPresentGiftNewInterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerPresentGiftNewInterRequest_GameMsg_2eproto.base);
  gifturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&presenterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&giftid_) -
      reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
}

PlayerPresentGiftNewInterRequest::~PlayerPresentGiftNewInterRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentGiftNewInterRequest)
  SharedDtor();
}

void PlayerPresentGiftNewInterRequest::SharedDtor() {
  gifturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerPresentGiftNewInterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentGiftNewInterRequest& PlayerPresentGiftNewInterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentGiftNewInterRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentGiftNewInterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceptorid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gifturl_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&presenterid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&giftid_) -
        reinterpret_cast<char*>(&presenterid_)) + sizeof(giftid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentGiftNewInterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentGiftNewInterRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_presenterid(value);
        break;
      }
      // optional int32 giftId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_giftid(value);
        break;
      }
      // optional bytes giftUrl = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gifturl();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated int32 acceptorId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_acceptorid(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_acceptorid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentGiftNewInterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentGiftNewInterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 presenterId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_presenterid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 giftId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_giftid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes giftUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gifturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 acceptorId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_acceptorid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_acceptorid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentGiftNewInterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentGiftNewInterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentGiftNewInterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->presenterid(), output);
  }

  // optional int32 giftId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  // optional bytes giftUrl = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->gifturl(), output);
  }

  // repeated int32 acceptorId = 4;
  for (int i = 0, n = this->acceptorid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->acceptorid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentGiftNewInterRequest)
}

::google::protobuf::uint8* PlayerPresentGiftNewInterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentGiftNewInterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 presenterId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->presenterid(), target);
  }

  // optional int32 giftId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftid(), target);
  }

  // optional bytes giftUrl = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->gifturl(), target);
  }

  // repeated int32 acceptorId = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->acceptorid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentGiftNewInterRequest)
  return target;
}

size_t PlayerPresentGiftNewInterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentGiftNewInterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 acceptorId = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->acceptorid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acceptorid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes giftUrl = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gifturl());
    }

    // optional int32 presenterId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenterid());
    }

    // optional int32 giftId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentGiftNewInterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentGiftNewInterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentGiftNewInterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentGiftNewInterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentGiftNewInterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentGiftNewInterRequest)
    MergeFrom(*source);
  }
}

void PlayerPresentGiftNewInterRequest::MergeFrom(const PlayerPresentGiftNewInterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentGiftNewInterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acceptorid_.MergeFrom(from.acceptorid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gifturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gifturl_);
    }
    if (cached_has_bits & 0x00000002u) {
      presenterid_ = from.presenterid_;
    }
    if (cached_has_bits & 0x00000004u) {
      giftid_ = from.giftid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPresentGiftNewInterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentGiftNewInterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentGiftNewInterRequest::CopyFrom(const PlayerPresentGiftNewInterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentGiftNewInterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentGiftNewInterRequest::IsInitialized() const {
  return true;
}

void PlayerPresentGiftNewInterRequest::Swap(PlayerPresentGiftNewInterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentGiftNewInterRequest::InternalSwap(PlayerPresentGiftNewInterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acceptorid_.InternalSwap(&other->acceptorid_);
  gifturl_.Swap(&other->gifturl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(presenterid_, other->presenterid_);
  swap(giftid_, other->giftid_);
}

::google::protobuf::Metadata PlayerPresentGiftNewInterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPresentGiftNewInterResponse::InitAsDefaultInstance() {
}
class PlayerPresentGiftNewInterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPresentGiftNewInterResponse::PlayerPresentGiftNewInterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPresentGiftNewInterResponse)
}
PlayerPresentGiftNewInterResponse::PlayerPresentGiftNewInterResponse(const PlayerPresentGiftNewInterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPresentGiftNewInterResponse)
}

void PlayerPresentGiftNewInterResponse::SharedCtor() {
}

PlayerPresentGiftNewInterResponse::~PlayerPresentGiftNewInterResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPresentGiftNewInterResponse)
  SharedDtor();
}

void PlayerPresentGiftNewInterResponse::SharedDtor() {
}

void PlayerPresentGiftNewInterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPresentGiftNewInterResponse& PlayerPresentGiftNewInterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPresentGiftNewInterResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPresentGiftNewInterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPresentGiftNewInterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPresentGiftNewInterResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPresentGiftNewInterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPresentGiftNewInterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPresentGiftNewInterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPresentGiftNewInterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPresentGiftNewInterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPresentGiftNewInterResponse)
}

::google::protobuf::uint8* PlayerPresentGiftNewInterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPresentGiftNewInterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPresentGiftNewInterResponse)
  return target;
}

size_t PlayerPresentGiftNewInterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPresentGiftNewInterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPresentGiftNewInterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPresentGiftNewInterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPresentGiftNewInterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPresentGiftNewInterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPresentGiftNewInterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPresentGiftNewInterResponse)
    MergeFrom(*source);
  }
}

void PlayerPresentGiftNewInterResponse::MergeFrom(const PlayerPresentGiftNewInterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPresentGiftNewInterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerPresentGiftNewInterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPresentGiftNewInterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPresentGiftNewInterResponse::CopyFrom(const PlayerPresentGiftNewInterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPresentGiftNewInterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPresentGiftNewInterResponse::IsInitialized() const {
  return true;
}

void PlayerPresentGiftNewInterResponse::Swap(PlayerPresentGiftNewInterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPresentGiftNewInterResponse::InternalSwap(PlayerPresentGiftNewInterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerPresentGiftNewInterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerEnterRoomRequest::InitAsDefaultInstance() {
}
class PlayerEnterRoomRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerEnterRoomRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterRoomRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterRoomRequest::PlayerEnterRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerEnterRoomRequest)
}
PlayerEnterRoomRequest::PlayerEnterRoomRequest(const PlayerEnterRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerEnterRoomRequest)
}

void PlayerEnterRoomRequest::SharedCtor() {
  userid_ = 0;
}

PlayerEnterRoomRequest::~PlayerEnterRoomRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerEnterRoomRequest)
  SharedDtor();
}

void PlayerEnterRoomRequest::SharedDtor() {
}

void PlayerEnterRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerEnterRoomRequest& PlayerEnterRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerEnterRoomRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerEnterRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerEnterRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerEnterRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerEnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerEnterRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerEnterRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerEnterRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerEnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerEnterRoomRequest)
}

::google::protobuf::uint8* PlayerEnterRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerEnterRoomRequest)
  return target;
}

size_t PlayerEnterRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerEnterRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerEnterRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerEnterRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerEnterRoomRequest)
    MergeFrom(*source);
  }
}

void PlayerEnterRoomRequest::MergeFrom(const PlayerEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void PlayerEnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterRoomRequest::CopyFrom(const PlayerEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterRoomRequest::IsInitialized() const {
  return true;
}

void PlayerEnterRoomRequest::Swap(PlayerEnterRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterRoomRequest::InternalSwap(PlayerEnterRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerEnterRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerEnterRoomResponse::InitAsDefaultInstance() {
}
class PlayerEnterRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterRoomResponse::PlayerEnterRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerEnterRoomResponse)
}
PlayerEnterRoomResponse::PlayerEnterRoomResponse(const PlayerEnterRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerEnterRoomResponse)
}

void PlayerEnterRoomResponse::SharedCtor() {
}

PlayerEnterRoomResponse::~PlayerEnterRoomResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerEnterRoomResponse)
  SharedDtor();
}

void PlayerEnterRoomResponse::SharedDtor() {
}

void PlayerEnterRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerEnterRoomResponse& PlayerEnterRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerEnterRoomResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerEnterRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerEnterRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerEnterRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerEnterRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerEnterRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerEnterRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerEnterRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerEnterRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerEnterRoomResponse)
}

::google::protobuf::uint8* PlayerEnterRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerEnterRoomResponse)
  return target;
}

size_t PlayerEnterRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerEnterRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEnterRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerEnterRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerEnterRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerEnterRoomResponse)
    MergeFrom(*source);
  }
}

void PlayerEnterRoomResponse::MergeFrom(const PlayerEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerEnterRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterRoomResponse::CopyFrom(const PlayerEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterRoomResponse::IsInitialized() const {
  return true;
}

void PlayerEnterRoomResponse::Swap(PlayerEnterRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterRoomResponse::InternalSwap(PlayerEnterRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerEnterRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTransmitMessageRequest::InitAsDefaultInstance() {
}
class ApplyTransmitMessageRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_transmitmsgtype(ApplyTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_transmitmsgid(ApplyTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_transmitjsondata(ApplyTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyTransmitMessageRequest::kUserIdFieldNumber;
const int ApplyTransmitMessageRequest::kRoomIdFieldNumber;
const int ApplyTransmitMessageRequest::kTransmitMsgTypeFieldNumber;
const int ApplyTransmitMessageRequest::kTransmitMsgIdFieldNumber;
const int ApplyTransmitMessageRequest::kTransmitJsonDataFieldNumber;
const int ApplyTransmitMessageRequest::kRecvUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTransmitMessageRequest::ApplyTransmitMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTransmitMessageRequest)
}
ApplyTransmitMessageRequest::ApplyTransmitMessageRequest(const ApplyTransmitMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      recvuserid_(from.recvuserid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transmitjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmitjsondata()) {
    transmitjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmitjsondata_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&transmitmsgid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(transmitmsgid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTransmitMessageRequest)
}

void ApplyTransmitMessageRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyTransmitMessageRequest_GameMsg_2eproto.base);
  transmitjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transmitmsgid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(transmitmsgid_));
}

ApplyTransmitMessageRequest::~ApplyTransmitMessageRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTransmitMessageRequest)
  SharedDtor();
}

void ApplyTransmitMessageRequest::SharedDtor() {
  transmitjsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApplyTransmitMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTransmitMessageRequest& ApplyTransmitMessageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTransmitMessageRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTransmitMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvuserid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    transmitjsondata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transmitmsgid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(transmitmsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTransmitMessageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTransmitMessageRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 transmitMsgType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_transmitmsgtype(value);
        break;
      }
      // optional int32 transmitMsgId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_transmitmsgid(value);
        break;
      }
      // optional bytes transmitJsonData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_transmitjsondata();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated int32 recvUserId = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_recvuserid(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_recvuserid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTransmitMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTransmitMessageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmitMsgType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_transmitmsgtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmitmsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmitMsgId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_transmitmsgid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmitmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmitJsonData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmitjsondata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 recvUserId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_recvuserid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recvuserid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTransmitMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTransmitMessageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTransmitMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 transmitMsgType = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transmitmsgtype(), output);
  }

  // optional int32 transmitMsgId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->transmitmsgid(), output);
  }

  // optional bytes transmitJsonData = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->transmitjsondata(), output);
  }

  // repeated int32 recvUserId = 6;
  for (int i = 0, n = this->recvuserid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->recvuserid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTransmitMessageRequest)
}

::google::protobuf::uint8* ApplyTransmitMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 transmitMsgType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->transmitmsgtype(), target);
  }

  // optional int32 transmitMsgId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->transmitmsgid(), target);
  }

  // optional bytes transmitJsonData = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->transmitjsondata(), target);
  }

  // repeated int32 recvUserId = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->recvuserid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTransmitMessageRequest)
  return target;
}

size_t ApplyTransmitMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTransmitMessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 recvUserId = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->recvuserid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->recvuserid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes transmitJsonData = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmitjsondata());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 transmitMsgType = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmitmsgtype());
    }

    // optional int32 transmitMsgId = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmitmsgid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTransmitMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTransmitMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTransmitMessageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTransmitMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTransmitMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTransmitMessageRequest)
    MergeFrom(*source);
  }
}

void ApplyTransmitMessageRequest::MergeFrom(const ApplyTransmitMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTransmitMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recvuserid_.MergeFrom(from.recvuserid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      transmitjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmitjsondata_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      transmitmsgtype_ = from.transmitmsgtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      transmitmsgid_ = from.transmitmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyTransmitMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTransmitMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTransmitMessageRequest::CopyFrom(const ApplyTransmitMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTransmitMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTransmitMessageRequest::IsInitialized() const {
  return true;
}

void ApplyTransmitMessageRequest::Swap(ApplyTransmitMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTransmitMessageRequest::InternalSwap(ApplyTransmitMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recvuserid_.InternalSwap(&other->recvuserid_);
  transmitjsondata_.Swap(&other->transmitjsondata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(transmitmsgtype_, other->transmitmsgtype_);
  swap(transmitmsgid_, other->transmitmsgid_);
}

::google::protobuf::Metadata ApplyTransmitMessageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTransmitMessageResponse::InitAsDefaultInstance() {
}
class ApplyTransmitMessageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTransmitMessageResponse::ApplyTransmitMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTransmitMessageResponse)
}
ApplyTransmitMessageResponse::ApplyTransmitMessageResponse(const ApplyTransmitMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTransmitMessageResponse)
}

void ApplyTransmitMessageResponse::SharedCtor() {
}

ApplyTransmitMessageResponse::~ApplyTransmitMessageResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTransmitMessageResponse)
  SharedDtor();
}

void ApplyTransmitMessageResponse::SharedDtor() {
}

void ApplyTransmitMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTransmitMessageResponse& ApplyTransmitMessageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTransmitMessageResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTransmitMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTransmitMessageResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTransmitMessageResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTransmitMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTransmitMessageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTransmitMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTransmitMessageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTransmitMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTransmitMessageResponse)
}

::google::protobuf::uint8* ApplyTransmitMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTransmitMessageResponse)
  return target;
}

size_t ApplyTransmitMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTransmitMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTransmitMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTransmitMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTransmitMessageResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTransmitMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTransmitMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTransmitMessageResponse)
    MergeFrom(*source);
  }
}

void ApplyTransmitMessageResponse::MergeFrom(const ApplyTransmitMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTransmitMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyTransmitMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTransmitMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTransmitMessageResponse::CopyFrom(const ApplyTransmitMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTransmitMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTransmitMessageResponse::IsInitialized() const {
  return true;
}

void ApplyTransmitMessageResponse::Swap(ApplyTransmitMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTransmitMessageResponse::InternalSwap(ApplyTransmitMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyTransmitMessageResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTransmitMessageRequest::InitAsDefaultInstance() {
}
class PlayerTransmitMessageRequest::HasBitSetters {
 public:
  static void set_has_transmitmsgtype(PlayerTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_transmitmsgid(PlayerTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_transmitjsondata(PlayerTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_senduserid(PlayerTransmitMessageRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerTransmitMessageRequest::kTransmitMsgTypeFieldNumber;
const int PlayerTransmitMessageRequest::kTransmitMsgIdFieldNumber;
const int PlayerTransmitMessageRequest::kTransmitJsonDataFieldNumber;
const int PlayerTransmitMessageRequest::kSendUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTransmitMessageRequest::PlayerTransmitMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTransmitMessageRequest)
}
PlayerTransmitMessageRequest::PlayerTransmitMessageRequest(const PlayerTransmitMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transmitjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmitjsondata()) {
    transmitjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmitjsondata_);
  }
  ::memcpy(&transmitmsgtype_, &from.transmitmsgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&senduserid_) -
    reinterpret_cast<char*>(&transmitmsgtype_)) + sizeof(senduserid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTransmitMessageRequest)
}

void PlayerTransmitMessageRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerTransmitMessageRequest_GameMsg_2eproto.base);
  transmitjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transmitmsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&senduserid_) -
      reinterpret_cast<char*>(&transmitmsgtype_)) + sizeof(senduserid_));
}

PlayerTransmitMessageRequest::~PlayerTransmitMessageRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTransmitMessageRequest)
  SharedDtor();
}

void PlayerTransmitMessageRequest::SharedDtor() {
  transmitjsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerTransmitMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTransmitMessageRequest& PlayerTransmitMessageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTransmitMessageRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTransmitMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    transmitjsondata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&transmitmsgtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&senduserid_) -
        reinterpret_cast<char*>(&transmitmsgtype_)) + sizeof(senduserid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTransmitMessageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTransmitMessageRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 transmitMsgType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_transmitmsgtype(value);
        break;
      }
      // optional int32 transmitMsgId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_transmitmsgid(value);
        break;
      }
      // optional bytes transmitJsonData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_transmitjsondata();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional int32 sendUserId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_senduserid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTransmitMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTransmitMessageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transmitMsgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_transmitmsgtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmitmsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmitMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_transmitmsgid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmitmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmitJsonData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmitjsondata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sendUserId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_senduserid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTransmitMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTransmitMessageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTransmitMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transmitMsgType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transmitmsgtype(), output);
  }

  // optional int32 transmitMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transmitmsgid(), output);
  }

  // optional bytes transmitJsonData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transmitjsondata(), output);
  }

  // optional int32 sendUserId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->senduserid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTransmitMessageRequest)
}

::google::protobuf::uint8* PlayerTransmitMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTransmitMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transmitMsgType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transmitmsgtype(), target);
  }

  // optional int32 transmitMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transmitmsgid(), target);
  }

  // optional bytes transmitJsonData = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->transmitjsondata(), target);
  }

  // optional int32 sendUserId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->senduserid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTransmitMessageRequest)
  return target;
}

size_t PlayerTransmitMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTransmitMessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes transmitJsonData = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmitjsondata());
    }

    // optional int32 transmitMsgType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmitmsgtype());
    }

    // optional int32 transmitMsgId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmitmsgid());
    }

    // optional int32 sendUserId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTransmitMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTransmitMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTransmitMessageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTransmitMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTransmitMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTransmitMessageRequest)
    MergeFrom(*source);
  }
}

void PlayerTransmitMessageRequest::MergeFrom(const PlayerTransmitMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTransmitMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      transmitjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmitjsondata_);
    }
    if (cached_has_bits & 0x00000002u) {
      transmitmsgtype_ = from.transmitmsgtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      transmitmsgid_ = from.transmitmsgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      senduserid_ = from.senduserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerTransmitMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTransmitMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTransmitMessageRequest::CopyFrom(const PlayerTransmitMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTransmitMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTransmitMessageRequest::IsInitialized() const {
  return true;
}

void PlayerTransmitMessageRequest::Swap(PlayerTransmitMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTransmitMessageRequest::InternalSwap(PlayerTransmitMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transmitjsondata_.Swap(&other->transmitjsondata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transmitmsgtype_, other->transmitmsgtype_);
  swap(transmitmsgid_, other->transmitmsgid_);
  swap(senduserid_, other->senduserid_);
}

::google::protobuf::Metadata PlayerTransmitMessageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTransmitMessageResponse::InitAsDefaultInstance() {
}
class PlayerTransmitMessageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTransmitMessageResponse::PlayerTransmitMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTransmitMessageResponse)
}
PlayerTransmitMessageResponse::PlayerTransmitMessageResponse(const PlayerTransmitMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTransmitMessageResponse)
}

void PlayerTransmitMessageResponse::SharedCtor() {
}

PlayerTransmitMessageResponse::~PlayerTransmitMessageResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTransmitMessageResponse)
  SharedDtor();
}

void PlayerTransmitMessageResponse::SharedDtor() {
}

void PlayerTransmitMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTransmitMessageResponse& PlayerTransmitMessageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTransmitMessageResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTransmitMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTransmitMessageResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTransmitMessageResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTransmitMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTransmitMessageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTransmitMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTransmitMessageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTransmitMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTransmitMessageResponse)
}

::google::protobuf::uint8* PlayerTransmitMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTransmitMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTransmitMessageResponse)
  return target;
}

size_t PlayerTransmitMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTransmitMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTransmitMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTransmitMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTransmitMessageResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTransmitMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTransmitMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTransmitMessageResponse)
    MergeFrom(*source);
  }
}

void PlayerTransmitMessageResponse::MergeFrom(const PlayerTransmitMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTransmitMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerTransmitMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTransmitMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTransmitMessageResponse::CopyFrom(const PlayerTransmitMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTransmitMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTransmitMessageResponse::IsInitialized() const {
  return true;
}

void PlayerTransmitMessageResponse::Swap(PlayerTransmitMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTransmitMessageResponse::InternalSwap(PlayerTransmitMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerTransmitMessageResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTrusteeOnRequest::InitAsDefaultInstance() {
}
class ApplyTrusteeOnRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyTrusteeOnRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyTrusteeOnRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyTrusteeOnRequest::kUserIdFieldNumber;
const int ApplyTrusteeOnRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTrusteeOnRequest::ApplyTrusteeOnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTrusteeOnRequest)
}
ApplyTrusteeOnRequest::ApplyTrusteeOnRequest(const ApplyTrusteeOnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTrusteeOnRequest)
}

void ApplyTrusteeOnRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyTrusteeOnRequest::~ApplyTrusteeOnRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTrusteeOnRequest)
  SharedDtor();
}

void ApplyTrusteeOnRequest::SharedDtor() {
}

void ApplyTrusteeOnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTrusteeOnRequest& ApplyTrusteeOnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTrusteeOnRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTrusteeOnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTrusteeOnRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTrusteeOnRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTrusteeOnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTrusteeOnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTrusteeOnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTrusteeOnRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTrusteeOnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTrusteeOnRequest)
}

::google::protobuf::uint8* ApplyTrusteeOnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTrusteeOnRequest)
  return target;
}

size_t ApplyTrusteeOnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTrusteeOnRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTrusteeOnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTrusteeOnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTrusteeOnRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTrusteeOnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTrusteeOnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTrusteeOnRequest)
    MergeFrom(*source);
  }
}

void ApplyTrusteeOnRequest::MergeFrom(const ApplyTrusteeOnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTrusteeOnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyTrusteeOnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTrusteeOnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTrusteeOnRequest::CopyFrom(const ApplyTrusteeOnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTrusteeOnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTrusteeOnRequest::IsInitialized() const {
  return true;
}

void ApplyTrusteeOnRequest::Swap(ApplyTrusteeOnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTrusteeOnRequest::InternalSwap(ApplyTrusteeOnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyTrusteeOnRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTrusteeOnResponse::InitAsDefaultInstance() {
}
class ApplyTrusteeOnResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTrusteeOnResponse::ApplyTrusteeOnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTrusteeOnResponse)
}
ApplyTrusteeOnResponse::ApplyTrusteeOnResponse(const ApplyTrusteeOnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTrusteeOnResponse)
}

void ApplyTrusteeOnResponse::SharedCtor() {
}

ApplyTrusteeOnResponse::~ApplyTrusteeOnResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTrusteeOnResponse)
  SharedDtor();
}

void ApplyTrusteeOnResponse::SharedDtor() {
}

void ApplyTrusteeOnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTrusteeOnResponse& ApplyTrusteeOnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTrusteeOnResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTrusteeOnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTrusteeOnResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTrusteeOnResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTrusteeOnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTrusteeOnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTrusteeOnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTrusteeOnResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTrusteeOnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTrusteeOnResponse)
}

::google::protobuf::uint8* ApplyTrusteeOnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTrusteeOnResponse)
  return target;
}

size_t ApplyTrusteeOnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTrusteeOnResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTrusteeOnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTrusteeOnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTrusteeOnResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTrusteeOnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTrusteeOnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTrusteeOnResponse)
    MergeFrom(*source);
  }
}

void ApplyTrusteeOnResponse::MergeFrom(const ApplyTrusteeOnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTrusteeOnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyTrusteeOnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTrusteeOnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTrusteeOnResponse::CopyFrom(const ApplyTrusteeOnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTrusteeOnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTrusteeOnResponse::IsInitialized() const {
  return true;
}

void ApplyTrusteeOnResponse::Swap(ApplyTrusteeOnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTrusteeOnResponse::InternalSwap(ApplyTrusteeOnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyTrusteeOnResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTrusteeOnRequest::InitAsDefaultInstance() {
}
class PlayerTrusteeOnRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerTrusteeOnRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerTrusteeOnRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTrusteeOnRequest::PlayerTrusteeOnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTrusteeOnRequest)
}
PlayerTrusteeOnRequest::PlayerTrusteeOnRequest(const PlayerTrusteeOnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTrusteeOnRequest)
}

void PlayerTrusteeOnRequest::SharedCtor() {
  userid_ = 0;
}

PlayerTrusteeOnRequest::~PlayerTrusteeOnRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTrusteeOnRequest)
  SharedDtor();
}

void PlayerTrusteeOnRequest::SharedDtor() {
}

void PlayerTrusteeOnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTrusteeOnRequest& PlayerTrusteeOnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTrusteeOnRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTrusteeOnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTrusteeOnRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTrusteeOnRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTrusteeOnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTrusteeOnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTrusteeOnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTrusteeOnRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTrusteeOnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTrusteeOnRequest)
}

::google::protobuf::uint8* PlayerTrusteeOnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTrusteeOnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTrusteeOnRequest)
  return target;
}

size_t PlayerTrusteeOnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTrusteeOnRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTrusteeOnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTrusteeOnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTrusteeOnRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTrusteeOnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTrusteeOnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTrusteeOnRequest)
    MergeFrom(*source);
  }
}

void PlayerTrusteeOnRequest::MergeFrom(const PlayerTrusteeOnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTrusteeOnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void PlayerTrusteeOnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTrusteeOnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTrusteeOnRequest::CopyFrom(const PlayerTrusteeOnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTrusteeOnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTrusteeOnRequest::IsInitialized() const {
  return true;
}

void PlayerTrusteeOnRequest::Swap(PlayerTrusteeOnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTrusteeOnRequest::InternalSwap(PlayerTrusteeOnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerTrusteeOnRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTrusteeOnResponse::InitAsDefaultInstance() {
}
class PlayerTrusteeOnResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTrusteeOnResponse::PlayerTrusteeOnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTrusteeOnResponse)
}
PlayerTrusteeOnResponse::PlayerTrusteeOnResponse(const PlayerTrusteeOnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTrusteeOnResponse)
}

void PlayerTrusteeOnResponse::SharedCtor() {
}

PlayerTrusteeOnResponse::~PlayerTrusteeOnResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTrusteeOnResponse)
  SharedDtor();
}

void PlayerTrusteeOnResponse::SharedDtor() {
}

void PlayerTrusteeOnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTrusteeOnResponse& PlayerTrusteeOnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTrusteeOnResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTrusteeOnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTrusteeOnResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTrusteeOnResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTrusteeOnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTrusteeOnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTrusteeOnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTrusteeOnResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTrusteeOnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTrusteeOnResponse)
}

::google::protobuf::uint8* PlayerTrusteeOnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTrusteeOnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTrusteeOnResponse)
  return target;
}

size_t PlayerTrusteeOnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTrusteeOnResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTrusteeOnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTrusteeOnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTrusteeOnResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTrusteeOnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTrusteeOnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTrusteeOnResponse)
    MergeFrom(*source);
  }
}

void PlayerTrusteeOnResponse::MergeFrom(const PlayerTrusteeOnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTrusteeOnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerTrusteeOnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTrusteeOnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTrusteeOnResponse::CopyFrom(const PlayerTrusteeOnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTrusteeOnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTrusteeOnResponse::IsInitialized() const {
  return true;
}

void PlayerTrusteeOnResponse::Swap(PlayerTrusteeOnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTrusteeOnResponse::InternalSwap(PlayerTrusteeOnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerTrusteeOnResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTrusteeOffRequest::InitAsDefaultInstance() {
}
class ApplyTrusteeOffRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyTrusteeOffRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyTrusteeOffRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyTrusteeOffRequest::kUserIdFieldNumber;
const int ApplyTrusteeOffRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTrusteeOffRequest::ApplyTrusteeOffRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTrusteeOffRequest)
}
ApplyTrusteeOffRequest::ApplyTrusteeOffRequest(const ApplyTrusteeOffRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTrusteeOffRequest)
}

void ApplyTrusteeOffRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyTrusteeOffRequest::~ApplyTrusteeOffRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTrusteeOffRequest)
  SharedDtor();
}

void ApplyTrusteeOffRequest::SharedDtor() {
}

void ApplyTrusteeOffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTrusteeOffRequest& ApplyTrusteeOffRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTrusteeOffRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTrusteeOffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTrusteeOffRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTrusteeOffRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTrusteeOffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTrusteeOffRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTrusteeOffRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTrusteeOffRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTrusteeOffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTrusteeOffRequest)
}

::google::protobuf::uint8* ApplyTrusteeOffRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTrusteeOffRequest)
  return target;
}

size_t ApplyTrusteeOffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTrusteeOffRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTrusteeOffRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTrusteeOffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTrusteeOffRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTrusteeOffRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTrusteeOffRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTrusteeOffRequest)
    MergeFrom(*source);
  }
}

void ApplyTrusteeOffRequest::MergeFrom(const ApplyTrusteeOffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTrusteeOffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyTrusteeOffRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTrusteeOffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTrusteeOffRequest::CopyFrom(const ApplyTrusteeOffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTrusteeOffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTrusteeOffRequest::IsInitialized() const {
  return true;
}

void ApplyTrusteeOffRequest::Swap(ApplyTrusteeOffRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTrusteeOffRequest::InternalSwap(ApplyTrusteeOffRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyTrusteeOffRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyTrusteeOffResponse::InitAsDefaultInstance() {
}
class ApplyTrusteeOffResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyTrusteeOffResponse::ApplyTrusteeOffResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyTrusteeOffResponse)
}
ApplyTrusteeOffResponse::ApplyTrusteeOffResponse(const ApplyTrusteeOffResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyTrusteeOffResponse)
}

void ApplyTrusteeOffResponse::SharedCtor() {
}

ApplyTrusteeOffResponse::~ApplyTrusteeOffResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyTrusteeOffResponse)
  SharedDtor();
}

void ApplyTrusteeOffResponse::SharedDtor() {
}

void ApplyTrusteeOffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyTrusteeOffResponse& ApplyTrusteeOffResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyTrusteeOffResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyTrusteeOffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyTrusteeOffResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyTrusteeOffResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyTrusteeOffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyTrusteeOffResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyTrusteeOffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyTrusteeOffResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyTrusteeOffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyTrusteeOffResponse)
}

::google::protobuf::uint8* ApplyTrusteeOffResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyTrusteeOffResponse)
  return target;
}

size_t ApplyTrusteeOffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyTrusteeOffResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyTrusteeOffResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyTrusteeOffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyTrusteeOffResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyTrusteeOffResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyTrusteeOffResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyTrusteeOffResponse)
    MergeFrom(*source);
  }
}

void ApplyTrusteeOffResponse::MergeFrom(const ApplyTrusteeOffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyTrusteeOffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyTrusteeOffResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyTrusteeOffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTrusteeOffResponse::CopyFrom(const ApplyTrusteeOffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyTrusteeOffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTrusteeOffResponse::IsInitialized() const {
  return true;
}

void ApplyTrusteeOffResponse::Swap(ApplyTrusteeOffResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyTrusteeOffResponse::InternalSwap(ApplyTrusteeOffResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyTrusteeOffResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTrusteeOffRequest::InitAsDefaultInstance() {
}
class PlayerTrusteeOffRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerTrusteeOffRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerTrusteeOffRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTrusteeOffRequest::PlayerTrusteeOffRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTrusteeOffRequest)
}
PlayerTrusteeOffRequest::PlayerTrusteeOffRequest(const PlayerTrusteeOffRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTrusteeOffRequest)
}

void PlayerTrusteeOffRequest::SharedCtor() {
  userid_ = 0;
}

PlayerTrusteeOffRequest::~PlayerTrusteeOffRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTrusteeOffRequest)
  SharedDtor();
}

void PlayerTrusteeOffRequest::SharedDtor() {
}

void PlayerTrusteeOffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTrusteeOffRequest& PlayerTrusteeOffRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTrusteeOffRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTrusteeOffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTrusteeOffRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTrusteeOffRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTrusteeOffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTrusteeOffRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTrusteeOffRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTrusteeOffRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTrusteeOffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTrusteeOffRequest)
}

::google::protobuf::uint8* PlayerTrusteeOffRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTrusteeOffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTrusteeOffRequest)
  return target;
}

size_t PlayerTrusteeOffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTrusteeOffRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTrusteeOffRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTrusteeOffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTrusteeOffRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTrusteeOffRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTrusteeOffRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTrusteeOffRequest)
    MergeFrom(*source);
  }
}

void PlayerTrusteeOffRequest::MergeFrom(const PlayerTrusteeOffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTrusteeOffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void PlayerTrusteeOffRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTrusteeOffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTrusteeOffRequest::CopyFrom(const PlayerTrusteeOffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTrusteeOffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTrusteeOffRequest::IsInitialized() const {
  return true;
}

void PlayerTrusteeOffRequest::Swap(PlayerTrusteeOffRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTrusteeOffRequest::InternalSwap(PlayerTrusteeOffRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerTrusteeOffRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerTrusteeOffResponse::InitAsDefaultInstance() {
}
class PlayerTrusteeOffResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerTrusteeOffResponse::PlayerTrusteeOffResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerTrusteeOffResponse)
}
PlayerTrusteeOffResponse::PlayerTrusteeOffResponse(const PlayerTrusteeOffResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerTrusteeOffResponse)
}

void PlayerTrusteeOffResponse::SharedCtor() {
}

PlayerTrusteeOffResponse::~PlayerTrusteeOffResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerTrusteeOffResponse)
  SharedDtor();
}

void PlayerTrusteeOffResponse::SharedDtor() {
}

void PlayerTrusteeOffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerTrusteeOffResponse& PlayerTrusteeOffResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerTrusteeOffResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerTrusteeOffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerTrusteeOffResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerTrusteeOffResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerTrusteeOffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerTrusteeOffResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerTrusteeOffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerTrusteeOffResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerTrusteeOffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerTrusteeOffResponse)
}

::google::protobuf::uint8* PlayerTrusteeOffResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerTrusteeOffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerTrusteeOffResponse)
  return target;
}

size_t PlayerTrusteeOffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerTrusteeOffResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerTrusteeOffResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerTrusteeOffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerTrusteeOffResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerTrusteeOffResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerTrusteeOffResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerTrusteeOffResponse)
    MergeFrom(*source);
  }
}

void PlayerTrusteeOffResponse::MergeFrom(const PlayerTrusteeOffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerTrusteeOffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerTrusteeOffResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerTrusteeOffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTrusteeOffResponse::CopyFrom(const PlayerTrusteeOffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerTrusteeOffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTrusteeOffResponse::IsInitialized() const {
  return true;
}

void PlayerTrusteeOffResponse::Swap(PlayerTrusteeOffResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerTrusteeOffResponse::InternalSwap(PlayerTrusteeOffResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerTrusteeOffResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReadyStartGameRequest::InitAsDefaultInstance() {
}
class ReadyStartGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyStartGameRequest::ReadyStartGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ReadyStartGameRequest)
}
ReadyStartGameRequest::ReadyStartGameRequest(const ReadyStartGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ReadyStartGameRequest)
}

void ReadyStartGameRequest::SharedCtor() {
}

ReadyStartGameRequest::~ReadyStartGameRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ReadyStartGameRequest)
  SharedDtor();
}

void ReadyStartGameRequest::SharedDtor() {
}

void ReadyStartGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyStartGameRequest& ReadyStartGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadyStartGameRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ReadyStartGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ReadyStartGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadyStartGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadyStartGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadyStartGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ReadyStartGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ReadyStartGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ReadyStartGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadyStartGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ReadyStartGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ReadyStartGameRequest)
}

::google::protobuf::uint8* ReadyStartGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ReadyStartGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ReadyStartGameRequest)
  return target;
}

size_t ReadyStartGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ReadyStartGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyStartGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ReadyStartGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyStartGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReadyStartGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ReadyStartGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ReadyStartGameRequest)
    MergeFrom(*source);
  }
}

void ReadyStartGameRequest::MergeFrom(const ReadyStartGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ReadyStartGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadyStartGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ReadyStartGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyStartGameRequest::CopyFrom(const ReadyStartGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ReadyStartGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyStartGameRequest::IsInitialized() const {
  return true;
}

void ReadyStartGameRequest::Swap(ReadyStartGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyStartGameRequest::InternalSwap(ReadyStartGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ReadyStartGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReadyStartGameResponse::InitAsDefaultInstance() {
}
class ReadyStartGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyStartGameResponse::ReadyStartGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ReadyStartGameResponse)
}
ReadyStartGameResponse::ReadyStartGameResponse(const ReadyStartGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ReadyStartGameResponse)
}

void ReadyStartGameResponse::SharedCtor() {
}

ReadyStartGameResponse::~ReadyStartGameResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ReadyStartGameResponse)
  SharedDtor();
}

void ReadyStartGameResponse::SharedDtor() {
}

void ReadyStartGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyStartGameResponse& ReadyStartGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadyStartGameResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ReadyStartGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ReadyStartGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadyStartGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadyStartGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadyStartGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ReadyStartGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ReadyStartGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ReadyStartGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadyStartGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ReadyStartGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ReadyStartGameResponse)
}

::google::protobuf::uint8* ReadyStartGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ReadyStartGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ReadyStartGameResponse)
  return target;
}

size_t ReadyStartGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ReadyStartGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyStartGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ReadyStartGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyStartGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReadyStartGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ReadyStartGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ReadyStartGameResponse)
    MergeFrom(*source);
  }
}

void ReadyStartGameResponse::MergeFrom(const ReadyStartGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ReadyStartGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadyStartGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ReadyStartGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyStartGameResponse::CopyFrom(const ReadyStartGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ReadyStartGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyStartGameResponse::IsInitialized() const {
  return true;
}

void ReadyStartGameResponse::Swap(ReadyStartGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyStartGameResponse::InternalSwap(ReadyStartGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ReadyStartGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DealCardsReqeust::InitAsDefaultInstance() {
  ::GameMsg::_DealCardsReqeust_default_instance_._instance.get_mutable()->jokercard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
  ::GameMsg::_DealCardsReqeust_default_instance_._instance.get_mutable()->firstpoolcard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class DealCardsReqeust::HasBitSetters {
 public:
  static void set_has_dealerseat(DealCardsReqeust* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dealcardcount(DealCardsReqeust* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::GameMsg::MsgCard& jokercard(const DealCardsReqeust* msg);
  static void set_has_jokercard(DealCardsReqeust* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::GameMsg::MsgCard& firstpoolcard(const DealCardsReqeust* msg);
  static void set_has_firstpoolcard(DealCardsReqeust* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bottomcardcount(DealCardsReqeust* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::GameMsg::MsgCard&
DealCardsReqeust::HasBitSetters::jokercard(const DealCardsReqeust* msg) {
  return *msg->jokercard_;
}
const ::GameMsg::MsgCard&
DealCardsReqeust::HasBitSetters::firstpoolcard(const DealCardsReqeust* msg) {
  return *msg->firstpoolcard_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealCardsReqeust::kDealerSeatFieldNumber;
const int DealCardsReqeust::kHandCardFieldNumber;
const int DealCardsReqeust::kDealCardsOrderFieldNumber;
const int DealCardsReqeust::kDealCardCountFieldNumber;
const int DealCardsReqeust::kJokerCardFieldNumber;
const int DealCardsReqeust::kFirstPoolCardFieldNumber;
const int DealCardsReqeust::kBottomCardCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealCardsReqeust::DealCardsReqeust()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.DealCardsReqeust)
}
DealCardsReqeust::DealCardsReqeust(const DealCardsReqeust& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      handcard_(from.handcard_),
      dealcardsorder_(from.dealcardsorder_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_jokercard()) {
    jokercard_ = new ::GameMsg::MsgCard(*from.jokercard_);
  } else {
    jokercard_ = NULL;
  }
  if (from.has_firstpoolcard()) {
    firstpoolcard_ = new ::GameMsg::MsgCard(*from.firstpoolcard_);
  } else {
    firstpoolcard_ = NULL;
  }
  ::memcpy(&dealerseat_, &from.dealerseat_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottomcardcount_) -
    reinterpret_cast<char*>(&dealerseat_)) + sizeof(bottomcardcount_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.DealCardsReqeust)
}

void DealCardsReqeust::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DealCardsReqeust_GameMsg_2eproto.base);
  ::memset(&jokercard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottomcardcount_) -
      reinterpret_cast<char*>(&jokercard_)) + sizeof(bottomcardcount_));
}

DealCardsReqeust::~DealCardsReqeust() {
  // @@protoc_insertion_point(destructor:GameMsg.DealCardsReqeust)
  SharedDtor();
}

void DealCardsReqeust::SharedDtor() {
  if (this != internal_default_instance()) delete jokercard_;
  if (this != internal_default_instance()) delete firstpoolcard_;
}

void DealCardsReqeust::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealCardsReqeust& DealCardsReqeust::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DealCardsReqeust_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void DealCardsReqeust::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.DealCardsReqeust)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handcard_.Clear();
  dealcardsorder_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(jokercard_ != NULL);
      jokercard_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(firstpoolcard_ != NULL);
      firstpoolcard_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&dealerseat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottomcardcount_) -
        reinterpret_cast<char*>(&dealerseat_)) + sizeof(bottomcardcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DealCardsReqeust::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DealCardsReqeust*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 dealerSeat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dealerseat(value);
        break;
      }
      // repeated .GameMsg.MsgCard handCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_handcard();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated int32 dealCardsOrder = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_dealcardsorder(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_dealcardsorder();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 dealCardCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dealcardcount(value);
        break;
      }
      // optional .GameMsg.MsgCard jokerCard = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_jokercard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .GameMsg.MsgCard firstPoolCard = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_firstpoolcard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional int32 bottomCardCount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_bottomcardcount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DealCardsReqeust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.DealCardsReqeust)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dealerSeat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dealerseat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerseat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.MsgCard handCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_handcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dealCardsOrder = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_dealcardsorder())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dealcardsorder())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dealCardCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_dealcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard jokerCard = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jokercard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard firstPoolCard = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firstpoolcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bottomCardCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bottomcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottomcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.DealCardsReqeust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.DealCardsReqeust)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DealCardsReqeust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.DealCardsReqeust)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dealerSeat = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dealerseat(), output);
  }

  // repeated .GameMsg.MsgCard handCard = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcard_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->handcard(static_cast<int>(i)),
      output);
  }

  // repeated int32 dealCardsOrder = 3;
  for (int i = 0, n = this->dealcardsorder_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dealcardsorder(i), output);
  }

  // optional int32 dealCardCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dealcardcount(), output);
  }

  // optional .GameMsg.MsgCard jokerCard = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::jokercard(this), output);
  }

  // optional .GameMsg.MsgCard firstPoolCard = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::firstpoolcard(this), output);
  }

  // optional int32 bottomCardCount = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bottomcardcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.DealCardsReqeust)
}

::google::protobuf::uint8* DealCardsReqeust::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.DealCardsReqeust)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dealerSeat = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dealerseat(), target);
  }

  // repeated .GameMsg.MsgCard handCard = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcard_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->handcard(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 dealCardsOrder = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->dealcardsorder_, target);

  // optional int32 dealCardCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dealcardcount(), target);
  }

  // optional .GameMsg.MsgCard jokerCard = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::jokercard(this), deterministic, target);
  }

  // optional .GameMsg.MsgCard firstPoolCard = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::firstpoolcard(this), deterministic, target);
  }

  // optional int32 bottomCardCount = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bottomcardcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.DealCardsReqeust)
  return target;
}

size_t DealCardsReqeust::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.DealCardsReqeust)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard handCard = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->handcard_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->handcard(static_cast<int>(i)));
    }
  }

  // repeated int32 dealCardsOrder = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dealcardsorder_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dealcardsorder_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .GameMsg.MsgCard jokerCard = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *jokercard_);
    }

    // optional .GameMsg.MsgCard firstPoolCard = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *firstpoolcard_);
    }

    // optional int32 dealerSeat = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerseat());
    }

    // optional int32 dealCardCount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealcardcount());
    }

    // optional int32 bottomCardCount = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomcardcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealCardsReqeust::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.DealCardsReqeust)
  GOOGLE_DCHECK_NE(&from, this);
  const DealCardsReqeust* source =
      ::google::protobuf::DynamicCastToGenerated<DealCardsReqeust>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.DealCardsReqeust)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.DealCardsReqeust)
    MergeFrom(*source);
  }
}

void DealCardsReqeust::MergeFrom(const DealCardsReqeust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.DealCardsReqeust)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  handcard_.MergeFrom(from.handcard_);
  dealcardsorder_.MergeFrom(from.dealcardsorder_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_jokercard()->::GameMsg::MsgCard::MergeFrom(from.jokercard());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_firstpoolcard()->::GameMsg::MsgCard::MergeFrom(from.firstpoolcard());
    }
    if (cached_has_bits & 0x00000004u) {
      dealerseat_ = from.dealerseat_;
    }
    if (cached_has_bits & 0x00000008u) {
      dealcardcount_ = from.dealcardcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      bottomcardcount_ = from.bottomcardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealCardsReqeust::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.DealCardsReqeust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealCardsReqeust::CopyFrom(const DealCardsReqeust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.DealCardsReqeust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealCardsReqeust::IsInitialized() const {
  return true;
}

void DealCardsReqeust::Swap(DealCardsReqeust* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealCardsReqeust::InternalSwap(DealCardsReqeust* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&handcard_)->InternalSwap(CastToBase(&other->handcard_));
  dealcardsorder_.InternalSwap(&other->dealcardsorder_);
  swap(jokercard_, other->jokercard_);
  swap(firstpoolcard_, other->firstpoolcard_);
  swap(dealerseat_, other->dealerseat_);
  swap(dealcardcount_, other->dealcardcount_);
  swap(bottomcardcount_, other->bottomcardcount_);
}

::google::protobuf::Metadata DealCardsReqeust::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DealCardsResponse::InitAsDefaultInstance() {
}
class DealCardsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealCardsResponse::DealCardsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.DealCardsResponse)
}
DealCardsResponse::DealCardsResponse(const DealCardsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.DealCardsResponse)
}

void DealCardsResponse::SharedCtor() {
}

DealCardsResponse::~DealCardsResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.DealCardsResponse)
  SharedDtor();
}

void DealCardsResponse::SharedDtor() {
}

void DealCardsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealCardsResponse& DealCardsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DealCardsResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void DealCardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.DealCardsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DealCardsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DealCardsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DealCardsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.DealCardsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.DealCardsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.DealCardsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DealCardsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.DealCardsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.DealCardsResponse)
}

::google::protobuf::uint8* DealCardsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.DealCardsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.DealCardsResponse)
  return target;
}

size_t DealCardsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.DealCardsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealCardsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.DealCardsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DealCardsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DealCardsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.DealCardsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.DealCardsResponse)
    MergeFrom(*source);
  }
}

void DealCardsResponse::MergeFrom(const DealCardsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.DealCardsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DealCardsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.DealCardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealCardsResponse::CopyFrom(const DealCardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.DealCardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealCardsResponse::IsInitialized() const {
  return true;
}

void DealCardsResponse::Swap(DealCardsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealCardsResponse::InternalSwap(DealCardsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata DealCardsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActivePlayerRequest::InitAsDefaultInstance() {
}
class ActivePlayerRequest::HasBitSetters {
 public:
  static void set_has_userid(ActivePlayerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ispoolcardcandig(ActivePlayerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivePlayerRequest::kUserIdFieldNumber;
const int ActivePlayerRequest::kIsPoolCardCanDigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivePlayerRequest::ActivePlayerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ActivePlayerRequest)
}
ActivePlayerRequest::ActivePlayerRequest(const ActivePlayerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispoolcardcandig_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(ispoolcardcandig_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ActivePlayerRequest)
}

void ActivePlayerRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispoolcardcandig_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(ispoolcardcandig_));
}

ActivePlayerRequest::~ActivePlayerRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ActivePlayerRequest)
  SharedDtor();
}

void ActivePlayerRequest::SharedDtor() {
}

void ActivePlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivePlayerRequest& ActivePlayerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActivePlayerRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ActivePlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ActivePlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ispoolcardcandig_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(ispoolcardcandig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivePlayerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActivePlayerRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional bool isPoolCardCanDig = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_ispoolcardcandig(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ActivePlayerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isPoolCardCanDig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ispoolcardcandig(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispoolcardcandig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ActivePlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ActivePlayerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ActivePlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional bool isPoolCardCanDig = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispoolcardcandig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ActivePlayerRequest)
}

::google::protobuf::uint8* ActivePlayerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ActivePlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional bool isPoolCardCanDig = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispoolcardcandig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ActivePlayerRequest)
  return target;
}

size_t ActivePlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ActivePlayerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional bool isPoolCardCanDig = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ActivePlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivePlayerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ActivePlayerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ActivePlayerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ActivePlayerRequest)
    MergeFrom(*source);
  }
}

void ActivePlayerRequest::MergeFrom(const ActivePlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ActivePlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ispoolcardcandig_ = from.ispoolcardcandig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActivePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ActivePlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivePlayerRequest::CopyFrom(const ActivePlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ActivePlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivePlayerRequest::IsInitialized() const {
  return true;
}

void ActivePlayerRequest::Swap(ActivePlayerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivePlayerRequest::InternalSwap(ActivePlayerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(ispoolcardcandig_, other->ispoolcardcandig_);
}

::google::protobuf::Metadata ActivePlayerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActivePlayerResponse::InitAsDefaultInstance() {
}
class ActivePlayerResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivePlayerResponse::ActivePlayerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ActivePlayerResponse)
}
ActivePlayerResponse::ActivePlayerResponse(const ActivePlayerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ActivePlayerResponse)
}

void ActivePlayerResponse::SharedCtor() {
}

ActivePlayerResponse::~ActivePlayerResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ActivePlayerResponse)
  SharedDtor();
}

void ActivePlayerResponse::SharedDtor() {
}

void ActivePlayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivePlayerResponse& ActivePlayerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActivePlayerResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ActivePlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ActivePlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivePlayerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActivePlayerResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ActivePlayerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ActivePlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ActivePlayerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ActivePlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ActivePlayerResponse)
}

::google::protobuf::uint8* ActivePlayerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ActivePlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ActivePlayerResponse)
  return target;
}

size_t ActivePlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ActivePlayerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ActivePlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivePlayerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ActivePlayerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ActivePlayerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ActivePlayerResponse)
    MergeFrom(*source);
  }
}

void ActivePlayerResponse::MergeFrom(const ActivePlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ActivePlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActivePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ActivePlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivePlayerResponse::CopyFrom(const ActivePlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ActivePlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivePlayerResponse::IsInitialized() const {
  return true;
}

void ActivePlayerResponse::Swap(ActivePlayerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivePlayerResponse::InternalSwap(ActivePlayerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ActivePlayerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDigCardRequest::InitAsDefaultInstance() {
}
class ApplyDigCardRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_digtype(ApplyDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyDigCardRequest::kUserIdFieldNumber;
const int ApplyDigCardRequest::kRoomIdFieldNumber;
const int ApplyDigCardRequest::kDigTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDigCardRequest::ApplyDigCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDigCardRequest)
}
ApplyDigCardRequest::ApplyDigCardRequest(const ApplyDigCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&digtype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(digtype_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDigCardRequest)
}

void ApplyDigCardRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digtype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(digtype_));
}

ApplyDigCardRequest::~ApplyDigCardRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDigCardRequest)
  SharedDtor();
}

void ApplyDigCardRequest::SharedDtor() {
}

void ApplyDigCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDigCardRequest& ApplyDigCardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDigCardRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDigCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&digtype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(digtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDigCardRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDigCardRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional int32 digType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_digtype(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDigCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDigCardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 digType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_digtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &digtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDigCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDigCardRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDigCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 digType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->digtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDigCardRequest)
}

::google::protobuf::uint8* ApplyDigCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 digType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->digtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDigCardRequest)
  return target;
}

size_t ApplyDigCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDigCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 digType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->digtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDigCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDigCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDigCardRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDigCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDigCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDigCardRequest)
    MergeFrom(*source);
  }
}

void ApplyDigCardRequest::MergeFrom(const ApplyDigCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDigCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      digtype_ = from.digtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyDigCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDigCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDigCardRequest::CopyFrom(const ApplyDigCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDigCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDigCardRequest::IsInitialized() const {
  return true;
}

void ApplyDigCardRequest::Swap(ApplyDigCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDigCardRequest::InternalSwap(ApplyDigCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(digtype_, other->digtype_);
}

::google::protobuf::Metadata ApplyDigCardRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDigCardResponse::InitAsDefaultInstance() {
}
class ApplyDigCardResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDigCardResponse::ApplyDigCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDigCardResponse)
}
ApplyDigCardResponse::ApplyDigCardResponse(const ApplyDigCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDigCardResponse)
}

void ApplyDigCardResponse::SharedCtor() {
}

ApplyDigCardResponse::~ApplyDigCardResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDigCardResponse)
  SharedDtor();
}

void ApplyDigCardResponse::SharedDtor() {
}

void ApplyDigCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDigCardResponse& ApplyDigCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDigCardResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDigCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDigCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDigCardResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDigCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDigCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDigCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDigCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDigCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDigCardResponse)
}

::google::protobuf::uint8* ApplyDigCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDigCardResponse)
  return target;
}

size_t ApplyDigCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDigCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDigCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDigCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDigCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDigCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDigCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDigCardResponse)
    MergeFrom(*source);
  }
}

void ApplyDigCardResponse::MergeFrom(const ApplyDigCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDigCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyDigCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDigCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDigCardResponse::CopyFrom(const ApplyDigCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDigCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDigCardResponse::IsInitialized() const {
  return true;
}

void ApplyDigCardResponse::Swap(ApplyDigCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDigCardResponse::InternalSwap(ApplyDigCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyDigCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDigCardRequest::InitAsDefaultInstance() {
  ::GameMsg::_PlayerDigCardRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class PlayerDigCardRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_digtype(PlayerDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::GameMsg::MsgCard& card(const PlayerDigCardRequest* msg);
  static void set_has_card(PlayerDigCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::GameMsg::MsgCard&
PlayerDigCardRequest::HasBitSetters::card(const PlayerDigCardRequest* msg) {
  return *msg->card_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDigCardRequest::kUserIdFieldNumber;
const int PlayerDigCardRequest::kDigTypeFieldNumber;
const int PlayerDigCardRequest::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDigCardRequest::PlayerDigCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDigCardRequest)
}
PlayerDigCardRequest::PlayerDigCardRequest(const PlayerDigCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::GameMsg::MsgCard(*from.card_);
  } else {
    card_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&digtype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(digtype_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDigCardRequest)
}

void PlayerDigCardRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerDigCardRequest_GameMsg_2eproto.base);
  ::memset(&card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digtype_) -
      reinterpret_cast<char*>(&card_)) + sizeof(digtype_));
}

PlayerDigCardRequest::~PlayerDigCardRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDigCardRequest)
  SharedDtor();
}

void PlayerDigCardRequest::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void PlayerDigCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDigCardRequest& PlayerDigCardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDigCardRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDigCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(card_ != NULL);
    card_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&digtype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(digtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDigCardRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDigCardRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 digType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_digtype(value);
        break;
      }
      // optional .GameMsg.MsgCard card = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_card();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDigCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDigCardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 digType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_digtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &digtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard card = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDigCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDigCardRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDigCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 digType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->digtype(), output);
  }

  // optional .GameMsg.MsgCard card = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::card(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDigCardRequest)
}

::google::protobuf::uint8* PlayerDigCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDigCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 digType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->digtype(), target);
  }

  // optional .GameMsg.MsgCard card = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::card(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDigCardRequest)
  return target;
}

size_t PlayerDigCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDigCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .GameMsg.MsgCard card = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 digType = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->digtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDigCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDigCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDigCardRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDigCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDigCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDigCardRequest)
    MergeFrom(*source);
  }
}

void PlayerDigCardRequest::MergeFrom(const PlayerDigCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDigCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_card()->::GameMsg::MsgCard::MergeFrom(from.card());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      digtype_ = from.digtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDigCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDigCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDigCardRequest::CopyFrom(const PlayerDigCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDigCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDigCardRequest::IsInitialized() const {
  return true;
}

void PlayerDigCardRequest::Swap(PlayerDigCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDigCardRequest::InternalSwap(PlayerDigCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(card_, other->card_);
  swap(userid_, other->userid_);
  swap(digtype_, other->digtype_);
}

::google::protobuf::Metadata PlayerDigCardRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDigCardResponse::InitAsDefaultInstance() {
}
class PlayerDigCardResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDigCardResponse::PlayerDigCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDigCardResponse)
}
PlayerDigCardResponse::PlayerDigCardResponse(const PlayerDigCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDigCardResponse)
}

void PlayerDigCardResponse::SharedCtor() {
}

PlayerDigCardResponse::~PlayerDigCardResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDigCardResponse)
  SharedDtor();
}

void PlayerDigCardResponse::SharedDtor() {
}

void PlayerDigCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDigCardResponse& PlayerDigCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDigCardResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDigCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDigCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDigCardResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDigCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDigCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDigCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDigCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDigCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDigCardResponse)
}

::google::protobuf::uint8* PlayerDigCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDigCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDigCardResponse)
  return target;
}

size_t PlayerDigCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDigCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDigCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDigCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDigCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDigCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDigCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDigCardResponse)
    MergeFrom(*source);
  }
}

void PlayerDigCardResponse::MergeFrom(const PlayerDigCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDigCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerDigCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDigCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDigCardResponse::CopyFrom(const PlayerDigCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDigCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDigCardResponse::IsInitialized() const {
  return true;
}

void PlayerDigCardResponse::Swap(PlayerDigCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDigCardResponse::InternalSwap(PlayerDigCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerDigCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDropRequest::InitAsDefaultInstance() {
}
class ApplyDropRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyDropRequest::kUserIdFieldNumber;
const int ApplyDropRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDropRequest::ApplyDropRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDropRequest)
}
ApplyDropRequest::ApplyDropRequest(const ApplyDropRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDropRequest)
}

void ApplyDropRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyDropRequest::~ApplyDropRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDropRequest)
  SharedDtor();
}

void ApplyDropRequest::SharedDtor() {
}

void ApplyDropRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDropRequest& ApplyDropRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDropRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDropRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDropRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDropRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDropRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDropRequest)
}

::google::protobuf::uint8* ApplyDropRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDropRequest)
  return target;
}

size_t ApplyDropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDropRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDropRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDropRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDropRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDropRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDropRequest)
    MergeFrom(*source);
  }
}

void ApplyDropRequest::MergeFrom(const ApplyDropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyDropRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDropRequest::CopyFrom(const ApplyDropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDropRequest::IsInitialized() const {
  return true;
}

void ApplyDropRequest::Swap(ApplyDropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDropRequest::InternalSwap(ApplyDropRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyDropRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDropResponse::InitAsDefaultInstance() {
}
class ApplyDropResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDropResponse::ApplyDropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDropResponse)
}
ApplyDropResponse::ApplyDropResponse(const ApplyDropResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDropResponse)
}

void ApplyDropResponse::SharedCtor() {
}

ApplyDropResponse::~ApplyDropResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDropResponse)
  SharedDtor();
}

void ApplyDropResponse::SharedDtor() {
}

void ApplyDropResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDropResponse& ApplyDropResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDropResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDropResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDropResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDropResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDropResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDropResponse)
}

::google::protobuf::uint8* ApplyDropResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDropResponse)
  return target;
}

size_t ApplyDropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDropResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDropResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDropResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDropResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDropResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDropResponse)
    MergeFrom(*source);
  }
}

void ApplyDropResponse::MergeFrom(const ApplyDropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyDropResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDropResponse::CopyFrom(const ApplyDropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDropResponse::IsInitialized() const {
  return true;
}

void ApplyDropResponse::Swap(ApplyDropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDropResponse::InternalSwap(ApplyDropResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyDropResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDropRequest::InitAsDefaultInstance() {
  ::GameMsg::_PlayerDropRequest_default_instance_._instance.get_mutable()->dropcard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class PlayerDropRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dropscore(PlayerDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dropchips(PlayerDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::GameMsg::MsgCard& dropcard(const PlayerDropRequest* msg);
  static void set_has_dropcard(PlayerDropRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::GameMsg::MsgCard&
PlayerDropRequest::HasBitSetters::dropcard(const PlayerDropRequest* msg) {
  return *msg->dropcard_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDropRequest::kUserIdFieldNumber;
const int PlayerDropRequest::kDropScoreFieldNumber;
const int PlayerDropRequest::kDropChipsFieldNumber;
const int PlayerDropRequest::kDropCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDropRequest::PlayerDropRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDropRequest)
}
PlayerDropRequest::PlayerDropRequest(const PlayerDropRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dropcard()) {
    dropcard_ = new ::GameMsg::MsgCard(*from.dropcard_);
  } else {
    dropcard_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropchips_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(dropchips_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDropRequest)
}

void PlayerDropRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerDropRequest_GameMsg_2eproto.base);
  ::memset(&dropcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropchips_) -
      reinterpret_cast<char*>(&dropcard_)) + sizeof(dropchips_));
}

PlayerDropRequest::~PlayerDropRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDropRequest)
  SharedDtor();
}

void PlayerDropRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dropcard_;
}

void PlayerDropRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDropRequest& PlayerDropRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDropRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dropcard_ != NULL);
    dropcard_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropchips_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(dropchips_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDropRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDropRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 dropScore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_dropscore(value);
        break;
      }
      // optional int64 dropChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_dropchips(value);
        break;
      }
      // optional .GameMsg.MsgCard dropCard = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_dropcard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDropRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropScore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_dropscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dropChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_dropchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard dropCard = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDropRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 dropScore = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropscore(), output);
  }

  // optional int64 dropChips = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dropchips(), output);
  }

  // optional .GameMsg.MsgCard dropCard = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dropcard(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDropRequest)
}

::google::protobuf::uint8* PlayerDropRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 dropScore = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropscore(), target);
  }

  // optional int64 dropChips = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dropchips(), target);
  }

  // optional .GameMsg.MsgCard dropCard = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dropcard(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDropRequest)
  return target;
}

size_t PlayerDropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDropRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .GameMsg.MsgCard dropCard = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dropcard_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 dropScore = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropscore());
    }

    // optional int64 dropChips = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropchips());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDropRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDropRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDropRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDropRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDropRequest)
    MergeFrom(*source);
  }
}

void PlayerDropRequest::MergeFrom(const PlayerDropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dropcard()->::GameMsg::MsgCard::MergeFrom(from.dropcard());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      dropscore_ = from.dropscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      dropchips_ = from.dropchips_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDropRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDropRequest::CopyFrom(const PlayerDropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDropRequest::IsInitialized() const {
  return true;
}

void PlayerDropRequest::Swap(PlayerDropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDropRequest::InternalSwap(PlayerDropRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dropcard_, other->dropcard_);
  swap(userid_, other->userid_);
  swap(dropscore_, other->dropscore_);
  swap(dropchips_, other->dropchips_);
}

::google::protobuf::Metadata PlayerDropRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDropResponse::InitAsDefaultInstance() {
}
class PlayerDropResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDropResponse::PlayerDropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDropResponse)
}
PlayerDropResponse::PlayerDropResponse(const PlayerDropResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDropResponse)
}

void PlayerDropResponse::SharedCtor() {
}

PlayerDropResponse::~PlayerDropResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDropResponse)
  SharedDtor();
}

void PlayerDropResponse::SharedDtor() {
}

void PlayerDropResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDropResponse& PlayerDropResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDropResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDropResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDropResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDropResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDropResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDropResponse)
}

::google::protobuf::uint8* PlayerDropResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDropResponse)
  return target;
}

size_t PlayerDropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDropResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDropResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDropResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDropResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDropResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDropResponse)
    MergeFrom(*source);
  }
}

void PlayerDropResponse::MergeFrom(const PlayerDropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerDropResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDropResponse::CopyFrom(const PlayerDropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDropResponse::IsInitialized() const {
  return true;
}

void PlayerDropResponse::Swap(PlayerDropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDropResponse::InternalSwap(PlayerDropResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerDropResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDeclareRequest::InitAsDefaultInstance() {
  ::GameMsg::_ApplyDeclareRequest_default_instance_._instance.get_mutable()->declarecard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class ApplyDeclareRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::GameMsg::MsgCard& declarecard(const ApplyDeclareRequest* msg);
  static void set_has_declarecard(ApplyDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::GameMsg::MsgCard&
ApplyDeclareRequest::HasBitSetters::declarecard(const ApplyDeclareRequest* msg) {
  return *msg->declarecard_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyDeclareRequest::kUserIdFieldNumber;
const int ApplyDeclareRequest::kRoomIdFieldNumber;
const int ApplyDeclareRequest::kDeclareCardFieldNumber;
const int ApplyDeclareRequest::kCardGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDeclareRequest::ApplyDeclareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDeclareRequest)
}
ApplyDeclareRequest::ApplyDeclareRequest(const ApplyDeclareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_declarecard()) {
    declarecard_ = new ::GameMsg::MsgCard(*from.declarecard_);
  } else {
    declarecard_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDeclareRequest)
}

void ApplyDeclareRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyDeclareRequest_GameMsg_2eproto.base);
  ::memset(&declarecard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&declarecard_)) + sizeof(roomid_));
}

ApplyDeclareRequest::~ApplyDeclareRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDeclareRequest)
  SharedDtor();
}

void ApplyDeclareRequest::SharedDtor() {
  if (this != internal_default_instance()) delete declarecard_;
}

void ApplyDeclareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDeclareRequest& ApplyDeclareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDeclareRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDeclareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(declarecard_ != NULL);
    declarecard_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDeclareRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDeclareRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional .GameMsg.MsgCard declareCard = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_declarecard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDeclareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDeclareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard declareCard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_declarecard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDeclareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDeclareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDeclareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional .GameMsg.MsgCard declareCard = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::declarecard(this), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDeclareRequest)
}

::google::protobuf::uint8* ApplyDeclareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional .GameMsg.MsgCard declareCard = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::declarecard(this), deterministic, target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDeclareRequest)
  return target;
}

size_t ApplyDeclareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDeclareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .GameMsg.MsgCard declareCard = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *declarecard_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDeclareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDeclareRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDeclareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDeclareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDeclareRequest)
    MergeFrom(*source);
  }
}

void ApplyDeclareRequest::MergeFrom(const ApplyDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_declarecard()->::GameMsg::MsgCard::MergeFrom(from.declarecard());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyDeclareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDeclareRequest::CopyFrom(const ApplyDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDeclareRequest::IsInitialized() const {
  return true;
}

void ApplyDeclareRequest::Swap(ApplyDeclareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDeclareRequest::InternalSwap(ApplyDeclareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  swap(declarecard_, other->declarecard_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyDeclareRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyDeclareResponse::InitAsDefaultInstance() {
}
class ApplyDeclareResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyDeclareResponse::ApplyDeclareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyDeclareResponse)
}
ApplyDeclareResponse::ApplyDeclareResponse(const ApplyDeclareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyDeclareResponse)
}

void ApplyDeclareResponse::SharedCtor() {
}

ApplyDeclareResponse::~ApplyDeclareResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyDeclareResponse)
  SharedDtor();
}

void ApplyDeclareResponse::SharedDtor() {
}

void ApplyDeclareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyDeclareResponse& ApplyDeclareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyDeclareResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyDeclareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyDeclareResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyDeclareResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyDeclareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyDeclareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyDeclareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyDeclareResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyDeclareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyDeclareResponse)
}

::google::protobuf::uint8* ApplyDeclareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyDeclareResponse)
  return target;
}

size_t ApplyDeclareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyDeclareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyDeclareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyDeclareResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyDeclareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyDeclareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyDeclareResponse)
    MergeFrom(*source);
  }
}

void ApplyDeclareResponse::MergeFrom(const ApplyDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyDeclareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDeclareResponse::CopyFrom(const ApplyDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDeclareResponse::IsInitialized() const {
  return true;
}

void ApplyDeclareResponse::Swap(ApplyDeclareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyDeclareResponse::InternalSwap(ApplyDeclareResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyDeclareResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDeclareRequest::InitAsDefaultInstance() {
  ::GameMsg::_PlayerDeclareRequest_default_instance_._instance.get_mutable()->declarecard_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class PlayerDeclareRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::GameMsg::MsgCard& declarecard(const PlayerDeclareRequest* msg);
  static void set_has_declarecard(PlayerDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::GameMsg::MsgCard&
PlayerDeclareRequest::HasBitSetters::declarecard(const PlayerDeclareRequest* msg) {
  return *msg->declarecard_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDeclareRequest::kUserIdFieldNumber;
const int PlayerDeclareRequest::kDeclareCardFieldNumber;
const int PlayerDeclareRequest::kCardGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDeclareRequest::PlayerDeclareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDeclareRequest)
}
PlayerDeclareRequest::PlayerDeclareRequest(const PlayerDeclareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_declarecard()) {
    declarecard_ = new ::GameMsg::MsgCard(*from.declarecard_);
  } else {
    declarecard_ = NULL;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDeclareRequest)
}

void PlayerDeclareRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerDeclareRequest_GameMsg_2eproto.base);
  ::memset(&declarecard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&declarecard_)) + sizeof(userid_));
}

PlayerDeclareRequest::~PlayerDeclareRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDeclareRequest)
  SharedDtor();
}

void PlayerDeclareRequest::SharedDtor() {
  if (this != internal_default_instance()) delete declarecard_;
}

void PlayerDeclareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDeclareRequest& PlayerDeclareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDeclareRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDeclareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(declarecard_ != NULL);
    declarecard_->Clear();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDeclareRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDeclareRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional .GameMsg.MsgCard declareCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_declarecard();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDeclareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDeclareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard declareCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_declarecard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDeclareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDeclareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDeclareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .GameMsg.MsgCard declareCard = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::declarecard(this), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDeclareRequest)
}

::google::protobuf::uint8* PlayerDeclareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .GameMsg.MsgCard declareCard = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::declarecard(this), deterministic, target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDeclareRequest)
  return target;
}

size_t PlayerDeclareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDeclareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameMsg.MsgCard declareCard = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *declarecard_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDeclareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDeclareRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDeclareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDeclareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDeclareRequest)
    MergeFrom(*source);
  }
}

void PlayerDeclareRequest::MergeFrom(const PlayerDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_declarecard()->::GameMsg::MsgCard::MergeFrom(from.declarecard());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerDeclareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDeclareRequest::CopyFrom(const PlayerDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDeclareRequest::IsInitialized() const {
  return true;
}

void PlayerDeclareRequest::Swap(PlayerDeclareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDeclareRequest::InternalSwap(PlayerDeclareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  swap(declarecard_, other->declarecard_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerDeclareRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerDeclareResponse::InitAsDefaultInstance() {
}
class PlayerDeclareResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDeclareResponse::PlayerDeclareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerDeclareResponse)
}
PlayerDeclareResponse::PlayerDeclareResponse(const PlayerDeclareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerDeclareResponse)
}

void PlayerDeclareResponse::SharedCtor() {
}

PlayerDeclareResponse::~PlayerDeclareResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerDeclareResponse)
  SharedDtor();
}

void PlayerDeclareResponse::SharedDtor() {
}

void PlayerDeclareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerDeclareResponse& PlayerDeclareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerDeclareResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerDeclareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerDeclareResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerDeclareResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerDeclareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerDeclareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerDeclareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerDeclareResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerDeclareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerDeclareResponse)
}

::google::protobuf::uint8* PlayerDeclareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerDeclareResponse)
  return target;
}

size_t PlayerDeclareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerDeclareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDeclareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDeclareResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerDeclareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerDeclareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerDeclareResponse)
    MergeFrom(*source);
  }
}

void PlayerDeclareResponse::MergeFrom(const PlayerDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerDeclareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDeclareResponse::CopyFrom(const PlayerDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDeclareResponse::IsInitialized() const {
  return true;
}

void PlayerDeclareResponse::Swap(PlayerDeclareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDeclareResponse::InternalSwap(PlayerDeclareResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerDeclareResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyLoseDeclareRequest::InitAsDefaultInstance() {
}
class ApplyLoseDeclareRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyLoseDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyLoseDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyLoseDeclareRequest::kUserIdFieldNumber;
const int ApplyLoseDeclareRequest::kRoomIdFieldNumber;
const int ApplyLoseDeclareRequest::kCardGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyLoseDeclareRequest::ApplyLoseDeclareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyLoseDeclareRequest)
}
ApplyLoseDeclareRequest::ApplyLoseDeclareRequest(const ApplyLoseDeclareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyLoseDeclareRequest)
}

void ApplyLoseDeclareRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyLoseDeclareRequest_GameMsg_2eproto.base);
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyLoseDeclareRequest::~ApplyLoseDeclareRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyLoseDeclareRequest)
  SharedDtor();
}

void ApplyLoseDeclareRequest::SharedDtor() {
}

void ApplyLoseDeclareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyLoseDeclareRequest& ApplyLoseDeclareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyLoseDeclareRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyLoseDeclareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyLoseDeclareRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyLoseDeclareRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyLoseDeclareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyLoseDeclareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyLoseDeclareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyLoseDeclareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyLoseDeclareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyLoseDeclareRequest)
}

::google::protobuf::uint8* ApplyLoseDeclareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyLoseDeclareRequest)
  return target;
}

size_t ApplyLoseDeclareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyLoseDeclareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyLoseDeclareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyLoseDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyLoseDeclareRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyLoseDeclareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyLoseDeclareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyLoseDeclareRequest)
    MergeFrom(*source);
  }
}

void ApplyLoseDeclareRequest::MergeFrom(const ApplyLoseDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyLoseDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyLoseDeclareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyLoseDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyLoseDeclareRequest::CopyFrom(const ApplyLoseDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyLoseDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyLoseDeclareRequest::IsInitialized() const {
  return true;
}

void ApplyLoseDeclareRequest::Swap(ApplyLoseDeclareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyLoseDeclareRequest::InternalSwap(ApplyLoseDeclareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyLoseDeclareRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyLoseDeclareResponse::InitAsDefaultInstance() {
}
class ApplyLoseDeclareResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyLoseDeclareResponse::ApplyLoseDeclareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyLoseDeclareResponse)
}
ApplyLoseDeclareResponse::ApplyLoseDeclareResponse(const ApplyLoseDeclareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyLoseDeclareResponse)
}

void ApplyLoseDeclareResponse::SharedCtor() {
}

ApplyLoseDeclareResponse::~ApplyLoseDeclareResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyLoseDeclareResponse)
  SharedDtor();
}

void ApplyLoseDeclareResponse::SharedDtor() {
}

void ApplyLoseDeclareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyLoseDeclareResponse& ApplyLoseDeclareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyLoseDeclareResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyLoseDeclareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyLoseDeclareResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyLoseDeclareResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyLoseDeclareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyLoseDeclareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyLoseDeclareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyLoseDeclareResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyLoseDeclareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyLoseDeclareResponse)
}

::google::protobuf::uint8* ApplyLoseDeclareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyLoseDeclareResponse)
  return target;
}

size_t ApplyLoseDeclareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyLoseDeclareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyLoseDeclareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyLoseDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyLoseDeclareResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyLoseDeclareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyLoseDeclareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyLoseDeclareResponse)
    MergeFrom(*source);
  }
}

void ApplyLoseDeclareResponse::MergeFrom(const ApplyLoseDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyLoseDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyLoseDeclareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyLoseDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyLoseDeclareResponse::CopyFrom(const ApplyLoseDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyLoseDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyLoseDeclareResponse::IsInitialized() const {
  return true;
}

void ApplyLoseDeclareResponse::Swap(ApplyLoseDeclareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyLoseDeclareResponse::InternalSwap(ApplyLoseDeclareResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyLoseDeclareResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerLoseDeclareRequest::InitAsDefaultInstance() {
}
class PlayerLoseDeclareRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerLoseDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(PlayerLoseDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chips(PlayerLoseDeclareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLoseDeclareRequest::kUserIdFieldNumber;
const int PlayerLoseDeclareRequest::kCardGroupFieldNumber;
const int PlayerLoseDeclareRequest::kScoreFieldNumber;
const int PlayerLoseDeclareRequest::kChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoseDeclareRequest::PlayerLoseDeclareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerLoseDeclareRequest)
}
PlayerLoseDeclareRequest::PlayerLoseDeclareRequest(const PlayerLoseDeclareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chips_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(chips_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerLoseDeclareRequest)
}

void PlayerLoseDeclareRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerLoseDeclareRequest_GameMsg_2eproto.base);
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chips_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(chips_));
}

PlayerLoseDeclareRequest::~PlayerLoseDeclareRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerLoseDeclareRequest)
  SharedDtor();
}

void PlayerLoseDeclareRequest::SharedDtor() {
}

void PlayerLoseDeclareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoseDeclareRequest& PlayerLoseDeclareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerLoseDeclareRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoseDeclareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chips_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(chips_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLoseDeclareRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerLoseDeclareRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional int32 score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_score(value);
        break;
      }
      // optional int64 chips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chips(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLoseDeclareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerLoseDeclareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 chips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_chips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerLoseDeclareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerLoseDeclareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLoseDeclareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int64 chips = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->chips(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerLoseDeclareRequest)
}

::google::protobuf::uint8* PlayerLoseDeclareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerLoseDeclareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int64 chips = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->chips(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerLoseDeclareRequest)
  return target;
}

size_t PlayerLoseDeclareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerLoseDeclareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int64 chips = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chips());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoseDeclareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerLoseDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoseDeclareRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerLoseDeclareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerLoseDeclareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerLoseDeclareRequest)
    MergeFrom(*source);
  }
}

void PlayerLoseDeclareRequest::MergeFrom(const PlayerLoseDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerLoseDeclareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      chips_ = from.chips_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerLoseDeclareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerLoseDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoseDeclareRequest::CopyFrom(const PlayerLoseDeclareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerLoseDeclareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoseDeclareRequest::IsInitialized() const {
  return true;
}

void PlayerLoseDeclareRequest::Swap(PlayerLoseDeclareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoseDeclareRequest::InternalSwap(PlayerLoseDeclareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  swap(userid_, other->userid_);
  swap(score_, other->score_);
  swap(chips_, other->chips_);
}

::google::protobuf::Metadata PlayerLoseDeclareRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerLoseDeclareResponse::InitAsDefaultInstance() {
}
class PlayerLoseDeclareResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoseDeclareResponse::PlayerLoseDeclareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerLoseDeclareResponse)
}
PlayerLoseDeclareResponse::PlayerLoseDeclareResponse(const PlayerLoseDeclareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerLoseDeclareResponse)
}

void PlayerLoseDeclareResponse::SharedCtor() {
}

PlayerLoseDeclareResponse::~PlayerLoseDeclareResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerLoseDeclareResponse)
  SharedDtor();
}

void PlayerLoseDeclareResponse::SharedDtor() {
}

void PlayerLoseDeclareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoseDeclareResponse& PlayerLoseDeclareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerLoseDeclareResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoseDeclareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLoseDeclareResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerLoseDeclareResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLoseDeclareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerLoseDeclareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerLoseDeclareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerLoseDeclareResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLoseDeclareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerLoseDeclareResponse)
}

::google::protobuf::uint8* PlayerLoseDeclareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerLoseDeclareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerLoseDeclareResponse)
  return target;
}

size_t PlayerLoseDeclareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerLoseDeclareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoseDeclareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerLoseDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoseDeclareResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerLoseDeclareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerLoseDeclareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerLoseDeclareResponse)
    MergeFrom(*source);
  }
}

void PlayerLoseDeclareResponse::MergeFrom(const PlayerLoseDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerLoseDeclareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerLoseDeclareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerLoseDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoseDeclareResponse::CopyFrom(const PlayerLoseDeclareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerLoseDeclareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoseDeclareResponse::IsInitialized() const {
  return true;
}

void PlayerLoseDeclareResponse::Swap(PlayerLoseDeclareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoseDeclareResponse::InternalSwap(PlayerLoseDeclareResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerLoseDeclareResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPostCardRequest::InitAsDefaultInstance() {
  ::GameMsg::_ApplyPostCardRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class ApplyPostCardRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_roomid(ApplyPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::GameMsg::MsgCard& card(const ApplyPostCardRequest* msg);
  static void set_has_card(ApplyPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_appscore(ApplyPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::GameMsg::MsgCard&
ApplyPostCardRequest::HasBitSetters::card(const ApplyPostCardRequest* msg) {
  return *msg->card_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPostCardRequest::kUserIdFieldNumber;
const int ApplyPostCardRequest::kRoomIdFieldNumber;
const int ApplyPostCardRequest::kCardFieldNumber;
const int ApplyPostCardRequest::kAppScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPostCardRequest::ApplyPostCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPostCardRequest)
}
ApplyPostCardRequest::ApplyPostCardRequest(const ApplyPostCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::GameMsg::MsgCard(*from.card_);
  } else {
    card_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appscore_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(appscore_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPostCardRequest)
}

void ApplyPostCardRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyPostCardRequest_GameMsg_2eproto.base);
  ::memset(&card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&card_)) + sizeof(roomid_));
  appscore_ = -1;
}

ApplyPostCardRequest::~ApplyPostCardRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPostCardRequest)
  SharedDtor();
}

void ApplyPostCardRequest::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void ApplyPostCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPostCardRequest& ApplyPostCardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPostCardRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPostCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(card_ != NULL);
    card_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
    appscore_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPostCardRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPostCardRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // optional .GameMsg.MsgCard card = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_card();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional int32 appScore = 4 [default = -1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_appscore(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPostCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPostCardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard card = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appScore = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_appscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPostCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPostCardRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPostCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional .GameMsg.MsgCard card = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::card(this), output);
  }

  // optional int32 appScore = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPostCardRequest)
}

::google::protobuf::uint8* ApplyPostCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional .GameMsg.MsgCard card = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::card(this), deterministic, target);
  }

  // optional int32 appScore = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPostCardRequest)
  return target;
}

size_t ApplyPostCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPostCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .GameMsg.MsgCard card = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 appScore = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPostCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPostCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPostCardRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPostCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPostCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPostCardRequest)
    MergeFrom(*source);
  }
}

void ApplyPostCardRequest::MergeFrom(const ApplyPostCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPostCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_card()->::GameMsg::MsgCard::MergeFrom(from.card());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appscore_ = from.appscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyPostCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPostCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPostCardRequest::CopyFrom(const ApplyPostCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPostCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPostCardRequest::IsInitialized() const {
  return true;
}

void ApplyPostCardRequest::Swap(ApplyPostCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPostCardRequest::InternalSwap(ApplyPostCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(card_, other->card_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(appscore_, other->appscore_);
}

::google::protobuf::Metadata ApplyPostCardRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyPostCardResponse::InitAsDefaultInstance() {
}
class ApplyPostCardResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyPostCardResponse::kHandCardsFieldNumber;
const int ApplyPostCardResponse::kPoolCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyPostCardResponse::ApplyPostCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyPostCardResponse)
}
ApplyPostCardResponse::ApplyPostCardResponse(const ApplyPostCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      handcards_(from.handcards_),
      poolcards_(from.poolcards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyPostCardResponse)
}

void ApplyPostCardResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApplyPostCardResponse_GameMsg_2eproto.base);
}

ApplyPostCardResponse::~ApplyPostCardResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyPostCardResponse)
  SharedDtor();
}

void ApplyPostCardResponse::SharedDtor() {
}

void ApplyPostCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPostCardResponse& ApplyPostCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyPostCardResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyPostCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handcards_.Clear();
  poolcards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyPostCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyPostCardResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .GameMsg.MsgCard handCards = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_handcards();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .GameMsg.MsgCard poolCards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::MsgCard::_InternalParse;
          object = msg->add_poolcards();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyPostCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyPostCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameMsg.MsgCard handCards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_handcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.MsgCard poolCards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_poolcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyPostCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyPostCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyPostCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard handCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->handcards(static_cast<int>(i)),
      output);
  }

  // repeated .GameMsg.MsgCard poolCards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poolcards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->poolcards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyPostCardResponse)
}

::google::protobuf::uint8* ApplyPostCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard handCards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->handcards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameMsg.MsgCard poolCards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poolcards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->poolcards(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyPostCardResponse)
  return target;
}

size_t ApplyPostCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyPostCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.MsgCard handCards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->handcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->handcards(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.MsgCard poolCards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->poolcards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->poolcards(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPostCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyPostCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPostCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyPostCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyPostCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyPostCardResponse)
    MergeFrom(*source);
  }
}

void ApplyPostCardResponse::MergeFrom(const ApplyPostCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyPostCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  handcards_.MergeFrom(from.handcards_);
  poolcards_.MergeFrom(from.poolcards_);
}

void ApplyPostCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyPostCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPostCardResponse::CopyFrom(const ApplyPostCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyPostCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPostCardResponse::IsInitialized() const {
  return true;
}

void ApplyPostCardResponse::Swap(ApplyPostCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPostCardResponse::InternalSwap(ApplyPostCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&handcards_)->InternalSwap(CastToBase(&other->handcards_));
  CastToBase(&poolcards_)->InternalSwap(CastToBase(&other->poolcards_));
}

::google::protobuf::Metadata ApplyPostCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPostCardRequest::InitAsDefaultInstance() {
  ::GameMsg::_PlayerPostCardRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::GameMsg::MsgCard*>(
      ::GameMsg::MsgCard::internal_default_instance());
}
class PlayerPostCardRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::GameMsg::MsgCard& card(const PlayerPostCardRequest* msg);
  static void set_has_card(PlayerPostCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::GameMsg::MsgCard&
PlayerPostCardRequest::HasBitSetters::card(const PlayerPostCardRequest* msg) {
  return *msg->card_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPostCardRequest::kUserIdFieldNumber;
const int PlayerPostCardRequest::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPostCardRequest::PlayerPostCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPostCardRequest)
}
PlayerPostCardRequest::PlayerPostCardRequest(const PlayerPostCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::GameMsg::MsgCard(*from.card_);
  } else {
    card_ = NULL;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPostCardRequest)
}

void PlayerPostCardRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerPostCardRequest_GameMsg_2eproto.base);
  ::memset(&card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&card_)) + sizeof(userid_));
}

PlayerPostCardRequest::~PlayerPostCardRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPostCardRequest)
  SharedDtor();
}

void PlayerPostCardRequest::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void PlayerPostCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPostCardRequest& PlayerPostCardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPostCardRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPostCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(card_ != NULL);
    card_->Clear();
  }
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPostCardRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPostCardRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional .GameMsg.MsgCard card = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameMsg::MsgCard::_InternalParse;
        object = msg->mutable_card();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPostCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPostCardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameMsg.MsgCard card = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPostCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPostCardRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPostCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .GameMsg.MsgCard card = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::card(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPostCardRequest)
}

::google::protobuf::uint8* PlayerPostCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPostCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .GameMsg.MsgCard card = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::card(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPostCardRequest)
  return target;
}

size_t PlayerPostCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPostCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .GameMsg.MsgCard card = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_);
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPostCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPostCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPostCardRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPostCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPostCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPostCardRequest)
    MergeFrom(*source);
  }
}

void PlayerPostCardRequest::MergeFrom(const PlayerPostCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPostCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_card()->::GameMsg::MsgCard::MergeFrom(from.card());
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPostCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPostCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPostCardRequest::CopyFrom(const PlayerPostCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPostCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPostCardRequest::IsInitialized() const {
  return true;
}

void PlayerPostCardRequest::Swap(PlayerPostCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPostCardRequest::InternalSwap(PlayerPostCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(card_, other->card_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerPostCardRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerPostCardResponse::InitAsDefaultInstance() {
}
class PlayerPostCardResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPostCardResponse::PlayerPostCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerPostCardResponse)
}
PlayerPostCardResponse::PlayerPostCardResponse(const PlayerPostCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerPostCardResponse)
}

void PlayerPostCardResponse::SharedCtor() {
}

PlayerPostCardResponse::~PlayerPostCardResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerPostCardResponse)
  SharedDtor();
}

void PlayerPostCardResponse::SharedDtor() {
}

void PlayerPostCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerPostCardResponse& PlayerPostCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerPostCardResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerPostCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerPostCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerPostCardResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerPostCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerPostCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerPostCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerPostCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerPostCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerPostCardResponse)
}

::google::protobuf::uint8* PlayerPostCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerPostCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerPostCardResponse)
  return target;
}

size_t PlayerPostCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerPostCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerPostCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerPostCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPostCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerPostCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerPostCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerPostCardResponse)
    MergeFrom(*source);
  }
}

void PlayerPostCardResponse::MergeFrom(const PlayerPostCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerPostCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerPostCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerPostCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPostCardResponse::CopyFrom(const PlayerPostCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerPostCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPostCardResponse::IsInitialized() const {
  return true;
}

void PlayerPostCardResponse::Swap(PlayerPostCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPostCardResponse::InternalSwap(PlayerPostCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerPostCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoserInfo::InitAsDefaultInstance() {
}
class LoserInfo::HasBitSetters {
 public:
  static void set_has_userid(LoserInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_loseaccount(LoserInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(LoserInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_isdrop(LoserInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_cardscore(LoserInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoserInfo::kUserIdFieldNumber;
const int LoserInfo::kLoseAccountFieldNumber;
const int LoserInfo::kCardGroupFieldNumber;
const int LoserInfo::kScoreFieldNumber;
const int LoserInfo::kIsDropFieldNumber;
const int LoserInfo::kCardScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoserInfo::LoserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.LoserInfo)
}
LoserInfo::LoserInfo(const LoserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cardgroup_(from.cardgroup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loseaccount_, &from.loseaccount_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardscore_) -
    reinterpret_cast<char*>(&loseaccount_)) + sizeof(cardscore_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.LoserInfo)
}

void LoserInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoserInfo_GameMsg_2eproto.base);
  ::memset(&loseaccount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardscore_) -
      reinterpret_cast<char*>(&loseaccount_)) + sizeof(cardscore_));
}

LoserInfo::~LoserInfo() {
  // @@protoc_insertion_point(destructor:GameMsg.LoserInfo)
  SharedDtor();
}

void LoserInfo::SharedDtor() {
}

void LoserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoserInfo& LoserInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoserInfo_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void LoserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.LoserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cardgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&loseaccount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardscore_) -
        reinterpret_cast<char*>(&loseaccount_)) + sizeof(cardscore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoserInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoserInfo*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int64 loseAccount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_loseaccount(value);
        break;
      }
      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_cardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional int32 score = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_score(value);
        break;
      }
      // optional int32 isDrop = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_isdrop(value);
        break;
      }
      // optional int32 cardScore = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cardscore(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.LoserInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 loseAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_loseaccount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &loseaccount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup cardGroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isDrop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_isdrop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdrop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cardScore = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_cardscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.LoserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.LoserInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.LoserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int64 loseAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->loseaccount(), output);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cardgroup(static_cast<int>(i)),
      output);
  }

  // optional int32 score = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 isDrop = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isdrop(), output);
  }

  // optional int32 cardScore = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.LoserInfo)
}

::google::protobuf::uint8* LoserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.LoserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int64 loseAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->loseaccount(), target);
  }

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cardgroup(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 score = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 isDrop = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isdrop(), target);
  }

  // optional int32 cardScore = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.LoserInfo)
  return target;
}

size_t LoserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.LoserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup cardGroup = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cardgroup(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 loseAccount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->loseaccount());
    }

    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 score = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 isDrop = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdrop());
    }

    // optional int32 cardScore = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.LoserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoserInfo* source =
      ::google::protobuf::DynamicCastToGenerated<LoserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.LoserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.LoserInfo)
    MergeFrom(*source);
  }
}

void LoserInfo::MergeFrom(const LoserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.LoserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cardgroup_.MergeFrom(from.cardgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      loseaccount_ = from.loseaccount_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      isdrop_ = from.isdrop_;
    }
    if (cached_has_bits & 0x00000010u) {
      cardscore_ = from.cardscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.LoserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoserInfo::CopyFrom(const LoserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.LoserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoserInfo::IsInitialized() const {
  return true;
}

void LoserInfo::Swap(LoserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoserInfo::InternalSwap(LoserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cardgroup_)->InternalSwap(CastToBase(&other->cardgroup_));
  swap(loseaccount_, other->loseaccount_);
  swap(userid_, other->userid_);
  swap(score_, other->score_);
  swap(isdrop_, other->isdrop_);
  swap(cardscore_, other->cardscore_);
}

::google::protobuf::Metadata LoserInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameOverRequest::InitAsDefaultInstance() {
}
class GameOverRequest::HasBitSetters {
 public:
  static void set_has_winnerid(GameOverRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_winaccount(GameOverRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winnerscore(GameOverRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gameovertype(GameOverRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_winnercardscore(GameOverRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverRequest::kWinnerIdFieldNumber;
const int GameOverRequest::kWinAccountFieldNumber;
const int GameOverRequest::kWinnerCardGroupFieldNumber;
const int GameOverRequest::kLoserInfoFieldNumber;
const int GameOverRequest::kPlayerChipsFieldNumber;
const int GameOverRequest::kWinnerScoreFieldNumber;
const int GameOverRequest::kGameoverTypeFieldNumber;
const int GameOverRequest::kWinnerCardScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverRequest::GameOverRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.GameOverRequest)
}
GameOverRequest::GameOverRequest(const GameOverRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      winnercardgroup_(from.winnercardgroup_),
      loserinfo_(from.loserinfo_),
      playerchips_(from.playerchips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&winaccount_, &from.winaccount_,
    static_cast<size_t>(reinterpret_cast<char*>(&winnercardscore_) -
    reinterpret_cast<char*>(&winaccount_)) + sizeof(winnercardscore_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.GameOverRequest)
}

void GameOverRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameOverRequest_GameMsg_2eproto.base);
  ::memset(&winaccount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winnercardscore_) -
      reinterpret_cast<char*>(&winaccount_)) + sizeof(winnercardscore_));
}

GameOverRequest::~GameOverRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.GameOverRequest)
  SharedDtor();
}

void GameOverRequest::SharedDtor() {
}

void GameOverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameOverRequest& GameOverRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameOverRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void GameOverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.GameOverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winnercardgroup_.Clear();
  loserinfo_.Clear();
  playerchips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&winaccount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winnercardscore_) -
        reinterpret_cast<char*>(&winaccount_)) + sizeof(winnercardscore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameOverRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameOverRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 winnerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_winnerid(value);
        break;
      }
      // optional int64 winAccount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_winaccount(value);
        break;
      }
      // repeated .GameMsg.PB_CardGroup winnerCardGroup = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PB_CardGroup::_InternalParse;
          object = msg->add_winnercardgroup();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .GameMsg.LoserInfo loserInfo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::LoserInfo::_InternalParse;
          object = msg->add_loserinfo();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .GameMsg.PlayerChips playerChips = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameMsg::PlayerChips::_InternalParse;
          object = msg->add_playerchips();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional int32 winnerScore = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_winnerscore(value);
        break;
      }
      // optional int32 gameoverType = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gameovertype(value);
        break;
      }
      // optional int32 winnerCardScore = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_winnercardscore(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameOverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.GameOverRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winnerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_winnerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 winAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winaccount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winaccount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PB_CardGroup winnerCardGroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_winnercardgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.LoserInfo loserInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_loserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameMsg.PlayerChips playerChips = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playerchips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 winnerScore = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_winnerscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnerscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gameoverType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_gameovertype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameovertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 winnerCardScore = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_winnercardscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnercardscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.GameOverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.GameOverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameOverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.GameOverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 winnerId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winnerid(), output);
  }

  // optional int64 winAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->winaccount(), output);
  }

  // repeated .GameMsg.PB_CardGroup winnerCardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->winnercardgroup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->winnercardgroup(static_cast<int>(i)),
      output);
  }

  // repeated .GameMsg.LoserInfo loserInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loserinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->loserinfo(static_cast<int>(i)),
      output);
  }

  // repeated .GameMsg.PlayerChips playerChips = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerchips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->playerchips(static_cast<int>(i)),
      output);
  }

  // optional int32 winnerScore = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winnerscore(), output);
  }

  // optional int32 gameoverType = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gameovertype(), output);
  }

  // optional int32 winnerCardScore = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->winnercardscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.GameOverRequest)
}

::google::protobuf::uint8* GameOverRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.GameOverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 winnerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winnerid(), target);
  }

  // optional int64 winAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->winaccount(), target);
  }

  // repeated .GameMsg.PB_CardGroup winnerCardGroup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->winnercardgroup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->winnercardgroup(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameMsg.LoserInfo loserInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loserinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->loserinfo(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameMsg.PlayerChips playerChips = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerchips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->playerchips(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 winnerScore = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winnerscore(), target);
  }

  // optional int32 gameoverType = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gameovertype(), target);
  }

  // optional int32 winnerCardScore = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->winnercardscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.GameOverRequest)
  return target;
}

size_t GameOverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.GameOverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMsg.PB_CardGroup winnerCardGroup = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->winnercardgroup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->winnercardgroup(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.LoserInfo loserInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->loserinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->loserinfo(static_cast<int>(i)));
    }
  }

  // repeated .GameMsg.PlayerChips playerChips = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->playerchips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playerchips(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 winAccount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winaccount());
    }

    // optional int32 winnerId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnerid());
    }

    // optional int32 winnerScore = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnerscore());
    }

    // optional int32 gameoverType = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameovertype());
    }

    // optional int32 winnerCardScore = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnercardscore());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameOverRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.GameOverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameOverRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.GameOverRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.GameOverRequest)
    MergeFrom(*source);
  }
}

void GameOverRequest::MergeFrom(const GameOverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.GameOverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winnercardgroup_.MergeFrom(from.winnercardgroup_);
  loserinfo_.MergeFrom(from.loserinfo_);
  playerchips_.MergeFrom(from.playerchips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      winaccount_ = from.winaccount_;
    }
    if (cached_has_bits & 0x00000002u) {
      winnerid_ = from.winnerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      winnerscore_ = from.winnerscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameovertype_ = from.gameovertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      winnercardscore_ = from.winnercardscore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameOverRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.GameOverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverRequest::CopyFrom(const GameOverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.GameOverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverRequest::IsInitialized() const {
  return true;
}

void GameOverRequest::Swap(GameOverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverRequest::InternalSwap(GameOverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&winnercardgroup_)->InternalSwap(CastToBase(&other->winnercardgroup_));
  CastToBase(&loserinfo_)->InternalSwap(CastToBase(&other->loserinfo_));
  CastToBase(&playerchips_)->InternalSwap(CastToBase(&other->playerchips_));
  swap(winaccount_, other->winaccount_);
  swap(winnerid_, other->winnerid_);
  swap(winnerscore_, other->winnerscore_);
  swap(gameovertype_, other->gameovertype_);
  swap(winnercardscore_, other->winnercardscore_);
}

::google::protobuf::Metadata GameOverRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameOverResponse::InitAsDefaultInstance() {
}
class GameOverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverResponse::GameOverResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.GameOverResponse)
}
GameOverResponse::GameOverResponse(const GameOverResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.GameOverResponse)
}

void GameOverResponse::SharedCtor() {
}

GameOverResponse::~GameOverResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.GameOverResponse)
  SharedDtor();
}

void GameOverResponse::SharedDtor() {
}

void GameOverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameOverResponse& GameOverResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameOverResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void GameOverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.GameOverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameOverResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameOverResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameOverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.GameOverResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.GameOverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.GameOverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameOverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.GameOverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.GameOverResponse)
}

::google::protobuf::uint8* GameOverResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.GameOverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.GameOverResponse)
  return target;
}

size_t GameOverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.GameOverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameOverResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.GameOverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameOverResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.GameOverResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.GameOverResponse)
    MergeFrom(*source);
  }
}

void GameOverResponse::MergeFrom(const GameOverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.GameOverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameOverResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.GameOverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverResponse::CopyFrom(const GameOverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.GameOverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverResponse::IsInitialized() const {
  return true;
}

void GameOverResponse::Swap(GameOverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverResponse::InternalSwap(GameOverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata GameOverResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyRoomStatusRequest::InitAsDefaultInstance() {
}
class ApplyRoomStatusRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyRoomStatusRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyRoomStatusRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyRoomStatusRequest::kUserIdFieldNumber;
const int ApplyRoomStatusRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyRoomStatusRequest::ApplyRoomStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyRoomStatusRequest)
}
ApplyRoomStatusRequest::ApplyRoomStatusRequest(const ApplyRoomStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyRoomStatusRequest)
}

void ApplyRoomStatusRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyRoomStatusRequest::~ApplyRoomStatusRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyRoomStatusRequest)
  SharedDtor();
}

void ApplyRoomStatusRequest::SharedDtor() {
}

void ApplyRoomStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyRoomStatusRequest& ApplyRoomStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyRoomStatusRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyRoomStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyRoomStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyRoomStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyRoomStatusRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyRoomStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyRoomStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyRoomStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyRoomStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyRoomStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyRoomStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyRoomStatusRequest)
}

::google::protobuf::uint8* ApplyRoomStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyRoomStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyRoomStatusRequest)
  return target;
}

size_t ApplyRoomStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyRoomStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyRoomStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyRoomStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyRoomStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyRoomStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyRoomStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyRoomStatusRequest)
    MergeFrom(*source);
  }
}

void ApplyRoomStatusRequest::MergeFrom(const ApplyRoomStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyRoomStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyRoomStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyRoomStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyRoomStatusRequest::CopyFrom(const ApplyRoomStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyRoomStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRoomStatusRequest::IsInitialized() const {
  return true;
}

void ApplyRoomStatusRequest::Swap(ApplyRoomStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyRoomStatusRequest::InternalSwap(ApplyRoomStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyRoomStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyRoomStatusResponse::InitAsDefaultInstance() {
}
class ApplyRoomStatusResponse::HasBitSetters {
 public:
  static void set_has_status(ApplyRoomStatusResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyRoomStatusResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyRoomStatusResponse::ApplyRoomStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyRoomStatusResponse)
}
ApplyRoomStatusResponse::ApplyRoomStatusResponse(const ApplyRoomStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyRoomStatusResponse)
}

void ApplyRoomStatusResponse::SharedCtor() {
  status_ = 0;
}

ApplyRoomStatusResponse::~ApplyRoomStatusResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyRoomStatusResponse)
  SharedDtor();
}

void ApplyRoomStatusResponse::SharedDtor() {
}

void ApplyRoomStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyRoomStatusResponse& ApplyRoomStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyRoomStatusResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyRoomStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyRoomStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyRoomStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyRoomStatusResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_status(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyRoomStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyRoomStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyRoomStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyRoomStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyRoomStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyRoomStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyRoomStatusResponse)
}

::google::protobuf::uint8* ApplyRoomStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyRoomStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyRoomStatusResponse)
  return target;
}

size_t ApplyRoomStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyRoomStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyRoomStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyRoomStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyRoomStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyRoomStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyRoomStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyRoomStatusResponse)
    MergeFrom(*source);
  }
}

void ApplyRoomStatusResponse::MergeFrom(const ApplyRoomStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyRoomStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void ApplyRoomStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyRoomStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyRoomStatusResponse::CopyFrom(const ApplyRoomStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyRoomStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRoomStatusResponse::IsInitialized() const {
  return true;
}

void ApplyRoomStatusResponse::Swap(ApplyRoomStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyRoomStatusResponse::InternalSwap(ApplyRoomStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::google::protobuf::Metadata ApplyRoomStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyWaitGameRequest::InitAsDefaultInstance() {
}
class NotifyWaitGameRequest::HasBitSetters {
 public:
  static void set_has_flag(NotifyWaitGameRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_seconds(NotifyWaitGameRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyWaitGameRequest::kFlagFieldNumber;
const int NotifyWaitGameRequest::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyWaitGameRequest::NotifyWaitGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.NotifyWaitGameRequest)
}
NotifyWaitGameRequest::NotifyWaitGameRequest(const NotifyWaitGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.NotifyWaitGameRequest)
}

void NotifyWaitGameRequest::SharedCtor() {
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(seconds_));
}

NotifyWaitGameRequest::~NotifyWaitGameRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.NotifyWaitGameRequest)
  SharedDtor();
}

void NotifyWaitGameRequest::SharedDtor() {
}

void NotifyWaitGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyWaitGameRequest& NotifyWaitGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyWaitGameRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyWaitGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.NotifyWaitGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&flag_)) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyWaitGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyWaitGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_flag(value);
        break;
      }
      // optional int32 seconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_seconds(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyWaitGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.NotifyWaitGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_flag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_seconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.NotifyWaitGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.NotifyWaitGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyWaitGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.NotifyWaitGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.NotifyWaitGameRequest)
}

::google::protobuf::uint8* NotifyWaitGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.NotifyWaitGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.NotifyWaitGameRequest)
  return target;
}

size_t NotifyWaitGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.NotifyWaitGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 flag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyWaitGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.NotifyWaitGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyWaitGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyWaitGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.NotifyWaitGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.NotifyWaitGameRequest)
    MergeFrom(*source);
  }
}

void NotifyWaitGameRequest::MergeFrom(const NotifyWaitGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.NotifyWaitGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotifyWaitGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.NotifyWaitGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWaitGameRequest::CopyFrom(const NotifyWaitGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.NotifyWaitGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWaitGameRequest::IsInitialized() const {
  return true;
}

void NotifyWaitGameRequest::Swap(NotifyWaitGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyWaitGameRequest::InternalSwap(NotifyWaitGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flag_, other->flag_);
  swap(seconds_, other->seconds_);
}

::google::protobuf::Metadata NotifyWaitGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyWaitGameResponse::InitAsDefaultInstance() {
}
class NotifyWaitGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyWaitGameResponse::NotifyWaitGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.NotifyWaitGameResponse)
}
NotifyWaitGameResponse::NotifyWaitGameResponse(const NotifyWaitGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.NotifyWaitGameResponse)
}

void NotifyWaitGameResponse::SharedCtor() {
}

NotifyWaitGameResponse::~NotifyWaitGameResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.NotifyWaitGameResponse)
  SharedDtor();
}

void NotifyWaitGameResponse::SharedDtor() {
}

void NotifyWaitGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyWaitGameResponse& NotifyWaitGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyWaitGameResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyWaitGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.NotifyWaitGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyWaitGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyWaitGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyWaitGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.NotifyWaitGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.NotifyWaitGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.NotifyWaitGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyWaitGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.NotifyWaitGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.NotifyWaitGameResponse)
}

::google::protobuf::uint8* NotifyWaitGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.NotifyWaitGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.NotifyWaitGameResponse)
  return target;
}

size_t NotifyWaitGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.NotifyWaitGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyWaitGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.NotifyWaitGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyWaitGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyWaitGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.NotifyWaitGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.NotifyWaitGameResponse)
    MergeFrom(*source);
  }
}

void NotifyWaitGameResponse::MergeFrom(const NotifyWaitGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.NotifyWaitGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotifyWaitGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.NotifyWaitGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWaitGameResponse::CopyFrom(const NotifyWaitGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.NotifyWaitGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWaitGameResponse::IsInitialized() const {
  return true;
}

void NotifyWaitGameResponse::Swap(NotifyWaitGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyWaitGameResponse::InternalSwap(NotifyWaitGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata NotifyWaitGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ShuffleCardRequest::InitAsDefaultInstance() {
}
class ShuffleCardRequest::HasBitSetters {
 public:
  static void set_has_poolcardcount(ShuffleCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bottomcardcount(ShuffleCardRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShuffleCardRequest::kPoolCardCountFieldNumber;
const int ShuffleCardRequest::kBottomCardCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShuffleCardRequest::ShuffleCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ShuffleCardRequest)
}
ShuffleCardRequest::ShuffleCardRequest(const ShuffleCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poolcardcount_, &from.poolcardcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottomcardcount_) -
    reinterpret_cast<char*>(&poolcardcount_)) + sizeof(bottomcardcount_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ShuffleCardRequest)
}

void ShuffleCardRequest::SharedCtor() {
  ::memset(&poolcardcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottomcardcount_) -
      reinterpret_cast<char*>(&poolcardcount_)) + sizeof(bottomcardcount_));
}

ShuffleCardRequest::~ShuffleCardRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ShuffleCardRequest)
  SharedDtor();
}

void ShuffleCardRequest::SharedDtor() {
}

void ShuffleCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShuffleCardRequest& ShuffleCardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ShuffleCardRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ShuffleCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ShuffleCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&poolcardcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottomcardcount_) -
        reinterpret_cast<char*>(&poolcardcount_)) + sizeof(bottomcardcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShuffleCardRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ShuffleCardRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 poolCardCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_poolcardcount(value);
        break;
      }
      // optional int32 bottomCardCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_bottomcardcount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShuffleCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ShuffleCardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 poolCardCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_poolcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bottomCardCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bottomcardcount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottomcardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ShuffleCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ShuffleCardRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShuffleCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ShuffleCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 poolCardCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poolcardcount(), output);
  }

  // optional int32 bottomCardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bottomcardcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ShuffleCardRequest)
}

::google::protobuf::uint8* ShuffleCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ShuffleCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 poolCardCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poolcardcount(), target);
  }

  // optional int32 bottomCardCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bottomcardcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ShuffleCardRequest)
  return target;
}

size_t ShuffleCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ShuffleCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 poolCardCount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolcardcount());
    }

    // optional int32 bottomCardCount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottomcardcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShuffleCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ShuffleCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShuffleCardRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ShuffleCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ShuffleCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ShuffleCardRequest)
    MergeFrom(*source);
  }
}

void ShuffleCardRequest::MergeFrom(const ShuffleCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ShuffleCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      poolcardcount_ = from.poolcardcount_;
    }
    if (cached_has_bits & 0x00000002u) {
      bottomcardcount_ = from.bottomcardcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShuffleCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ShuffleCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleCardRequest::CopyFrom(const ShuffleCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ShuffleCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleCardRequest::IsInitialized() const {
  return true;
}

void ShuffleCardRequest::Swap(ShuffleCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShuffleCardRequest::InternalSwap(ShuffleCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poolcardcount_, other->poolcardcount_);
  swap(bottomcardcount_, other->bottomcardcount_);
}

::google::protobuf::Metadata ShuffleCardRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ShuffleCardResponse::InitAsDefaultInstance() {
}
class ShuffleCardResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShuffleCardResponse::ShuffleCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ShuffleCardResponse)
}
ShuffleCardResponse::ShuffleCardResponse(const ShuffleCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ShuffleCardResponse)
}

void ShuffleCardResponse::SharedCtor() {
}

ShuffleCardResponse::~ShuffleCardResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ShuffleCardResponse)
  SharedDtor();
}

void ShuffleCardResponse::SharedDtor() {
}

void ShuffleCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShuffleCardResponse& ShuffleCardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ShuffleCardResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ShuffleCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ShuffleCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShuffleCardResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ShuffleCardResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShuffleCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ShuffleCardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ShuffleCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ShuffleCardResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShuffleCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ShuffleCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ShuffleCardResponse)
}

::google::protobuf::uint8* ShuffleCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ShuffleCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ShuffleCardResponse)
  return target;
}

size_t ShuffleCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ShuffleCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShuffleCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ShuffleCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShuffleCardResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ShuffleCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ShuffleCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ShuffleCardResponse)
    MergeFrom(*source);
  }
}

void ShuffleCardResponse::MergeFrom(const ShuffleCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ShuffleCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShuffleCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ShuffleCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleCardResponse::CopyFrom(const ShuffleCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ShuffleCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleCardResponse::IsInitialized() const {
  return true;
}

void ShuffleCardResponse::Swap(ShuffleCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShuffleCardResponse::InternalSwap(ShuffleCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ShuffleCardResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyCloseAccountBoxRequest::InitAsDefaultInstance() {
}
class ApplyCloseAccountBoxRequest::HasBitSetters {
 public:
  static void set_has_userid(ApplyCloseAccountBoxRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roomid(ApplyCloseAccountBoxRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyCloseAccountBoxRequest::kUserIdFieldNumber;
const int ApplyCloseAccountBoxRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyCloseAccountBoxRequest::ApplyCloseAccountBoxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyCloseAccountBoxRequest)
}
ApplyCloseAccountBoxRequest::ApplyCloseAccountBoxRequest(const ApplyCloseAccountBoxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyCloseAccountBoxRequest)
}

void ApplyCloseAccountBoxRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
}

ApplyCloseAccountBoxRequest::~ApplyCloseAccountBoxRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyCloseAccountBoxRequest)
  SharedDtor();
}

void ApplyCloseAccountBoxRequest::SharedDtor() {
}

void ApplyCloseAccountBoxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyCloseAccountBoxRequest& ApplyCloseAccountBoxRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyCloseAccountBoxRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyCloseAccountBoxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyCloseAccountBoxRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyCloseAccountBoxRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyCloseAccountBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyCloseAccountBoxRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyCloseAccountBoxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyCloseAccountBoxRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyCloseAccountBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyCloseAccountBoxRequest)
}

::google::protobuf::uint8* ApplyCloseAccountBoxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 roomId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyCloseAccountBoxRequest)
  return target;
}

size_t ApplyCloseAccountBoxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyCloseAccountBoxRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 roomId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyCloseAccountBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyCloseAccountBoxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyCloseAccountBoxRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyCloseAccountBoxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyCloseAccountBoxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyCloseAccountBoxRequest)
    MergeFrom(*source);
  }
}

void ApplyCloseAccountBoxRequest::MergeFrom(const ApplyCloseAccountBoxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyCloseAccountBoxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyCloseAccountBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyCloseAccountBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyCloseAccountBoxRequest::CopyFrom(const ApplyCloseAccountBoxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyCloseAccountBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyCloseAccountBoxRequest::IsInitialized() const {
  return true;
}

void ApplyCloseAccountBoxRequest::Swap(ApplyCloseAccountBoxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyCloseAccountBoxRequest::InternalSwap(ApplyCloseAccountBoxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ApplyCloseAccountBoxRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApplyCloseAccountBoxResponse::InitAsDefaultInstance() {
}
class ApplyCloseAccountBoxResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyCloseAccountBoxResponse::ApplyCloseAccountBoxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.ApplyCloseAccountBoxResponse)
}
ApplyCloseAccountBoxResponse::ApplyCloseAccountBoxResponse(const ApplyCloseAccountBoxResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.ApplyCloseAccountBoxResponse)
}

void ApplyCloseAccountBoxResponse::SharedCtor() {
}

ApplyCloseAccountBoxResponse::~ApplyCloseAccountBoxResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.ApplyCloseAccountBoxResponse)
  SharedDtor();
}

void ApplyCloseAccountBoxResponse::SharedDtor() {
}

void ApplyCloseAccountBoxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyCloseAccountBoxResponse& ApplyCloseAccountBoxResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApplyCloseAccountBoxResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyCloseAccountBoxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.ApplyCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApplyCloseAccountBoxResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApplyCloseAccountBoxResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApplyCloseAccountBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.ApplyCloseAccountBoxResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.ApplyCloseAccountBoxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.ApplyCloseAccountBoxResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApplyCloseAccountBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.ApplyCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.ApplyCloseAccountBoxResponse)
}

::google::protobuf::uint8* ApplyCloseAccountBoxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.ApplyCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.ApplyCloseAccountBoxResponse)
  return target;
}

size_t ApplyCloseAccountBoxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.ApplyCloseAccountBoxResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyCloseAccountBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.ApplyCloseAccountBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyCloseAccountBoxResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ApplyCloseAccountBoxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.ApplyCloseAccountBoxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.ApplyCloseAccountBoxResponse)
    MergeFrom(*source);
  }
}

void ApplyCloseAccountBoxResponse::MergeFrom(const ApplyCloseAccountBoxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.ApplyCloseAccountBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplyCloseAccountBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.ApplyCloseAccountBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyCloseAccountBoxResponse::CopyFrom(const ApplyCloseAccountBoxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.ApplyCloseAccountBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyCloseAccountBoxResponse::IsInitialized() const {
  return true;
}

void ApplyCloseAccountBoxResponse::Swap(ApplyCloseAccountBoxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyCloseAccountBoxResponse::InternalSwap(ApplyCloseAccountBoxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ApplyCloseAccountBoxResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCloseAccountBoxRequest::InitAsDefaultInstance() {
}
class PlayerCloseAccountBoxRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerCloseAccountBoxRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCloseAccountBoxRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCloseAccountBoxRequest::PlayerCloseAccountBoxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerCloseAccountBoxRequest)
}
PlayerCloseAccountBoxRequest::PlayerCloseAccountBoxRequest(const PlayerCloseAccountBoxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerCloseAccountBoxRequest)
}

void PlayerCloseAccountBoxRequest::SharedCtor() {
  userid_ = 0;
}

PlayerCloseAccountBoxRequest::~PlayerCloseAccountBoxRequest() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerCloseAccountBoxRequest)
  SharedDtor();
}

void PlayerCloseAccountBoxRequest::SharedDtor() {
}

void PlayerCloseAccountBoxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCloseAccountBoxRequest& PlayerCloseAccountBoxRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCloseAccountBoxRequest_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCloseAccountBoxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCloseAccountBoxRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCloseAccountBoxRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCloseAccountBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerCloseAccountBoxRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerCloseAccountBoxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerCloseAccountBoxRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCloseAccountBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerCloseAccountBoxRequest)
}

::google::protobuf::uint8* PlayerCloseAccountBoxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerCloseAccountBoxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerCloseAccountBoxRequest)
  return target;
}

size_t PlayerCloseAccountBoxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerCloseAccountBoxRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 userId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCloseAccountBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerCloseAccountBoxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCloseAccountBoxRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCloseAccountBoxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerCloseAccountBoxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerCloseAccountBoxRequest)
    MergeFrom(*source);
  }
}

void PlayerCloseAccountBoxRequest::MergeFrom(const PlayerCloseAccountBoxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerCloseAccountBoxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void PlayerCloseAccountBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerCloseAccountBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCloseAccountBoxRequest::CopyFrom(const PlayerCloseAccountBoxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerCloseAccountBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCloseAccountBoxRequest::IsInitialized() const {
  return true;
}

void PlayerCloseAccountBoxRequest::Swap(PlayerCloseAccountBoxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCloseAccountBoxRequest::InternalSwap(PlayerCloseAccountBoxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata PlayerCloseAccountBoxRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCloseAccountBoxResponse::InitAsDefaultInstance() {
}
class PlayerCloseAccountBoxResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCloseAccountBoxResponse::PlayerCloseAccountBoxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameMsg.PlayerCloseAccountBoxResponse)
}
PlayerCloseAccountBoxResponse::PlayerCloseAccountBoxResponse(const PlayerCloseAccountBoxResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMsg.PlayerCloseAccountBoxResponse)
}

void PlayerCloseAccountBoxResponse::SharedCtor() {
}

PlayerCloseAccountBoxResponse::~PlayerCloseAccountBoxResponse() {
  // @@protoc_insertion_point(destructor:GameMsg.PlayerCloseAccountBoxResponse)
  SharedDtor();
}

void PlayerCloseAccountBoxResponse::SharedDtor() {
}

void PlayerCloseAccountBoxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCloseAccountBoxResponse& PlayerCloseAccountBoxResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCloseAccountBoxResponse_GameMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCloseAccountBoxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMsg.PlayerCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCloseAccountBoxResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCloseAccountBoxResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCloseAccountBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameMsg.PlayerCloseAccountBoxResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GameMsg.PlayerCloseAccountBoxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameMsg.PlayerCloseAccountBoxResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCloseAccountBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameMsg.PlayerCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameMsg.PlayerCloseAccountBoxResponse)
}

::google::protobuf::uint8* PlayerCloseAccountBoxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameMsg.PlayerCloseAccountBoxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMsg.PlayerCloseAccountBoxResponse)
  return target;
}

size_t PlayerCloseAccountBoxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMsg.PlayerCloseAccountBoxResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCloseAccountBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMsg.PlayerCloseAccountBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCloseAccountBoxResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCloseAccountBoxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMsg.PlayerCloseAccountBoxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMsg.PlayerCloseAccountBoxResponse)
    MergeFrom(*source);
  }
}

void PlayerCloseAccountBoxResponse::MergeFrom(const PlayerCloseAccountBoxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMsg.PlayerCloseAccountBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerCloseAccountBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMsg.PlayerCloseAccountBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCloseAccountBoxResponse::CopyFrom(const PlayerCloseAccountBoxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMsg.PlayerCloseAccountBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCloseAccountBoxResponse::IsInitialized() const {
  return true;
}

void PlayerCloseAccountBoxResponse::Swap(PlayerCloseAccountBoxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCloseAccountBoxResponse::InternalSwap(PlayerCloseAccountBoxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerCloseAccountBoxResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameMsg_2eproto);
  return ::file_level_metadata_GameMsg_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameMsg
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::GameMsg::EmptyGameRequest* Arena::CreateMaybeMessage< ::GameMsg::EmptyGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::EmptyGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::NormalGameResponse* Arena::CreateMaybeMessage< ::GameMsg::NormalGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::NormalGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::MsgCard* Arena::CreateMaybeMessage< ::GameMsg::MsgCard >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::MsgCard >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PB_CardGroup* Arena::CreateMaybeMessage< ::GameMsg::PB_CardGroup >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PB_CardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyFlushRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyFlushRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyFlushRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyFlushRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyFlushRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyFlushRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyEnterRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyEnterRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyEnterRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyEnterRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyEnterRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyEnterRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerInfo* Arena::CreateMaybeMessage< ::GameMsg::PlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PB_IngamePlayer* Arena::CreateMaybeMessage< ::GameMsg::PB_IngamePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PB_IngamePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::FlushRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::FlushRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::FlushRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::FlushRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::FlushRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::FlushRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplySeatRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplySeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplySeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplySeatResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplySeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplySeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerSitDownRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerSitDownRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerSitDownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerSitDownResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerSitDownResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerSitDownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyStandupRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyStandupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyStandupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyStandupResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyStandupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyStandupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerStandUpRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerStandUpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerStandUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerStandUpResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerStandUpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerStandUpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyQuitRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyQuitRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyQuitRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyQuitRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyQuitRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyQuitRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerQuitRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerQuitRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerQuitRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerQuitRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerQuitRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerQuitRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerChips* Arena::CreateMaybeMessage< ::GameMsg::PlayerChips >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerChips >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerBuyinRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerBuyinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerBuyinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerBuyinResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerBuyinResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerBuyinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyFaceShowRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyFaceShowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyFaceShowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyFaceShowResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyFaceShowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyFaceShowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerFaceShowRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerFaceShowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerFaceShowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerFaceShowResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerFaceShowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerFaceShowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyChatRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyChatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyChatResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyChatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerChatRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerChatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerChatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerChatResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerChatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyUsePropsRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyUsePropsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyUsePropsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyUsePropsResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyUsePropsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyUsePropsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerUsePropsRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerUsePropsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerUsePropsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerUsePropsResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerUsePropsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerUsePropsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentGiftRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentGiftRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentGiftRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentGiftResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentGiftResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentGiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentGiftRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentGiftRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentGiftRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentGiftResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentGiftResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentGiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentGiftNewInterRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentGiftNewInterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentGiftNewInterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentGiftNewInterResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentGiftNewInterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentGiftNewInterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentChipsRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentChipsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentChipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPresentChipsResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyPresentChipsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPresentChipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentChipsRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentChipsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentChipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentChipsResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentChipsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentChipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentGiftNewInterRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentGiftNewInterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentGiftNewInterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPresentGiftNewInterResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerPresentGiftNewInterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPresentGiftNewInterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerEnterRoomRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerEnterRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerEnterRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerEnterRoomResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerEnterRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerEnterRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTransmitMessageRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyTransmitMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTransmitMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTransmitMessageResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyTransmitMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTransmitMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTransmitMessageRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerTransmitMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTransmitMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTransmitMessageResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerTransmitMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTransmitMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTrusteeOnRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyTrusteeOnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTrusteeOnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTrusteeOnResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyTrusteeOnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTrusteeOnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTrusteeOnRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerTrusteeOnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTrusteeOnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTrusteeOnResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerTrusteeOnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTrusteeOnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTrusteeOffRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyTrusteeOffRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTrusteeOffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyTrusteeOffResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyTrusteeOffResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyTrusteeOffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTrusteeOffRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerTrusteeOffRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTrusteeOffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerTrusteeOffResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerTrusteeOffResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerTrusteeOffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ReadyStartGameRequest* Arena::CreateMaybeMessage< ::GameMsg::ReadyStartGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ReadyStartGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ReadyStartGameResponse* Arena::CreateMaybeMessage< ::GameMsg::ReadyStartGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ReadyStartGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::DealCardsReqeust* Arena::CreateMaybeMessage< ::GameMsg::DealCardsReqeust >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::DealCardsReqeust >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::DealCardsResponse* Arena::CreateMaybeMessage< ::GameMsg::DealCardsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::DealCardsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ActivePlayerRequest* Arena::CreateMaybeMessage< ::GameMsg::ActivePlayerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ActivePlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ActivePlayerResponse* Arena::CreateMaybeMessage< ::GameMsg::ActivePlayerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ActivePlayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDigCardRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyDigCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDigCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDigCardResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyDigCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDigCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDigCardRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerDigCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDigCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDigCardResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerDigCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDigCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDropRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyDropRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDropRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDropResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyDropResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDropResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDropRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerDropRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDropRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDropResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerDropResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDropResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDeclareRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyDeclareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDeclareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyDeclareResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyDeclareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyDeclareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDeclareRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerDeclareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDeclareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerDeclareResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerDeclareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerDeclareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyLoseDeclareRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyLoseDeclareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyLoseDeclareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyLoseDeclareResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyLoseDeclareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyLoseDeclareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerLoseDeclareRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerLoseDeclareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerLoseDeclareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerLoseDeclareResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerLoseDeclareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerLoseDeclareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPostCardRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyPostCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPostCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyPostCardResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyPostCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyPostCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPostCardRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerPostCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPostCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerPostCardResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerPostCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerPostCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::LoserInfo* Arena::CreateMaybeMessage< ::GameMsg::LoserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::LoserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::GameOverRequest* Arena::CreateMaybeMessage< ::GameMsg::GameOverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::GameOverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::GameOverResponse* Arena::CreateMaybeMessage< ::GameMsg::GameOverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::GameOverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyRoomStatusRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyRoomStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyRoomStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyRoomStatusResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyRoomStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyRoomStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::NotifyWaitGameRequest* Arena::CreateMaybeMessage< ::GameMsg::NotifyWaitGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::NotifyWaitGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::NotifyWaitGameResponse* Arena::CreateMaybeMessage< ::GameMsg::NotifyWaitGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::NotifyWaitGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ShuffleCardRequest* Arena::CreateMaybeMessage< ::GameMsg::ShuffleCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ShuffleCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ShuffleCardResponse* Arena::CreateMaybeMessage< ::GameMsg::ShuffleCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ShuffleCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyCloseAccountBoxRequest* Arena::CreateMaybeMessage< ::GameMsg::ApplyCloseAccountBoxRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyCloseAccountBoxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::ApplyCloseAccountBoxResponse* Arena::CreateMaybeMessage< ::GameMsg::ApplyCloseAccountBoxResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::ApplyCloseAccountBoxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerCloseAccountBoxRequest* Arena::CreateMaybeMessage< ::GameMsg::PlayerCloseAccountBoxRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerCloseAccountBoxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMsg::PlayerCloseAccountBoxResponse* Arena::CreateMaybeMessage< ::GameMsg::PlayerCloseAccountBoxResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GameMsg::PlayerCloseAccountBoxResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
