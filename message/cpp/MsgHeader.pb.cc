// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgHeader.proto

#include "MsgHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace MsgHeader {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class MqHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MqHeader> _instance;
} _MqHeader_default_instance_;
}  // namespace MsgHeader
static void InitDefaultsHeader_MsgHeader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MsgHeader::_Header_default_instance_;
    new (ptr) ::MsgHeader::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MsgHeader::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header_MsgHeader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader_MsgHeader_2eproto}, {}};

static void InitDefaultsMqHeader_MsgHeader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MsgHeader::_MqHeader_default_instance_;
    new (ptr) ::MsgHeader::MqHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MsgHeader::MqHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MqHeader_MsgHeader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMqHeader_MsgHeader_2eproto}, {}};

void InitDefaults_MsgHeader_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header_MsgHeader_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MqHeader_MsgHeader_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_MsgHeader_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_MsgHeader_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_MsgHeader_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_MsgHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, cmdtype_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, type_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, sequenceid_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, length_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, check_result_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::Header, response_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, cmdtype_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, type_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, sequenceid_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, length_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, check_result_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, response_result_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, send_routkey_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, recv_routkey_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, send_exchange_),
  PROTOBUF_FIELD_OFFSET(::MsgHeader::MqHeader, recv_exchange_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MsgHeader::Header)},
  { 11, -1, sizeof(::MsgHeader::MqHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MsgHeader::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MsgHeader::_MqHeader_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_MsgHeader_2eproto = {
  {}, AddDescriptors_MsgHeader_2eproto, "MsgHeader.proto", schemas,
  file_default_instances, TableStruct_MsgHeader_2eproto::offsets,
  file_level_metadata_MsgHeader_2eproto, 2, file_level_enum_descriptors_MsgHeader_2eproto, file_level_service_descriptors_MsgHeader_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_MsgHeader_2eproto = {
  false, InitDefaults_MsgHeader_2eproto, 
  "\n\017MsgHeader.proto\022\tMsgHeader\"z\n\006Header\022\017"
  "\n\007cmdtype\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\022\n\nsequenc"
  "eid\030\003 \001(\004\022\016\n\006length\030\004 \001(\005\022\024\n\014check_resul"
  "t\030\005 \001(\004\022\027\n\017response_result\030\006 \001(\005\"\326\001\n\010MqH"
  "eader\022\017\n\007cmdtype\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\022\n\n"
  "sequenceid\030\003 \001(\004\022\016\n\006length\030\004 \001(\005\022\024\n\014chec"
  "k_result\030\005 \001(\005\022\027\n\017response_result\030\006 \001(\004\022"
  "\024\n\014send_routkey\030\007 \001(\014\022\024\n\014recv_routkey\030\010 "
  "\001(\014\022\025\n\rsend_exchange\030\t \001(\014\022\025\n\rrecv_excha"
  "nge\030\n \001(\014b\006proto3"
,
  "MsgHeader.proto", &assign_descriptors_table_MsgHeader_2eproto, 377,
};

void AddDescriptors_MsgHeader_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_MsgHeader_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MsgHeader_2eproto = []() { AddDescriptors_MsgHeader_2eproto(); return true; }();
namespace MsgHeader {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kCmdtypeFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kSequenceidFieldNumber;
const int Header::kLengthFieldNumber;
const int Header::kCheckResultFieldNumber;
const int Header::kResponseResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHeader.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmdtype_, &from.cmdtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_result_) -
    reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
  // @@protoc_insertion_point(copy_constructor:MsgHeader.Header)
}

void Header::SharedCtor() {
  ::memset(&cmdtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_result_) -
      reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:MsgHeader.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Header_MsgHeader_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgHeader.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cmdtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_result_) -
      reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Header::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Header*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cmdtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cmdtype(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // uint64 sequenceid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_sequenceid(value);
        break;
      }
      // int32 length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_length(value);
        break;
      }
      // uint64 check_result = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_check_result(value);
        break;
      }
      // int32 response_result = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_response_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHeader.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cmdtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequenceid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequenceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 check_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &check_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 response_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHeader.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHeader.Header)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHeader.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdtype(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sequenceid(), output);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // uint64 check_result = 5;
  if (this->check_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->check_result(), output);
  }

  // int32 response_result = 6;
  if (this->response_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->response_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHeader.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MsgHeader.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdtype(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sequenceid(), target);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // uint64 check_result = 5;
  if (this->check_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->check_result(), target);
  }

  // int32 response_result = 6;
  if (this->response_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->response_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHeader.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgHeader.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdtype());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequenceid());
  }

  // uint64 check_result = 5;
  if (this->check_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->check_result());
  }

  // int32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // int32 response_result = 6;
  if (this->response_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgHeader.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::DynamicCastToGenerated<Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgHeader.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgHeader.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgHeader.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmdtype() != 0) {
    set_cmdtype(from.cmdtype());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sequenceid() != 0) {
    set_sequenceid(from.sequenceid());
  }
  if (from.check_result() != 0) {
    set_check_result(from.check_result());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.response_result() != 0) {
    set_response_result(from.response_result());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgHeader.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgHeader.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmdtype_, other->cmdtype_);
  swap(type_, other->type_);
  swap(sequenceid_, other->sequenceid_);
  swap(check_result_, other->check_result_);
  swap(length_, other->length_);
  swap(response_result_, other->response_result_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MsgHeader_2eproto);
  return ::file_level_metadata_MsgHeader_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MqHeader::InitAsDefaultInstance() {
}
class MqHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MqHeader::kCmdtypeFieldNumber;
const int MqHeader::kTypeFieldNumber;
const int MqHeader::kSequenceidFieldNumber;
const int MqHeader::kLengthFieldNumber;
const int MqHeader::kCheckResultFieldNumber;
const int MqHeader::kResponseResultFieldNumber;
const int MqHeader::kSendRoutkeyFieldNumber;
const int MqHeader::kRecvRoutkeyFieldNumber;
const int MqHeader::kSendExchangeFieldNumber;
const int MqHeader::kRecvExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MqHeader::MqHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHeader.MqHeader)
}
MqHeader::MqHeader(const MqHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_routkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_routkey().size() > 0) {
    send_routkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_routkey_);
  }
  recv_routkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_routkey().size() > 0) {
    recv_routkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_routkey_);
  }
  send_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_exchange().size() > 0) {
    send_exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_exchange_);
  }
  recv_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_exchange().size() > 0) {
    recv_exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_exchange_);
  }
  ::memcpy(&cmdtype_, &from.cmdtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_result_) -
    reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
  // @@protoc_insertion_point(copy_constructor:MsgHeader.MqHeader)
}

void MqHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MqHeader_MsgHeader_2eproto.base);
  send_routkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_routkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmdtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_result_) -
      reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
}

MqHeader::~MqHeader() {
  // @@protoc_insertion_point(destructor:MsgHeader.MqHeader)
  SharedDtor();
}

void MqHeader::SharedDtor() {
  send_routkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_routkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MqHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MqHeader& MqHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MqHeader_MsgHeader_2eproto.base);
  return *internal_default_instance();
}


void MqHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgHeader.MqHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_routkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_routkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmdtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_result_) -
      reinterpret_cast<char*>(&cmdtype_)) + sizeof(response_result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MqHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MqHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cmdtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_cmdtype(value);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_type(value);
        break;
      }
      // uint64 sequenceid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_sequenceid(value);
        break;
      }
      // int32 length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_length(value);
        break;
      }
      // int32 check_result = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_check_result(value);
        break;
      }
      // uint64 response_result = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_response_result(value);
        break;
      }
      // bytes send_routkey = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_send_routkey();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // bytes recv_routkey = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_recv_routkey();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // bytes send_exchange = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_send_exchange();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // bytes recv_exchange = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_recv_exchange();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MqHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHeader.MqHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cmdtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequenceid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequenceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 check_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 response_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &response_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes send_routkey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_routkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes recv_routkey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_routkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes send_exchange = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_exchange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes recv_exchange = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_exchange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHeader.MqHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHeader.MqHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MqHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHeader.MqHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdtype(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sequenceid(), output);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // int32 check_result = 5;
  if (this->check_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->check_result(), output);
  }

  // uint64 response_result = 6;
  if (this->response_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->response_result(), output);
  }

  // bytes send_routkey = 7;
  if (this->send_routkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->send_routkey(), output);
  }

  // bytes recv_routkey = 8;
  if (this->recv_routkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->recv_routkey(), output);
  }

  // bytes send_exchange = 9;
  if (this->send_exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->send_exchange(), output);
  }

  // bytes recv_exchange = 10;
  if (this->recv_exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->recv_exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHeader.MqHeader)
}

::google::protobuf::uint8* MqHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MsgHeader.MqHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdtype(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sequenceid(), target);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // int32 check_result = 5;
  if (this->check_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->check_result(), target);
  }

  // uint64 response_result = 6;
  if (this->response_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->response_result(), target);
  }

  // bytes send_routkey = 7;
  if (this->send_routkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->send_routkey(), target);
  }

  // bytes recv_routkey = 8;
  if (this->recv_routkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->recv_routkey(), target);
  }

  // bytes send_exchange = 9;
  if (this->send_exchange().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->send_exchange(), target);
  }

  // bytes recv_exchange = 10;
  if (this->recv_exchange().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->recv_exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHeader.MqHeader)
  return target;
}

size_t MqHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgHeader.MqHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes send_routkey = 7;
  if (this->send_routkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_routkey());
  }

  // bytes recv_routkey = 8;
  if (this->recv_routkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_routkey());
  }

  // bytes send_exchange = 9;
  if (this->send_exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_exchange());
  }

  // bytes recv_exchange = 10;
  if (this->recv_exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_exchange());
  }

  // int32 cmdtype = 1;
  if (this->cmdtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdtype());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // uint64 sequenceid = 3;
  if (this->sequenceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequenceid());
  }

  // int32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // int32 check_result = 5;
  if (this->check_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->check_result());
  }

  // uint64 response_result = 6;
  if (this->response_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->response_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgHeader.MqHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MqHeader* source =
      ::google::protobuf::DynamicCastToGenerated<MqHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgHeader.MqHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgHeader.MqHeader)
    MergeFrom(*source);
  }
}

void MqHeader::MergeFrom(const MqHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgHeader.MqHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_routkey().size() > 0) {

    send_routkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_routkey_);
  }
  if (from.recv_routkey().size() > 0) {

    recv_routkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_routkey_);
  }
  if (from.send_exchange().size() > 0) {

    send_exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_exchange_);
  }
  if (from.recv_exchange().size() > 0) {

    recv_exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_exchange_);
  }
  if (from.cmdtype() != 0) {
    set_cmdtype(from.cmdtype());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sequenceid() != 0) {
    set_sequenceid(from.sequenceid());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.check_result() != 0) {
    set_check_result(from.check_result());
  }
  if (from.response_result() != 0) {
    set_response_result(from.response_result());
  }
}

void MqHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgHeader.MqHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqHeader::CopyFrom(const MqHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgHeader.MqHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqHeader::IsInitialized() const {
  return true;
}

void MqHeader::Swap(MqHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MqHeader::InternalSwap(MqHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  send_routkey_.Swap(&other->send_routkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recv_routkey_.Swap(&other->recv_routkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  send_exchange_.Swap(&other->send_exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recv_exchange_.Swap(&other->recv_exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmdtype_, other->cmdtype_);
  swap(type_, other->type_);
  swap(sequenceid_, other->sequenceid_);
  swap(length_, other->length_);
  swap(check_result_, other->check_result_);
  swap(response_result_, other->response_result_);
}

::google::protobuf::Metadata MqHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MsgHeader_2eproto);
  return ::file_level_metadata_MsgHeader_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MsgHeader
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::MsgHeader::Header* Arena::CreateMaybeMessage< ::MsgHeader::Header >(Arena* arena) {
  return Arena::CreateInternal< ::MsgHeader::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgHeader::MqHeader* Arena::CreateMaybeMessage< ::MsgHeader::MqHeader >(Arena* arena) {
  return Arena::CreateInternal< ::MsgHeader::MqHeader >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
