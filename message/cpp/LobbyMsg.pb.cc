// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LobbyMsg.proto

#include "LobbyMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace LobbyMsg {
class PlayerChipsChangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChipsChangeRequest> _instance;
} _PlayerChipsChangeRequest_default_instance_;
class PlayerChipsChangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChipsChangeResponse> _instance;
} _PlayerChipsChangeResponse_default_instance_;
class PlayerCoinsChangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCoinsChangeRequest> _instance;
} _PlayerCoinsChangeRequest_default_instance_;
class PlayerCoinsChangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCoinsChangeResponse> _instance;
} _PlayerCoinsChangeResponse_default_instance_;
class PlayerCharmUpgradRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCharmUpgradRequest> _instance;
} _PlayerCharmUpgradRequest_default_instance_;
class PlayerCharmUpgradResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCharmUpgradResponse> _instance;
} _PlayerCharmUpgradResponse_default_instance_;
class UserBankruptRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBankruptRequest> _instance;
} _UserBankruptRequest_default_instance_;
class UserBankruptResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBankruptResponse> _instance;
} _UserBankruptResponse_default_instance_;
class UserCommNotifyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserCommNotifyRequest> _instance;
} _UserCommNotifyRequest_default_instance_;
class UserCommNotifyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserCommNotifyResponse> _instance;
} _UserCommNotifyResponse_default_instance_;
class PlayerLoginElsewhereRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoginElsewhereRequest> _instance;
} _PlayerLoginElsewhereRequest_default_instance_;
class PlayerLoginElsewhereResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLoginElsewhereResponse> _instance;
} _PlayerLoginElsewhereResponse_default_instance_;
class PlayerUpgradeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUpgradeRequest> _instance;
} _PlayerUpgradeRequest_default_instance_;
class PlayerUpgradeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerUpgradeResponse> _instance;
} _PlayerUpgradeResponse_default_instance_;
class UserTokenLoginDcenterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTokenLoginDcenterRequest> _instance;
} _UserTokenLoginDcenterRequest_default_instance_;
class UserTokenLoginDcenterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTokenLoginDcenterResponse> _instance;
} _UserTokenLoginDcenterResponse_default_instance_;
}  // namespace LobbyMsg
static void InitDefaultsPlayerChipsChangeRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerChipsChangeRequest_default_instance_;
    new (ptr) ::LobbyMsg::PlayerChipsChangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerChipsChangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChipsChangeRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChipsChangeRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerChipsChangeResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerChipsChangeResponse_default_instance_;
    new (ptr) ::LobbyMsg::PlayerChipsChangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerChipsChangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChipsChangeResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChipsChangeResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerCoinsChangeRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerCoinsChangeRequest_default_instance_;
    new (ptr) ::LobbyMsg::PlayerCoinsChangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerCoinsChangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCoinsChangeRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCoinsChangeRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerCoinsChangeResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerCoinsChangeResponse_default_instance_;
    new (ptr) ::LobbyMsg::PlayerCoinsChangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerCoinsChangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCoinsChangeResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCoinsChangeResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerCharmUpgradRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerCharmUpgradRequest_default_instance_;
    new (ptr) ::LobbyMsg::PlayerCharmUpgradRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerCharmUpgradRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCharmUpgradRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCharmUpgradRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerCharmUpgradResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerCharmUpgradResponse_default_instance_;
    new (ptr) ::LobbyMsg::PlayerCharmUpgradResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerCharmUpgradResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCharmUpgradResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCharmUpgradResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserBankruptRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserBankruptRequest_default_instance_;
    new (ptr) ::LobbyMsg::UserBankruptRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserBankruptRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBankruptRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBankruptRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserBankruptResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserBankruptResponse_default_instance_;
    new (ptr) ::LobbyMsg::UserBankruptResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserBankruptResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBankruptResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBankruptResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserCommNotifyRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserCommNotifyRequest_default_instance_;
    new (ptr) ::LobbyMsg::UserCommNotifyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserCommNotifyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserCommNotifyRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserCommNotifyRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserCommNotifyResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserCommNotifyResponse_default_instance_;
    new (ptr) ::LobbyMsg::UserCommNotifyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserCommNotifyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserCommNotifyResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserCommNotifyResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerLoginElsewhereRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerLoginElsewhereRequest_default_instance_;
    new (ptr) ::LobbyMsg::PlayerLoginElsewhereRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerLoginElsewhereRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLoginElsewhereRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerLoginElsewhereRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerLoginElsewhereResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerLoginElsewhereResponse_default_instance_;
    new (ptr) ::LobbyMsg::PlayerLoginElsewhereResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerLoginElsewhereResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLoginElsewhereResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerLoginElsewhereResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerUpgradeRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerUpgradeRequest_default_instance_;
    new (ptr) ::LobbyMsg::PlayerUpgradeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerUpgradeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerUpgradeRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerUpgradeRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsPlayerUpgradeResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_PlayerUpgradeResponse_default_instance_;
    new (ptr) ::LobbyMsg::PlayerUpgradeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::PlayerUpgradeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerUpgradeResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerUpgradeResponse_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserTokenLoginDcenterRequest_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserTokenLoginDcenterRequest_default_instance_;
    new (ptr) ::LobbyMsg::UserTokenLoginDcenterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserTokenLoginDcenterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserTokenLoginDcenterRequest_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserTokenLoginDcenterRequest_LobbyMsg_2eproto}, {}};

static void InitDefaultsUserTokenLoginDcenterResponse_LobbyMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LobbyMsg::_UserTokenLoginDcenterResponse_default_instance_;
    new (ptr) ::LobbyMsg::UserTokenLoginDcenterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LobbyMsg::UserTokenLoginDcenterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserTokenLoginDcenterResponse_LobbyMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserTokenLoginDcenterResponse_LobbyMsg_2eproto}, {}};

void InitDefaults_LobbyMsg_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChipsChangeRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChipsChangeResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCoinsChangeRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCoinsChangeResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCharmUpgradRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCharmUpgradResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBankruptRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBankruptResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserCommNotifyRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserCommNotifyResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLoginElsewhereRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLoginElsewhereResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerUpgradeRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerUpgradeResponse_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTokenLoginDcenterRequest_LobbyMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTokenLoginDcenterResponse_LobbyMsg_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_LobbyMsg_2eproto[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_LobbyMsg_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_LobbyMsg_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_LobbyMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, changereason_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, currentchips_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, maxchips_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeRequest, outchipscount_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerChipsChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeRequest, changereason_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeRequest, currentcoins_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCoinsChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, newlevel_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, currentcharm_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradRequest, nextupgradecharm_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerCharmUpgradResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptRequest, bankrupttimes_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptRequest, reliefchips_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptRequest, awardtimes_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserBankruptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyRequest, notifymsgtype_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyRequest, notifymsgid_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyRequest, notifydata_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserCommNotifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereRequest, description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerLoginElsewhereResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, newlevel_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, currentexp_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, upgradeexp_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeRequest, awardchips_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::PlayerUpgradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserTokenLoginDcenterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserTokenLoginDcenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserTokenLoginDcenterRequest, usertoken_),
  0,
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserTokenLoginDcenterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LobbyMsg::UserTokenLoginDcenterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::LobbyMsg::PlayerChipsChangeRequest)},
  { 15, 20, sizeof(::LobbyMsg::PlayerChipsChangeResponse)},
  { 20, 28, sizeof(::LobbyMsg::PlayerCoinsChangeRequest)},
  { 31, 36, sizeof(::LobbyMsg::PlayerCoinsChangeResponse)},
  { 36, 45, sizeof(::LobbyMsg::PlayerCharmUpgradRequest)},
  { 49, 54, sizeof(::LobbyMsg::PlayerCharmUpgradResponse)},
  { 54, 62, sizeof(::LobbyMsg::UserBankruptRequest)},
  { 65, 70, sizeof(::LobbyMsg::UserBankruptResponse)},
  { 70, 78, sizeof(::LobbyMsg::UserCommNotifyRequest)},
  { 81, 86, sizeof(::LobbyMsg::UserCommNotifyResponse)},
  { 86, 93, sizeof(::LobbyMsg::PlayerLoginElsewhereRequest)},
  { 95, 100, sizeof(::LobbyMsg::PlayerLoginElsewhereResponse)},
  { 100, 110, sizeof(::LobbyMsg::PlayerUpgradeRequest)},
  { 115, 120, sizeof(::LobbyMsg::PlayerUpgradeResponse)},
  { 120, 126, sizeof(::LobbyMsg::UserTokenLoginDcenterRequest)},
  { 127, 132, sizeof(::LobbyMsg::UserTokenLoginDcenterResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerChipsChangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerChipsChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerCoinsChangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerCoinsChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerCharmUpgradRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerCharmUpgradResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserBankruptRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserBankruptResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserCommNotifyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserCommNotifyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerLoginElsewhereRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerLoginElsewhereResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerUpgradeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_PlayerUpgradeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserTokenLoginDcenterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LobbyMsg::_UserTokenLoginDcenterResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_LobbyMsg_2eproto = {
  {}, AddDescriptors_LobbyMsg_2eproto, "LobbyMsg.proto", schemas,
  file_default_instances, TableStruct_LobbyMsg_2eproto::offsets,
  file_level_metadata_LobbyMsg_2eproto, 16, file_level_enum_descriptors_LobbyMsg_2eproto, file_level_service_descriptors_LobbyMsg_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_LobbyMsg_2eproto = {
  false, InitDefaults_LobbyMsg_2eproto, 
  "\n\016LobbyMsg.proto\022\010LobbyMsg\"\345\004\n\030PlayerChi"
  "psChangeRequest\022\016\n\006userId\030\001 \001(\005\022\024\n\014chang"
  "eReason\030\002 \001(\005\022\024\n\014currentChips\030\003 \001(\003\022\020\n\010m"
  "axChips\030\004 \001(\003\022\025\n\routChipsCount\030\005 \001(\003\"\343\003\n"
  "\024EnumChipChangeReason\022\021\n\rrefresh_chips\020\000"
  "\022\016\n\ngame_buyin\020\001\022\022\n\016game_give_back\020\002\022\022\n\016"
  "game_start_bet\020\003\022\024\n\020game_timer_award\020\004\022\017"
  "\n\013login_award\020\005\022\023\n\017play_task_award\020\006\022\026\n\022"
  "goldcap_task_award\020\007\022\016\n\nsign_award\020\010\022\022\n\016"
  "friend_present\020\t\022\023\n\017bankrupt_relief\020\n\022\021\n"
  "\rupgrade_award\020\013\022\022\n\016register_award\020\014\022\020\n\014"
  "buy_in_store\020\r\022\021\n\rbuy_gift_cost\020\016\022\032\n\026buy"
  "_gift_failed_return\020\017\022\r\n\tsale_gift\020\020\022\027\n\023"
  "invite_friend_award\020\021\022\024\n\020gameover_accoun"
  "t\020\022\022\025\n\021purchase_prop_php\020,\022\023\n\016timely_acc"
  "ount\020\310\001\022\021\n\014botman_chips\020\311\001\022\016\n\tgame_tips\020"
  "\312\001\"\033\n\031PlayerChipsChangeResponse\"V\n\030Playe"
  "rCoinsChangeRequest\022\016\n\006userId\030\001 \001(\005\022\024\n\014c"
  "hangeReason\030\002 \001(\005\022\024\n\014currentCoins\030\003 \001(\003\""
  "\033\n\031PlayerCoinsChangeResponse\"l\n\030PlayerCh"
  "armUpgradRequest\022\016\n\006userId\030\001 \001(\005\022\020\n\010newL"
  "evel\030\002 \001(\005\022\024\n\014currentCharm\030\003 \001(\003\022\030\n\020next"
  "UpgradeCharm\030\004 \001(\003\"\033\n\031PlayerCharmUpgradR"
  "esponse\"U\n\023UserBankruptRequest\022\025\n\rbankru"
  "ptTimes\030\001 \001(\005\022\023\n\013reliefChips\030\002 \001(\003\022\022\n\naw"
  "ardTimes\030\003 \001(\005\"\026\n\024UserBankruptResponse\"W"
  "\n\025UserCommNotifyRequest\022\025\n\rnotifyMsgType"
  "\030\001 \001(\005\022\023\n\013notifyMsgId\030\002 \001(\005\022\022\n\nnotifyDat"
  "a\030\003 \001(\014\"\030\n\026UserCommNotifyResponse\"B\n\033Pla"
  "yerLoginElsewhereRequest\022\016\n\006reason\030\001 \001(\005"
  "\022\023\n\013description\030\002 \001(\014\"\036\n\034PlayerLoginElse"
  "whereResponse\"t\n\024PlayerUpgradeRequest\022\016\n"
  "\006userId\030\001 \001(\005\022\020\n\010newLevel\030\002 \001(\005\022\022\n\ncurre"
  "ntExp\030\003 \001(\003\022\022\n\nupgradeExp\030\004 \001(\003\022\022\n\naward"
  "Chips\030\005 \001(\003\"\027\n\025PlayerUpgradeResponse\"1\n\034"
  "UserTokenLoginDcenterRequest\022\021\n\tuserToke"
  "n\030\001 \001(\014\"\037\n\035UserTokenLoginDcenterResponse"
  "*J\n\021EnumKickOutReason\022\033\n\027KICKFOR_LOGIN_E"
  "LSEWHERE\020\000\022\030\n\024KICKFOR_SEAL_ACCOUNT\020\001"
,
  "LobbyMsg.proto", &assign_descriptors_table_LobbyMsg_2eproto, 1556,
};

void AddDescriptors_LobbyMsg_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_LobbyMsg_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LobbyMsg_2eproto = []() { AddDescriptors_LobbyMsg_2eproto(); return true; }();
namespace LobbyMsg {
const ::google::protobuf::EnumDescriptor* PlayerChipsChangeRequest_EnumChipChangeReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_LobbyMsg_2eproto);
  return file_level_enum_descriptors_LobbyMsg_2eproto[0];
}
bool PlayerChipsChangeRequest_EnumChipChangeReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 44:
    case 200:
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::refresh_chips;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::game_buyin;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::game_give_back;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::game_start_bet;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::game_timer_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::login_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::play_task_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::goldcap_task_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::sign_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::friend_present;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::bankrupt_relief;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::upgrade_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::register_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::buy_in_store;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::buy_gift_cost;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::buy_gift_failed_return;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::sale_gift;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::invite_friend_award;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::gameover_account;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::purchase_prop_php;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::timely_account;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::botman_chips;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::game_tips;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::EnumChipChangeReason_MIN;
const PlayerChipsChangeRequest_EnumChipChangeReason PlayerChipsChangeRequest::EnumChipChangeReason_MAX;
const int PlayerChipsChangeRequest::EnumChipChangeReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumKickOutReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_LobbyMsg_2eproto);
  return file_level_enum_descriptors_LobbyMsg_2eproto[1];
}
bool EnumKickOutReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlayerChipsChangeRequest::InitAsDefaultInstance() {
}
class PlayerChipsChangeRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerChipsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_changereason(PlayerChipsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currentchips(PlayerChipsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_maxchips(PlayerChipsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_outchipscount(PlayerChipsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerChipsChangeRequest::kUserIdFieldNumber;
const int PlayerChipsChangeRequest::kChangeReasonFieldNumber;
const int PlayerChipsChangeRequest::kCurrentChipsFieldNumber;
const int PlayerChipsChangeRequest::kMaxChipsFieldNumber;
const int PlayerChipsChangeRequest::kOutChipsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChipsChangeRequest::PlayerChipsChangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerChipsChangeRequest)
}
PlayerChipsChangeRequest::PlayerChipsChangeRequest(const PlayerChipsChangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&outchipscount_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(outchipscount_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerChipsChangeRequest)
}

void PlayerChipsChangeRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outchipscount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(outchipscount_));
}

PlayerChipsChangeRequest::~PlayerChipsChangeRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerChipsChangeRequest)
  SharedDtor();
}

void PlayerChipsChangeRequest::SharedDtor() {
}

void PlayerChipsChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChipsChangeRequest& PlayerChipsChangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChipsChangeRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerChipsChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerChipsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outchipscount_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(outchipscount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChipsChangeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChipsChangeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 changeReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_changereason(value);
        break;
      }
      // optional int64 currentChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentchips(value);
        break;
      }
      // optional int64 maxChips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_maxchips(value);
        break;
      }
      // optional int64 outChipsCount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_outchipscount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChipsChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerChipsChangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 changeReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_changereason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changereason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currentChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currentchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxChips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_maxchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 outChipsCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_outchipscount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outchipscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerChipsChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerChipsChangeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChipsChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerChipsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 changeReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changereason(), output);
  }

  // optional int64 currentChips = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currentchips(), output);
  }

  // optional int64 maxChips = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxchips(), output);
  }

  // optional int64 outChipsCount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->outchipscount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerChipsChangeRequest)
}

::google::protobuf::uint8* PlayerChipsChangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerChipsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 changeReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changereason(), target);
  }

  // optional int64 currentChips = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currentchips(), target);
  }

  // optional int64 maxChips = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxchips(), target);
  }

  // optional int64 outChipsCount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->outchipscount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerChipsChangeRequest)
  return target;
}

size_t PlayerChipsChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerChipsChangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 changeReason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changereason());
    }

    // optional int64 currentChips = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentchips());
    }

    // optional int64 maxChips = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxchips());
    }

    // optional int64 outChipsCount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->outchipscount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChipsChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerChipsChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChipsChangeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChipsChangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerChipsChangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerChipsChangeRequest)
    MergeFrom(*source);
  }
}

void PlayerChipsChangeRequest::MergeFrom(const PlayerChipsChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerChipsChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      changereason_ = from.changereason_;
    }
    if (cached_has_bits & 0x00000004u) {
      currentchips_ = from.currentchips_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxchips_ = from.maxchips_;
    }
    if (cached_has_bits & 0x00000010u) {
      outchipscount_ = from.outchipscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerChipsChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerChipsChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChipsChangeRequest::CopyFrom(const PlayerChipsChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerChipsChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChipsChangeRequest::IsInitialized() const {
  return true;
}

void PlayerChipsChangeRequest::Swap(PlayerChipsChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChipsChangeRequest::InternalSwap(PlayerChipsChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(changereason_, other->changereason_);
  swap(currentchips_, other->currentchips_);
  swap(maxchips_, other->maxchips_);
  swap(outchipscount_, other->outchipscount_);
}

::google::protobuf::Metadata PlayerChipsChangeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerChipsChangeResponse::InitAsDefaultInstance() {
}
class PlayerChipsChangeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChipsChangeResponse::PlayerChipsChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerChipsChangeResponse)
}
PlayerChipsChangeResponse::PlayerChipsChangeResponse(const PlayerChipsChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerChipsChangeResponse)
}

void PlayerChipsChangeResponse::SharedCtor() {
}

PlayerChipsChangeResponse::~PlayerChipsChangeResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerChipsChangeResponse)
  SharedDtor();
}

void PlayerChipsChangeResponse::SharedDtor() {
}

void PlayerChipsChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChipsChangeResponse& PlayerChipsChangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChipsChangeResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerChipsChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerChipsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChipsChangeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChipsChangeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChipsChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerChipsChangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerChipsChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerChipsChangeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChipsChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerChipsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerChipsChangeResponse)
}

::google::protobuf::uint8* PlayerChipsChangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerChipsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerChipsChangeResponse)
  return target;
}

size_t PlayerChipsChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerChipsChangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChipsChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerChipsChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChipsChangeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChipsChangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerChipsChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerChipsChangeResponse)
    MergeFrom(*source);
  }
}

void PlayerChipsChangeResponse::MergeFrom(const PlayerChipsChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerChipsChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerChipsChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerChipsChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChipsChangeResponse::CopyFrom(const PlayerChipsChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerChipsChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChipsChangeResponse::IsInitialized() const {
  return true;
}

void PlayerChipsChangeResponse::Swap(PlayerChipsChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChipsChangeResponse::InternalSwap(PlayerChipsChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerChipsChangeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCoinsChangeRequest::InitAsDefaultInstance() {
}
class PlayerCoinsChangeRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerCoinsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_changereason(PlayerCoinsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currentcoins(PlayerCoinsChangeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCoinsChangeRequest::kUserIdFieldNumber;
const int PlayerCoinsChangeRequest::kChangeReasonFieldNumber;
const int PlayerCoinsChangeRequest::kCurrentCoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCoinsChangeRequest::PlayerCoinsChangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerCoinsChangeRequest)
}
PlayerCoinsChangeRequest::PlayerCoinsChangeRequest(const PlayerCoinsChangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentcoins_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(currentcoins_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerCoinsChangeRequest)
}

void PlayerCoinsChangeRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentcoins_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(currentcoins_));
}

PlayerCoinsChangeRequest::~PlayerCoinsChangeRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerCoinsChangeRequest)
  SharedDtor();
}

void PlayerCoinsChangeRequest::SharedDtor() {
}

void PlayerCoinsChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCoinsChangeRequest& PlayerCoinsChangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCoinsChangeRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCoinsChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerCoinsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currentcoins_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(currentcoins_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCoinsChangeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCoinsChangeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 changeReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_changereason(value);
        break;
      }
      // optional int64 currentCoins = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentcoins(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCoinsChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerCoinsChangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 changeReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_changereason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changereason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currentCoins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currentcoins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentcoins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerCoinsChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerCoinsChangeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCoinsChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerCoinsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 changeReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changereason(), output);
  }

  // optional int64 currentCoins = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currentcoins(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerCoinsChangeRequest)
}

::google::protobuf::uint8* PlayerCoinsChangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerCoinsChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 changeReason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changereason(), target);
  }

  // optional int64 currentCoins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currentcoins(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerCoinsChangeRequest)
  return target;
}

size_t PlayerCoinsChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerCoinsChangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 changeReason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changereason());
    }

    // optional int64 currentCoins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentcoins());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCoinsChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerCoinsChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCoinsChangeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCoinsChangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerCoinsChangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerCoinsChangeRequest)
    MergeFrom(*source);
  }
}

void PlayerCoinsChangeRequest::MergeFrom(const PlayerCoinsChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerCoinsChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      changereason_ = from.changereason_;
    }
    if (cached_has_bits & 0x00000004u) {
      currentcoins_ = from.currentcoins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCoinsChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerCoinsChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCoinsChangeRequest::CopyFrom(const PlayerCoinsChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerCoinsChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCoinsChangeRequest::IsInitialized() const {
  return true;
}

void PlayerCoinsChangeRequest::Swap(PlayerCoinsChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCoinsChangeRequest::InternalSwap(PlayerCoinsChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(changereason_, other->changereason_);
  swap(currentcoins_, other->currentcoins_);
}

::google::protobuf::Metadata PlayerCoinsChangeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCoinsChangeResponse::InitAsDefaultInstance() {
}
class PlayerCoinsChangeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCoinsChangeResponse::PlayerCoinsChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerCoinsChangeResponse)
}
PlayerCoinsChangeResponse::PlayerCoinsChangeResponse(const PlayerCoinsChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerCoinsChangeResponse)
}

void PlayerCoinsChangeResponse::SharedCtor() {
}

PlayerCoinsChangeResponse::~PlayerCoinsChangeResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerCoinsChangeResponse)
  SharedDtor();
}

void PlayerCoinsChangeResponse::SharedDtor() {
}

void PlayerCoinsChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCoinsChangeResponse& PlayerCoinsChangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCoinsChangeResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCoinsChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerCoinsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCoinsChangeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCoinsChangeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCoinsChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerCoinsChangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerCoinsChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerCoinsChangeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCoinsChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerCoinsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerCoinsChangeResponse)
}

::google::protobuf::uint8* PlayerCoinsChangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerCoinsChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerCoinsChangeResponse)
  return target;
}

size_t PlayerCoinsChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerCoinsChangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCoinsChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerCoinsChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCoinsChangeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCoinsChangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerCoinsChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerCoinsChangeResponse)
    MergeFrom(*source);
  }
}

void PlayerCoinsChangeResponse::MergeFrom(const PlayerCoinsChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerCoinsChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerCoinsChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerCoinsChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCoinsChangeResponse::CopyFrom(const PlayerCoinsChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerCoinsChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCoinsChangeResponse::IsInitialized() const {
  return true;
}

void PlayerCoinsChangeResponse::Swap(PlayerCoinsChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCoinsChangeResponse::InternalSwap(PlayerCoinsChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerCoinsChangeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCharmUpgradRequest::InitAsDefaultInstance() {
}
class PlayerCharmUpgradRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerCharmUpgradRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_newlevel(PlayerCharmUpgradRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currentcharm(PlayerCharmUpgradRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_nextupgradecharm(PlayerCharmUpgradRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCharmUpgradRequest::kUserIdFieldNumber;
const int PlayerCharmUpgradRequest::kNewLevelFieldNumber;
const int PlayerCharmUpgradRequest::kCurrentCharmFieldNumber;
const int PlayerCharmUpgradRequest::kNextUpgradeCharmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCharmUpgradRequest::PlayerCharmUpgradRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerCharmUpgradRequest)
}
PlayerCharmUpgradRequest::PlayerCharmUpgradRequest(const PlayerCharmUpgradRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextupgradecharm_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(nextupgradecharm_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerCharmUpgradRequest)
}

void PlayerCharmUpgradRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextupgradecharm_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(nextupgradecharm_));
}

PlayerCharmUpgradRequest::~PlayerCharmUpgradRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerCharmUpgradRequest)
  SharedDtor();
}

void PlayerCharmUpgradRequest::SharedDtor() {
}

void PlayerCharmUpgradRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCharmUpgradRequest& PlayerCharmUpgradRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCharmUpgradRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCharmUpgradRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerCharmUpgradRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextupgradecharm_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(nextupgradecharm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCharmUpgradRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCharmUpgradRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 newLevel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_newlevel(value);
        break;
      }
      // optional int64 currentCharm = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentcharm(value);
        break;
      }
      // optional int64 nextUpgradeCharm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_nextupgradecharm(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCharmUpgradRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerCharmUpgradRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 newLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newlevel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currentCharm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currentcharm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentcharm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 nextUpgradeCharm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_nextupgradecharm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextupgradecharm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerCharmUpgradRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerCharmUpgradRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCharmUpgradRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerCharmUpgradRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 newLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newlevel(), output);
  }

  // optional int64 currentCharm = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currentcharm(), output);
  }

  // optional int64 nextUpgradeCharm = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nextupgradecharm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerCharmUpgradRequest)
}

::google::protobuf::uint8* PlayerCharmUpgradRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerCharmUpgradRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 newLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newlevel(), target);
  }

  // optional int64 currentCharm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currentcharm(), target);
  }

  // optional int64 nextUpgradeCharm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nextupgradecharm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerCharmUpgradRequest)
  return target;
}

size_t PlayerCharmUpgradRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerCharmUpgradRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 newLevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlevel());
    }

    // optional int64 currentCharm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentcharm());
    }

    // optional int64 nextUpgradeCharm = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextupgradecharm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCharmUpgradRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerCharmUpgradRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCharmUpgradRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCharmUpgradRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerCharmUpgradRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerCharmUpgradRequest)
    MergeFrom(*source);
  }
}

void PlayerCharmUpgradRequest::MergeFrom(const PlayerCharmUpgradRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerCharmUpgradRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newlevel_ = from.newlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      currentcharm_ = from.currentcharm_;
    }
    if (cached_has_bits & 0x00000008u) {
      nextupgradecharm_ = from.nextupgradecharm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCharmUpgradRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerCharmUpgradRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCharmUpgradRequest::CopyFrom(const PlayerCharmUpgradRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerCharmUpgradRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCharmUpgradRequest::IsInitialized() const {
  return true;
}

void PlayerCharmUpgradRequest::Swap(PlayerCharmUpgradRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCharmUpgradRequest::InternalSwap(PlayerCharmUpgradRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(newlevel_, other->newlevel_);
  swap(currentcharm_, other->currentcharm_);
  swap(nextupgradecharm_, other->nextupgradecharm_);
}

::google::protobuf::Metadata PlayerCharmUpgradRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerCharmUpgradResponse::InitAsDefaultInstance() {
}
class PlayerCharmUpgradResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCharmUpgradResponse::PlayerCharmUpgradResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerCharmUpgradResponse)
}
PlayerCharmUpgradResponse::PlayerCharmUpgradResponse(const PlayerCharmUpgradResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerCharmUpgradResponse)
}

void PlayerCharmUpgradResponse::SharedCtor() {
}

PlayerCharmUpgradResponse::~PlayerCharmUpgradResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerCharmUpgradResponse)
  SharedDtor();
}

void PlayerCharmUpgradResponse::SharedDtor() {
}

void PlayerCharmUpgradResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCharmUpgradResponse& PlayerCharmUpgradResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerCharmUpgradResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCharmUpgradResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerCharmUpgradResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCharmUpgradResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerCharmUpgradResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCharmUpgradResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerCharmUpgradResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerCharmUpgradResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerCharmUpgradResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCharmUpgradResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerCharmUpgradResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerCharmUpgradResponse)
}

::google::protobuf::uint8* PlayerCharmUpgradResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerCharmUpgradResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerCharmUpgradResponse)
  return target;
}

size_t PlayerCharmUpgradResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerCharmUpgradResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCharmUpgradResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerCharmUpgradResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCharmUpgradResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerCharmUpgradResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerCharmUpgradResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerCharmUpgradResponse)
    MergeFrom(*source);
  }
}

void PlayerCharmUpgradResponse::MergeFrom(const PlayerCharmUpgradResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerCharmUpgradResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerCharmUpgradResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerCharmUpgradResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCharmUpgradResponse::CopyFrom(const PlayerCharmUpgradResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerCharmUpgradResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCharmUpgradResponse::IsInitialized() const {
  return true;
}

void PlayerCharmUpgradResponse::Swap(PlayerCharmUpgradResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCharmUpgradResponse::InternalSwap(PlayerCharmUpgradResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerCharmUpgradResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBankruptRequest::InitAsDefaultInstance() {
}
class UserBankruptRequest::HasBitSetters {
 public:
  static void set_has_bankrupttimes(UserBankruptRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_reliefchips(UserBankruptRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_awardtimes(UserBankruptRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBankruptRequest::kBankruptTimesFieldNumber;
const int UserBankruptRequest::kReliefChipsFieldNumber;
const int UserBankruptRequest::kAwardTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBankruptRequest::UserBankruptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserBankruptRequest)
}
UserBankruptRequest::UserBankruptRequest(const UserBankruptRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reliefchips_, &from.reliefchips_,
    static_cast<size_t>(reinterpret_cast<char*>(&awardtimes_) -
    reinterpret_cast<char*>(&reliefchips_)) + sizeof(awardtimes_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserBankruptRequest)
}

void UserBankruptRequest::SharedCtor() {
  ::memset(&reliefchips_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awardtimes_) -
      reinterpret_cast<char*>(&reliefchips_)) + sizeof(awardtimes_));
}

UserBankruptRequest::~UserBankruptRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserBankruptRequest)
  SharedDtor();
}

void UserBankruptRequest::SharedDtor() {
}

void UserBankruptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBankruptRequest& UserBankruptRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBankruptRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBankruptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserBankruptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&reliefchips_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&awardtimes_) -
        reinterpret_cast<char*>(&reliefchips_)) + sizeof(awardtimes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBankruptRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBankruptRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 bankruptTimes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_bankrupttimes(value);
        break;
      }
      // optional int64 reliefChips = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_reliefchips(value);
        break;
      }
      // optional int32 awardTimes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_awardtimes(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBankruptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserBankruptRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankruptTimes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bankrupttimes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankrupttimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reliefChips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_reliefchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reliefchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 awardTimes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_awardtimes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserBankruptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserBankruptRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBankruptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserBankruptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bankruptTimes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankrupttimes(), output);
  }

  // optional int64 reliefChips = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->reliefchips(), output);
  }

  // optional int32 awardTimes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardtimes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserBankruptRequest)
}

::google::protobuf::uint8* UserBankruptRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserBankruptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bankruptTimes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankrupttimes(), target);
  }

  // optional int64 reliefChips = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->reliefchips(), target);
  }

  // optional int32 awardTimes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardtimes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserBankruptRequest)
  return target;
}

size_t UserBankruptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserBankruptRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 reliefChips = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reliefchips());
    }

    // optional int32 bankruptTimes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankrupttimes());
    }

    // optional int32 awardTimes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtimes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBankruptRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserBankruptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBankruptRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserBankruptRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserBankruptRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserBankruptRequest)
    MergeFrom(*source);
  }
}

void UserBankruptRequest::MergeFrom(const UserBankruptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserBankruptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      reliefchips_ = from.reliefchips_;
    }
    if (cached_has_bits & 0x00000002u) {
      bankrupttimes_ = from.bankrupttimes_;
    }
    if (cached_has_bits & 0x00000004u) {
      awardtimes_ = from.awardtimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserBankruptRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserBankruptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBankruptRequest::CopyFrom(const UserBankruptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserBankruptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBankruptRequest::IsInitialized() const {
  return true;
}

void UserBankruptRequest::Swap(UserBankruptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBankruptRequest::InternalSwap(UserBankruptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reliefchips_, other->reliefchips_);
  swap(bankrupttimes_, other->bankrupttimes_);
  swap(awardtimes_, other->awardtimes_);
}

::google::protobuf::Metadata UserBankruptRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBankruptResponse::InitAsDefaultInstance() {
}
class UserBankruptResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBankruptResponse::UserBankruptResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserBankruptResponse)
}
UserBankruptResponse::UserBankruptResponse(const UserBankruptResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserBankruptResponse)
}

void UserBankruptResponse::SharedCtor() {
}

UserBankruptResponse::~UserBankruptResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserBankruptResponse)
  SharedDtor();
}

void UserBankruptResponse::SharedDtor() {
}

void UserBankruptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBankruptResponse& UserBankruptResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBankruptResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBankruptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserBankruptResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBankruptResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBankruptResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBankruptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserBankruptResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserBankruptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserBankruptResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBankruptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserBankruptResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserBankruptResponse)
}

::google::protobuf::uint8* UserBankruptResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserBankruptResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserBankruptResponse)
  return target;
}

size_t UserBankruptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserBankruptResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBankruptResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserBankruptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBankruptResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserBankruptResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserBankruptResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserBankruptResponse)
    MergeFrom(*source);
  }
}

void UserBankruptResponse::MergeFrom(const UserBankruptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserBankruptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserBankruptResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserBankruptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBankruptResponse::CopyFrom(const UserBankruptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserBankruptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBankruptResponse::IsInitialized() const {
  return true;
}

void UserBankruptResponse::Swap(UserBankruptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBankruptResponse::InternalSwap(UserBankruptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata UserBankruptResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserCommNotifyRequest::InitAsDefaultInstance() {
}
class UserCommNotifyRequest::HasBitSetters {
 public:
  static void set_has_notifymsgtype(UserCommNotifyRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_notifymsgid(UserCommNotifyRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_notifydata(UserCommNotifyRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCommNotifyRequest::kNotifyMsgTypeFieldNumber;
const int UserCommNotifyRequest::kNotifyMsgIdFieldNumber;
const int UserCommNotifyRequest::kNotifyDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCommNotifyRequest::UserCommNotifyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserCommNotifyRequest)
}
UserCommNotifyRequest::UserCommNotifyRequest(const UserCommNotifyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notifydata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notifydata()) {
    notifydata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notifydata_);
  }
  ::memcpy(&notifymsgtype_, &from.notifymsgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&notifymsgid_) -
    reinterpret_cast<char*>(&notifymsgtype_)) + sizeof(notifymsgid_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserCommNotifyRequest)
}

void UserCommNotifyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserCommNotifyRequest_LobbyMsg_2eproto.base);
  notifydata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&notifymsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notifymsgid_) -
      reinterpret_cast<char*>(&notifymsgtype_)) + sizeof(notifymsgid_));
}

UserCommNotifyRequest::~UserCommNotifyRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserCommNotifyRequest)
  SharedDtor();
}

void UserCommNotifyRequest::SharedDtor() {
  notifydata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserCommNotifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserCommNotifyRequest& UserCommNotifyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserCommNotifyRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserCommNotifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserCommNotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notifydata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&notifymsgtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notifymsgid_) -
        reinterpret_cast<char*>(&notifymsgtype_)) + sizeof(notifymsgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserCommNotifyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserCommNotifyRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 notifyMsgType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_notifymsgtype(value);
        break;
      }
      // optional int32 notifyMsgId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_notifymsgid(value);
        break;
      }
      // optional bytes notifyData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_notifydata();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserCommNotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserCommNotifyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 notifyMsgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_notifymsgtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifymsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 notifyMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_notifymsgid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifymsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes notifyData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notifydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserCommNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserCommNotifyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserCommNotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserCommNotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 notifyMsgType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->notifymsgtype(), output);
  }

  // optional int32 notifyMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->notifymsgid(), output);
  }

  // optional bytes notifyData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->notifydata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserCommNotifyRequest)
}

::google::protobuf::uint8* UserCommNotifyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserCommNotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 notifyMsgType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->notifymsgtype(), target);
  }

  // optional int32 notifyMsgId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->notifymsgid(), target);
  }

  // optional bytes notifyData = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->notifydata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserCommNotifyRequest)
  return target;
}

size_t UserCommNotifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserCommNotifyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes notifyData = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notifydata());
    }

    // optional int32 notifyMsgType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notifymsgtype());
    }

    // optional int32 notifyMsgId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notifymsgid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserCommNotifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserCommNotifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCommNotifyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserCommNotifyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserCommNotifyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserCommNotifyRequest)
    MergeFrom(*source);
  }
}

void UserCommNotifyRequest::MergeFrom(const UserCommNotifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserCommNotifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      notifydata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notifydata_);
    }
    if (cached_has_bits & 0x00000002u) {
      notifymsgtype_ = from.notifymsgtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifymsgid_ = from.notifymsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserCommNotifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserCommNotifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCommNotifyRequest::CopyFrom(const UserCommNotifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserCommNotifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCommNotifyRequest::IsInitialized() const {
  return true;
}

void UserCommNotifyRequest::Swap(UserCommNotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCommNotifyRequest::InternalSwap(UserCommNotifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notifydata_.Swap(&other->notifydata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(notifymsgtype_, other->notifymsgtype_);
  swap(notifymsgid_, other->notifymsgid_);
}

::google::protobuf::Metadata UserCommNotifyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserCommNotifyResponse::InitAsDefaultInstance() {
}
class UserCommNotifyResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCommNotifyResponse::UserCommNotifyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserCommNotifyResponse)
}
UserCommNotifyResponse::UserCommNotifyResponse(const UserCommNotifyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserCommNotifyResponse)
}

void UserCommNotifyResponse::SharedCtor() {
}

UserCommNotifyResponse::~UserCommNotifyResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserCommNotifyResponse)
  SharedDtor();
}

void UserCommNotifyResponse::SharedDtor() {
}

void UserCommNotifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserCommNotifyResponse& UserCommNotifyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserCommNotifyResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserCommNotifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserCommNotifyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserCommNotifyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserCommNotifyResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserCommNotifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserCommNotifyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserCommNotifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserCommNotifyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserCommNotifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserCommNotifyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserCommNotifyResponse)
}

::google::protobuf::uint8* UserCommNotifyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserCommNotifyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserCommNotifyResponse)
  return target;
}

size_t UserCommNotifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserCommNotifyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserCommNotifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserCommNotifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCommNotifyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserCommNotifyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserCommNotifyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserCommNotifyResponse)
    MergeFrom(*source);
  }
}

void UserCommNotifyResponse::MergeFrom(const UserCommNotifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserCommNotifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserCommNotifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserCommNotifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCommNotifyResponse::CopyFrom(const UserCommNotifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserCommNotifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCommNotifyResponse::IsInitialized() const {
  return true;
}

void UserCommNotifyResponse::Swap(UserCommNotifyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCommNotifyResponse::InternalSwap(UserCommNotifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata UserCommNotifyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerLoginElsewhereRequest::InitAsDefaultInstance() {
}
class PlayerLoginElsewhereRequest::HasBitSetters {
 public:
  static void set_has_reason(PlayerLoginElsewhereRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_description(PlayerLoginElsewhereRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLoginElsewhereRequest::kReasonFieldNumber;
const int PlayerLoginElsewhereRequest::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoginElsewhereRequest::PlayerLoginElsewhereRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerLoginElsewhereRequest)
}
PlayerLoginElsewhereRequest::PlayerLoginElsewhereRequest(const PlayerLoginElsewhereRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerLoginElsewhereRequest)
}

void PlayerLoginElsewhereRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerLoginElsewhereRequest_LobbyMsg_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

PlayerLoginElsewhereRequest::~PlayerLoginElsewhereRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerLoginElsewhereRequest)
  SharedDtor();
}

void PlayerLoginElsewhereRequest::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerLoginElsewhereRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoginElsewhereRequest& PlayerLoginElsewhereRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerLoginElsewhereRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoginElsewhereRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerLoginElsewhereRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLoginElsewhereRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerLoginElsewhereRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 reason = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_reason(value);
        break;
      }
      // optional bytes description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_description();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLoginElsewhereRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerLoginElsewhereRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerLoginElsewhereRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerLoginElsewhereRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLoginElsewhereRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerLoginElsewhereRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reason = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // optional bytes description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerLoginElsewhereRequest)
}

::google::protobuf::uint8* PlayerLoginElsewhereRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerLoginElsewhereRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reason = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // optional bytes description = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerLoginElsewhereRequest)
  return target;
}

size_t PlayerLoginElsewhereRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerLoginElsewhereRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional int32 reason = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoginElsewhereRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerLoginElsewhereRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginElsewhereRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerLoginElsewhereRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerLoginElsewhereRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerLoginElsewhereRequest)
    MergeFrom(*source);
  }
}

void PlayerLoginElsewhereRequest::MergeFrom(const PlayerLoginElsewhereRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerLoginElsewhereRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerLoginElsewhereRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerLoginElsewhereRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginElsewhereRequest::CopyFrom(const PlayerLoginElsewhereRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerLoginElsewhereRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginElsewhereRequest::IsInitialized() const {
  return true;
}

void PlayerLoginElsewhereRequest::Swap(PlayerLoginElsewhereRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoginElsewhereRequest::InternalSwap(PlayerLoginElsewhereRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::google::protobuf::Metadata PlayerLoginElsewhereRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerLoginElsewhereResponse::InitAsDefaultInstance() {
}
class PlayerLoginElsewhereResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLoginElsewhereResponse::PlayerLoginElsewhereResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerLoginElsewhereResponse)
}
PlayerLoginElsewhereResponse::PlayerLoginElsewhereResponse(const PlayerLoginElsewhereResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerLoginElsewhereResponse)
}

void PlayerLoginElsewhereResponse::SharedCtor() {
}

PlayerLoginElsewhereResponse::~PlayerLoginElsewhereResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerLoginElsewhereResponse)
  SharedDtor();
}

void PlayerLoginElsewhereResponse::SharedDtor() {
}

void PlayerLoginElsewhereResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoginElsewhereResponse& PlayerLoginElsewhereResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerLoginElsewhereResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoginElsewhereResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerLoginElsewhereResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLoginElsewhereResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerLoginElsewhereResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLoginElsewhereResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerLoginElsewhereResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerLoginElsewhereResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerLoginElsewhereResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLoginElsewhereResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerLoginElsewhereResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerLoginElsewhereResponse)
}

::google::protobuf::uint8* PlayerLoginElsewhereResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerLoginElsewhereResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerLoginElsewhereResponse)
  return target;
}

size_t PlayerLoginElsewhereResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerLoginElsewhereResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoginElsewhereResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerLoginElsewhereResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginElsewhereResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerLoginElsewhereResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerLoginElsewhereResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerLoginElsewhereResponse)
    MergeFrom(*source);
  }
}

void PlayerLoginElsewhereResponse::MergeFrom(const PlayerLoginElsewhereResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerLoginElsewhereResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerLoginElsewhereResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerLoginElsewhereResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginElsewhereResponse::CopyFrom(const PlayerLoginElsewhereResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerLoginElsewhereResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginElsewhereResponse::IsInitialized() const {
  return true;
}

void PlayerLoginElsewhereResponse::Swap(PlayerLoginElsewhereResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLoginElsewhereResponse::InternalSwap(PlayerLoginElsewhereResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerLoginElsewhereResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerUpgradeRequest::InitAsDefaultInstance() {
}
class PlayerUpgradeRequest::HasBitSetters {
 public:
  static void set_has_userid(PlayerUpgradeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_newlevel(PlayerUpgradeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currentexp(PlayerUpgradeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_upgradeexp(PlayerUpgradeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_awardchips(PlayerUpgradeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUpgradeRequest::kUserIdFieldNumber;
const int PlayerUpgradeRequest::kNewLevelFieldNumber;
const int PlayerUpgradeRequest::kCurrentExpFieldNumber;
const int PlayerUpgradeRequest::kUpgradeExpFieldNumber;
const int PlayerUpgradeRequest::kAwardChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUpgradeRequest::PlayerUpgradeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerUpgradeRequest)
}
PlayerUpgradeRequest::PlayerUpgradeRequest(const PlayerUpgradeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&awardchips_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(awardchips_));
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerUpgradeRequest)
}

void PlayerUpgradeRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awardchips_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(awardchips_));
}

PlayerUpgradeRequest::~PlayerUpgradeRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerUpgradeRequest)
  SharedDtor();
}

void PlayerUpgradeRequest::SharedDtor() {
}

void PlayerUpgradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerUpgradeRequest& PlayerUpgradeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerUpgradeRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerUpgradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerUpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&awardchips_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(awardchips_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerUpgradeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerUpgradeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // optional int32 newLevel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_newlevel(value);
        break;
      }
      // optional int64 currentExp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentexp(value);
        break;
      }
      // optional int64 upgradeExp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_upgradeexp(value);
        break;
      }
      // optional int64 awardChips = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_awardchips(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerUpgradeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 newLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newlevel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currentExp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currentexp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 upgradeExp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_upgradeexp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upgradeexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 awardChips = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_awardchips(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerUpgradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerUpgradeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerUpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 newLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newlevel(), output);
  }

  // optional int64 currentExp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currentexp(), output);
  }

  // optional int64 upgradeExp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->upgradeexp(), output);
  }

  // optional int64 awardChips = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->awardchips(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerUpgradeRequest)
}

::google::protobuf::uint8* PlayerUpgradeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerUpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 newLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newlevel(), target);
  }

  // optional int64 currentExp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currentexp(), target);
  }

  // optional int64 upgradeExp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->upgradeexp(), target);
  }

  // optional int64 awardChips = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->awardchips(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerUpgradeRequest)
  return target;
}

size_t PlayerUpgradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerUpgradeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 userId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 newLevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newlevel());
    }

    // optional int64 currentExp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentexp());
    }

    // optional int64 upgradeExp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upgradeexp());
    }

    // optional int64 awardChips = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardchips());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerUpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUpgradeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerUpgradeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerUpgradeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerUpgradeRequest)
    MergeFrom(*source);
  }
}

void PlayerUpgradeRequest::MergeFrom(const PlayerUpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerUpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newlevel_ = from.newlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      currentexp_ = from.currentexp_;
    }
    if (cached_has_bits & 0x00000008u) {
      upgradeexp_ = from.upgradeexp_;
    }
    if (cached_has_bits & 0x00000010u) {
      awardchips_ = from.awardchips_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerUpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpgradeRequest::CopyFrom(const PlayerUpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerUpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpgradeRequest::IsInitialized() const {
  return true;
}

void PlayerUpgradeRequest::Swap(PlayerUpgradeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUpgradeRequest::InternalSwap(PlayerUpgradeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(newlevel_, other->newlevel_);
  swap(currentexp_, other->currentexp_);
  swap(upgradeexp_, other->upgradeexp_);
  swap(awardchips_, other->awardchips_);
}

::google::protobuf::Metadata PlayerUpgradeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerUpgradeResponse::InitAsDefaultInstance() {
}
class PlayerUpgradeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUpgradeResponse::PlayerUpgradeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.PlayerUpgradeResponse)
}
PlayerUpgradeResponse::PlayerUpgradeResponse(const PlayerUpgradeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.PlayerUpgradeResponse)
}

void PlayerUpgradeResponse::SharedCtor() {
}

PlayerUpgradeResponse::~PlayerUpgradeResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.PlayerUpgradeResponse)
  SharedDtor();
}

void PlayerUpgradeResponse::SharedDtor() {
}

void PlayerUpgradeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerUpgradeResponse& PlayerUpgradeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerUpgradeResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerUpgradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.PlayerUpgradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerUpgradeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerUpgradeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.PlayerUpgradeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.PlayerUpgradeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.PlayerUpgradeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.PlayerUpgradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.PlayerUpgradeResponse)
}

::google::protobuf::uint8* PlayerUpgradeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.PlayerUpgradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.PlayerUpgradeResponse)
  return target;
}

size_t PlayerUpgradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.PlayerUpgradeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerUpgradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.PlayerUpgradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerUpgradeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerUpgradeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.PlayerUpgradeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.PlayerUpgradeResponse)
    MergeFrom(*source);
  }
}

void PlayerUpgradeResponse::MergeFrom(const PlayerUpgradeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.PlayerUpgradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayerUpgradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.PlayerUpgradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpgradeResponse::CopyFrom(const PlayerUpgradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.PlayerUpgradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpgradeResponse::IsInitialized() const {
  return true;
}

void PlayerUpgradeResponse::Swap(PlayerUpgradeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUpgradeResponse::InternalSwap(PlayerUpgradeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata PlayerUpgradeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserTokenLoginDcenterRequest::InitAsDefaultInstance() {
}
class UserTokenLoginDcenterRequest::HasBitSetters {
 public:
  static void set_has_usertoken(UserTokenLoginDcenterRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTokenLoginDcenterRequest::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTokenLoginDcenterRequest::UserTokenLoginDcenterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserTokenLoginDcenterRequest)
}
UserTokenLoginDcenterRequest::UserTokenLoginDcenterRequest(const UserTokenLoginDcenterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_usertoken()) {
    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserTokenLoginDcenterRequest)
}

void UserTokenLoginDcenterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserTokenLoginDcenterRequest_LobbyMsg_2eproto.base);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserTokenLoginDcenterRequest::~UserTokenLoginDcenterRequest() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserTokenLoginDcenterRequest)
  SharedDtor();
}

void UserTokenLoginDcenterRequest::SharedDtor() {
  usertoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserTokenLoginDcenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTokenLoginDcenterRequest& UserTokenLoginDcenterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserTokenLoginDcenterRequest_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserTokenLoginDcenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserTokenLoginDcenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    usertoken_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserTokenLoginDcenterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserTokenLoginDcenterRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes userToken = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_usertoken();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserTokenLoginDcenterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserTokenLoginDcenterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usertoken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserTokenLoginDcenterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserTokenLoginDcenterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserTokenLoginDcenterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserTokenLoginDcenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes userToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->usertoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserTokenLoginDcenterRequest)
}

::google::protobuf::uint8* UserTokenLoginDcenterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserTokenLoginDcenterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes userToken = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->usertoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserTokenLoginDcenterRequest)
  return target;
}

size_t UserTokenLoginDcenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserTokenLoginDcenterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes userToken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->usertoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTokenLoginDcenterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserTokenLoginDcenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTokenLoginDcenterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserTokenLoginDcenterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserTokenLoginDcenterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserTokenLoginDcenterRequest)
    MergeFrom(*source);
  }
}

void UserTokenLoginDcenterRequest::MergeFrom(const UserTokenLoginDcenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserTokenLoginDcenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_usertoken()) {
    _has_bits_[0] |= 0x00000001u;
    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
}

void UserTokenLoginDcenterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserTokenLoginDcenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTokenLoginDcenterRequest::CopyFrom(const UserTokenLoginDcenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserTokenLoginDcenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenLoginDcenterRequest::IsInitialized() const {
  return true;
}

void UserTokenLoginDcenterRequest::Swap(UserTokenLoginDcenterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTokenLoginDcenterRequest::InternalSwap(UserTokenLoginDcenterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usertoken_.Swap(&other->usertoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserTokenLoginDcenterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserTokenLoginDcenterResponse::InitAsDefaultInstance() {
}
class UserTokenLoginDcenterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTokenLoginDcenterResponse::UserTokenLoginDcenterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LobbyMsg.UserTokenLoginDcenterResponse)
}
UserTokenLoginDcenterResponse::UserTokenLoginDcenterResponse(const UserTokenLoginDcenterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LobbyMsg.UserTokenLoginDcenterResponse)
}

void UserTokenLoginDcenterResponse::SharedCtor() {
}

UserTokenLoginDcenterResponse::~UserTokenLoginDcenterResponse() {
  // @@protoc_insertion_point(destructor:LobbyMsg.UserTokenLoginDcenterResponse)
  SharedDtor();
}

void UserTokenLoginDcenterResponse::SharedDtor() {
}

void UserTokenLoginDcenterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTokenLoginDcenterResponse& UserTokenLoginDcenterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserTokenLoginDcenterResponse_LobbyMsg_2eproto.base);
  return *internal_default_instance();
}


void UserTokenLoginDcenterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LobbyMsg.UserTokenLoginDcenterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserTokenLoginDcenterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserTokenLoginDcenterResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserTokenLoginDcenterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LobbyMsg.UserTokenLoginDcenterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LobbyMsg.UserTokenLoginDcenterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LobbyMsg.UserTokenLoginDcenterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserTokenLoginDcenterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LobbyMsg.UserTokenLoginDcenterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LobbyMsg.UserTokenLoginDcenterResponse)
}

::google::protobuf::uint8* UserTokenLoginDcenterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LobbyMsg.UserTokenLoginDcenterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LobbyMsg.UserTokenLoginDcenterResponse)
  return target;
}

size_t UserTokenLoginDcenterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LobbyMsg.UserTokenLoginDcenterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTokenLoginDcenterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LobbyMsg.UserTokenLoginDcenterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTokenLoginDcenterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserTokenLoginDcenterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LobbyMsg.UserTokenLoginDcenterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LobbyMsg.UserTokenLoginDcenterResponse)
    MergeFrom(*source);
  }
}

void UserTokenLoginDcenterResponse::MergeFrom(const UserTokenLoginDcenterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LobbyMsg.UserTokenLoginDcenterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserTokenLoginDcenterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LobbyMsg.UserTokenLoginDcenterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTokenLoginDcenterResponse::CopyFrom(const UserTokenLoginDcenterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LobbyMsg.UserTokenLoginDcenterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenLoginDcenterResponse::IsInitialized() const {
  return true;
}

void UserTokenLoginDcenterResponse::Swap(UserTokenLoginDcenterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTokenLoginDcenterResponse::InternalSwap(UserTokenLoginDcenterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata UserTokenLoginDcenterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LobbyMsg_2eproto);
  return ::file_level_metadata_LobbyMsg_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LobbyMsg
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerChipsChangeRequest* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerChipsChangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerChipsChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerChipsChangeResponse* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerChipsChangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerChipsChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerCoinsChangeRequest* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerCoinsChangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerCoinsChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerCoinsChangeResponse* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerCoinsChangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerCoinsChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerCharmUpgradRequest* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerCharmUpgradRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerCharmUpgradRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerCharmUpgradResponse* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerCharmUpgradResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerCharmUpgradResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserBankruptRequest* Arena::CreateMaybeMessage< ::LobbyMsg::UserBankruptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserBankruptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserBankruptResponse* Arena::CreateMaybeMessage< ::LobbyMsg::UserBankruptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserBankruptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserCommNotifyRequest* Arena::CreateMaybeMessage< ::LobbyMsg::UserCommNotifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserCommNotifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserCommNotifyResponse* Arena::CreateMaybeMessage< ::LobbyMsg::UserCommNotifyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserCommNotifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerLoginElsewhereRequest* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerLoginElsewhereRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerLoginElsewhereRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerLoginElsewhereResponse* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerLoginElsewhereResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerLoginElsewhereResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerUpgradeRequest* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerUpgradeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerUpgradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::PlayerUpgradeResponse* Arena::CreateMaybeMessage< ::LobbyMsg::PlayerUpgradeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::PlayerUpgradeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserTokenLoginDcenterRequest* Arena::CreateMaybeMessage< ::LobbyMsg::UserTokenLoginDcenterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserTokenLoginDcenterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LobbyMsg::UserTokenLoginDcenterResponse* Arena::CreateMaybeMessage< ::LobbyMsg::UserTokenLoginDcenterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::LobbyMsg::UserTokenLoginDcenterResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
