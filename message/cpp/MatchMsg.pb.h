// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchMsg.proto

#ifndef PROTOBUF_INCLUDED_MatchMsg_2eproto
#define PROTOBUF_INCLUDED_MatchMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MatchMsg_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_MatchMsg_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_MatchMsg_2eproto();
namespace MatchMsg {
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class NotifyLoginRequest;
class NotifyLoginRequestDefaultTypeInternal;
extern NotifyLoginRequestDefaultTypeInternal _NotifyLoginRequest_default_instance_;
class NotifyLoginResponse;
class NotifyLoginResponseDefaultTypeInternal;
extern NotifyLoginResponseDefaultTypeInternal _NotifyLoginResponse_default_instance_;
class UserTokenLoginRequest;
class UserTokenLoginRequestDefaultTypeInternal;
extern UserTokenLoginRequestDefaultTypeInternal _UserTokenLoginRequest_default_instance_;
class UserTokenLoginResponse;
class UserTokenLoginResponseDefaultTypeInternal;
extern UserTokenLoginResponseDefaultTypeInternal _UserTokenLoginResponse_default_instance_;
}  // namespace MatchMsg
namespace google {
namespace protobuf {
template<> ::MatchMsg::LoginRequest* Arena::CreateMaybeMessage<::MatchMsg::LoginRequest>(Arena*);
template<> ::MatchMsg::LoginResponse* Arena::CreateMaybeMessage<::MatchMsg::LoginResponse>(Arena*);
template<> ::MatchMsg::NotifyLoginRequest* Arena::CreateMaybeMessage<::MatchMsg::NotifyLoginRequest>(Arena*);
template<> ::MatchMsg::NotifyLoginResponse* Arena::CreateMaybeMessage<::MatchMsg::NotifyLoginResponse>(Arena*);
template<> ::MatchMsg::UserTokenLoginRequest* Arena::CreateMaybeMessage<::MatchMsg::UserTokenLoginRequest>(Arena*);
template<> ::MatchMsg::UserTokenLoginResponse* Arena::CreateMaybeMessage<::MatchMsg::UserTokenLoginResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MatchMsg {

// ===================================================================

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(NULL);
  }

  LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes device_code = 2;
  void clear_device_code();
  static const int kDeviceCodeFieldNumber = 2;
  const ::std::string& device_code() const;
  void set_device_code(const ::std::string& value);
  #if LANG_CXX11
  void set_device_code(::std::string&& value);
  #endif
  void set_device_code(const char* value);
  void set_device_code(const void* value, size_t size);
  ::std::string* mutable_device_code();
  ::std::string* release_device_code();
  void set_allocated_device_code(::std::string* device_code);

  // bytes user_name = 3;
  void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // bytes resolution_ratio = 6;
  void clear_resolution_ratio();
  static const int kResolutionRatioFieldNumber = 6;
  const ::std::string& resolution_ratio() const;
  void set_resolution_ratio(const ::std::string& value);
  #if LANG_CXX11
  void set_resolution_ratio(::std::string&& value);
  #endif
  void set_resolution_ratio(const char* value);
  void set_resolution_ratio(const void* value, size_t size);
  ::std::string* mutable_resolution_ratio();
  ::std::string* release_resolution_ratio();
  void set_allocated_resolution_ratio(::std::string* resolution_ratio);

  // bytes version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes os_version = 10;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 10;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const void* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // bytes channel = 11;
  void clear_channel();
  static const int kChannelFieldNumber = 11;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const void* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // bytes device_name = 12;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 12;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const void* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // bytes header_url = 14;
  void clear_header_url();
  static const int kHeaderUrlFieldNumber = 14;
  const ::std::string& header_url() const;
  void set_header_url(const ::std::string& value);
  #if LANG_CXX11
  void set_header_url(::std::string&& value);
  #endif
  void set_header_url(const char* value);
  void set_header_url(const void* value, size_t size);
  ::std::string* mutable_header_url();
  ::std::string* release_header_url();
  void set_allocated_header_url(::std::string* header_url);

  // int32 screen_h = 4;
  void clear_screen_h();
  static const int kScreenHFieldNumber = 4;
  ::google::protobuf::int32 screen_h() const;
  void set_screen_h(::google::protobuf::int32 value);

  // int32 screen_w = 5;
  void clear_screen_w();
  static const int kScreenWFieldNumber = 5;
  ::google::protobuf::int32 screen_w() const;
  void set_screen_w(::google::protobuf::int32 value);

  // int32 app_type = 8;
  void clear_app_type();
  static const int kAppTypeFieldNumber = 8;
  ::google::protobuf::int32 app_type() const;
  void set_app_type(::google::protobuf::int32 value);

  // int32 network_mode = 9;
  void clear_network_mode();
  static const int kNetworkModeFieldNumber = 9;
  ::google::protobuf::int32 network_mode() const;
  void set_network_mode(::google::protobuf::int32 value);

  // int32 user_type = 13;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 13;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchMsg.LoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr device_code_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr resolution_ratio_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr header_url_;
  ::google::protobuf::int32 screen_h_;
  ::google::protobuf::int32 screen_w_;
  ::google::protobuf::int32 app_type_;
  ::google::protobuf::int32 network_mode_;
  ::google::protobuf::int32 user_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(NULL);
  }

  LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bytes cur_version = 3;
  void clear_cur_version();
  static const int kCurVersionFieldNumber = 3;
  const ::std::string& cur_version() const;
  void set_cur_version(const ::std::string& value);
  #if LANG_CXX11
  void set_cur_version(::std::string&& value);
  #endif
  void set_cur_version(const char* value);
  void set_cur_version(const void* value, size_t size);
  ::std::string* mutable_cur_version();
  ::std::string* release_cur_version();
  void set_allocated_cur_version(::std::string* cur_version);

  // bytes update_desc = 5;
  void clear_update_desc();
  static const int kUpdateDescFieldNumber = 5;
  const ::std::string& update_desc() const;
  void set_update_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_update_desc(::std::string&& value);
  #endif
  void set_update_desc(const char* value);
  void set_update_desc(const void* value, size_t size);
  ::std::string* mutable_update_desc();
  ::std::string* release_update_desc();
  void set_allocated_update_desc(::std::string* update_desc);

  // bytes account = 6;
  void clear_account();
  static const int kAccountFieldNumber = 6;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes lobby_ip = 7;
  void clear_lobby_ip();
  static const int kLobbyIpFieldNumber = 7;
  const ::std::string& lobby_ip() const;
  void set_lobby_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_lobby_ip(::std::string&& value);
  #endif
  void set_lobby_ip(const char* value);
  void set_lobby_ip(const void* value, size_t size);
  ::std::string* mutable_lobby_ip();
  ::std::string* release_lobby_ip();
  void set_allocated_lobby_ip(::std::string* lobby_ip);

  // int32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 update_type = 4;
  void clear_update_type();
  static const int kUpdateTypeFieldNumber = 4;
  ::google::protobuf::int32 update_type() const;
  void set_update_type(::google::protobuf::int32 value);

  // int32 lobby_port = 8;
  void clear_lobby_port();
  static const int kLobbyPortFieldNumber = 8;
  ::google::protobuf::int32 lobby_port() const;
  void set_lobby_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchMsg.LoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr cur_version_;
  ::google::protobuf::internal::ArenaStringPtr update_desc_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr lobby_ip_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 update_type_;
  ::google::protobuf::int32 lobby_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// -------------------------------------------------------------------

class UserTokenLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.UserTokenLoginRequest) */ {
 public:
  UserTokenLoginRequest();
  virtual ~UserTokenLoginRequest();

  UserTokenLoginRequest(const UserTokenLoginRequest& from);

  inline UserTokenLoginRequest& operator=(const UserTokenLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTokenLoginRequest(UserTokenLoginRequest&& from) noexcept
    : UserTokenLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserTokenLoginRequest& operator=(UserTokenLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserTokenLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTokenLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserTokenLoginRequest*>(
               &_UserTokenLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserTokenLoginRequest* other);
  friend void swap(UserTokenLoginRequest& a, UserTokenLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTokenLoginRequest* New() const final {
    return CreateMaybeMessage<UserTokenLoginRequest>(NULL);
  }

  UserTokenLoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTokenLoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTokenLoginRequest& from);
  void MergeFrom(const UserTokenLoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTokenLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes userToken = 1;
  void clear_usertoken();
  static const int kUserTokenFieldNumber = 1;
  const ::std::string& usertoken() const;
  void set_usertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_usertoken(::std::string&& value);
  #endif
  void set_usertoken(const char* value);
  void set_usertoken(const void* value, size_t size);
  ::std::string* mutable_usertoken();
  ::std::string* release_usertoken();
  void set_allocated_usertoken(::std::string* usertoken);

  // @@protoc_insertion_point(class_scope:MatchMsg.UserTokenLoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usertoken_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// -------------------------------------------------------------------

class UserTokenLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.UserTokenLoginResponse) */ {
 public:
  UserTokenLoginResponse();
  virtual ~UserTokenLoginResponse();

  UserTokenLoginResponse(const UserTokenLoginResponse& from);

  inline UserTokenLoginResponse& operator=(const UserTokenLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserTokenLoginResponse(UserTokenLoginResponse&& from) noexcept
    : UserTokenLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserTokenLoginResponse& operator=(UserTokenLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserTokenLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTokenLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserTokenLoginResponse*>(
               &_UserTokenLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserTokenLoginResponse* other);
  friend void swap(UserTokenLoginResponse& a, UserTokenLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserTokenLoginResponse* New() const final {
    return CreateMaybeMessage<UserTokenLoginResponse>(NULL);
  }

  UserTokenLoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserTokenLoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserTokenLoginResponse& from);
  void MergeFrom(const UserTokenLoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTokenLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MatchMsg.UserTokenLoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.NotifyLoginRequest) */ {
 public:
  NotifyLoginRequest();
  virtual ~NotifyLoginRequest();

  NotifyLoginRequest(const NotifyLoginRequest& from);

  inline NotifyLoginRequest& operator=(const NotifyLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyLoginRequest(NotifyLoginRequest&& from) noexcept
    : NotifyLoginRequest() {
    *this = ::std::move(from);
  }

  inline NotifyLoginRequest& operator=(NotifyLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyLoginRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyLoginRequest*>(
               &_NotifyLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NotifyLoginRequest* other);
  friend void swap(NotifyLoginRequest& a, NotifyLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyLoginRequest* New() const final {
    return CreateMaybeMessage<NotifyLoginRequest>(NULL);
  }

  NotifyLoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyLoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyLoginRequest& from);
  void MergeFrom(const NotifyLoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes device_code = 3;
  void clear_device_code();
  static const int kDeviceCodeFieldNumber = 3;
  const ::std::string& device_code() const;
  void set_device_code(const ::std::string& value);
  #if LANG_CXX11
  void set_device_code(::std::string&& value);
  #endif
  void set_device_code(const char* value);
  void set_device_code(const void* value, size_t size);
  ::std::string* mutable_device_code();
  ::std::string* release_device_code();
  void set_allocated_device_code(::std::string* device_code);

  // bytes user_name = 4;
  void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // bytes resolution_ratio = 7;
  void clear_resolution_ratio();
  static const int kResolutionRatioFieldNumber = 7;
  const ::std::string& resolution_ratio() const;
  void set_resolution_ratio(const ::std::string& value);
  #if LANG_CXX11
  void set_resolution_ratio(::std::string&& value);
  #endif
  void set_resolution_ratio(const char* value);
  void set_resolution_ratio(const void* value, size_t size);
  ::std::string* mutable_resolution_ratio();
  ::std::string* release_resolution_ratio();
  void set_allocated_resolution_ratio(::std::string* resolution_ratio);

  // bytes version = 8;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes os_version = 11;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 11;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const void* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // bytes channel = 12;
  void clear_channel();
  static const int kChannelFieldNumber = 12;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const void* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // int32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // int32 screen_h = 5;
  void clear_screen_h();
  static const int kScreenHFieldNumber = 5;
  ::google::protobuf::int32 screen_h() const;
  void set_screen_h(::google::protobuf::int32 value);

  // int32 screen_w = 6;
  void clear_screen_w();
  static const int kScreenWFieldNumber = 6;
  ::google::protobuf::int32 screen_w() const;
  void set_screen_w(::google::protobuf::int32 value);

  // int32 app_type = 9;
  void clear_app_type();
  static const int kAppTypeFieldNumber = 9;
  ::google::protobuf::int32 app_type() const;
  void set_app_type(::google::protobuf::int32 value);

  // int32 network_mode = 10;
  void clear_network_mode();
  static const int kNetworkModeFieldNumber = 10;
  ::google::protobuf::int32 network_mode() const;
  void set_network_mode(::google::protobuf::int32 value);

  // int32 user_type = 13;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 13;
  ::google::protobuf::int32 user_type() const;
  void set_user_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchMsg.NotifyLoginRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr device_code_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr resolution_ratio_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 screen_h_;
  ::google::protobuf::int32 screen_w_;
  ::google::protobuf::int32 app_type_;
  ::google::protobuf::int32 network_mode_;
  ::google::protobuf::int32 user_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// -------------------------------------------------------------------

class NotifyLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchMsg.NotifyLoginResponse) */ {
 public:
  NotifyLoginResponse();
  virtual ~NotifyLoginResponse();

  NotifyLoginResponse(const NotifyLoginResponse& from);

  inline NotifyLoginResponse& operator=(const NotifyLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyLoginResponse(NotifyLoginResponse&& from) noexcept
    : NotifyLoginResponse() {
    *this = ::std::move(from);
  }

  inline NotifyLoginResponse& operator=(NotifyLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotifyLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyLoginResponse* internal_default_instance() {
    return reinterpret_cast<const NotifyLoginResponse*>(
               &_NotifyLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NotifyLoginResponse* other);
  friend void swap(NotifyLoginResponse& a, NotifyLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyLoginResponse* New() const final {
    return CreateMaybeMessage<NotifyLoginResponse>(NULL);
  }

  NotifyLoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyLoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyLoginResponse& from);
  void MergeFrom(const NotifyLoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MatchMsg.NotifyLoginResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MatchMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// bytes account = 1;
inline void LoginRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.account)
  return account_.GetNoArena();
}
inline void LoginRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.account)
}
#if LANG_CXX11
inline void LoginRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.account)
}
#endif
inline void LoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.account)
}
inline void LoginRequest::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.account)
}
inline ::std::string* LoginRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.account)
}

// bytes device_code = 2;
inline void LoginRequest::clear_device_code() {
  device_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::device_code() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.device_code)
  return device_code_.GetNoArena();
}
inline void LoginRequest::set_device_code(const ::std::string& value) {
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.device_code)
}
#if LANG_CXX11
inline void LoginRequest::set_device_code(::std::string&& value) {
  
  device_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.device_code)
}
#endif
inline void LoginRequest::set_device_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.device_code)
}
inline void LoginRequest::set_device_code(const void* value, size_t size) {
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.device_code)
}
inline ::std::string* LoginRequest::mutable_device_code() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.device_code)
  return device_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_device_code() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.device_code)
  
  return device_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_device_code(::std::string* device_code) {
  if (device_code != NULL) {
    
  } else {
    
  }
  device_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_code);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.device_code)
}

// bytes user_name = 3;
inline void LoginRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.user_name)
  return user_name_.GetNoArena();
}
inline void LoginRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.user_name)
}
#if LANG_CXX11
inline void LoginRequest::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.user_name)
}
#endif
inline void LoginRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.user_name)
}
inline void LoginRequest::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.user_name)
}
inline ::std::string* LoginRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.user_name)
}

// int32 screen_h = 4;
inline void LoginRequest::clear_screen_h() {
  screen_h_ = 0;
}
inline ::google::protobuf::int32 LoginRequest::screen_h() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.screen_h)
  return screen_h_;
}
inline void LoginRequest::set_screen_h(::google::protobuf::int32 value) {
  
  screen_h_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.screen_h)
}

// int32 screen_w = 5;
inline void LoginRequest::clear_screen_w() {
  screen_w_ = 0;
}
inline ::google::protobuf::int32 LoginRequest::screen_w() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.screen_w)
  return screen_w_;
}
inline void LoginRequest::set_screen_w(::google::protobuf::int32 value) {
  
  screen_w_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.screen_w)
}

// bytes resolution_ratio = 6;
inline void LoginRequest::clear_resolution_ratio() {
  resolution_ratio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::resolution_ratio() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.resolution_ratio)
  return resolution_ratio_.GetNoArena();
}
inline void LoginRequest::set_resolution_ratio(const ::std::string& value) {
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.resolution_ratio)
}
#if LANG_CXX11
inline void LoginRequest::set_resolution_ratio(::std::string&& value) {
  
  resolution_ratio_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.resolution_ratio)
}
#endif
inline void LoginRequest::set_resolution_ratio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.resolution_ratio)
}
inline void LoginRequest::set_resolution_ratio(const void* value, size_t size) {
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.resolution_ratio)
}
inline ::std::string* LoginRequest::mutable_resolution_ratio() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.resolution_ratio)
  return resolution_ratio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_resolution_ratio() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.resolution_ratio)
  
  return resolution_ratio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_resolution_ratio(::std::string* resolution_ratio) {
  if (resolution_ratio != NULL) {
    
  } else {
    
  }
  resolution_ratio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resolution_ratio);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.resolution_ratio)
}

// bytes version = 7;
inline void LoginRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::version() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.version)
  return version_.GetNoArena();
}
inline void LoginRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.version)
}
#if LANG_CXX11
inline void LoginRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.version)
}
#endif
inline void LoginRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.version)
}
inline void LoginRequest::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.version)
}
inline ::std::string* LoginRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_version() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.version)
}

// int32 app_type = 8;
inline void LoginRequest::clear_app_type() {
  app_type_ = 0;
}
inline ::google::protobuf::int32 LoginRequest::app_type() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.app_type)
  return app_type_;
}
inline void LoginRequest::set_app_type(::google::protobuf::int32 value) {
  
  app_type_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.app_type)
}

// int32 network_mode = 9;
inline void LoginRequest::clear_network_mode() {
  network_mode_ = 0;
}
inline ::google::protobuf::int32 LoginRequest::network_mode() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.network_mode)
  return network_mode_;
}
inline void LoginRequest::set_network_mode(::google::protobuf::int32 value) {
  
  network_mode_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.network_mode)
}

// bytes os_version = 10;
inline void LoginRequest::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::os_version() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.os_version)
  return os_version_.GetNoArena();
}
inline void LoginRequest::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.os_version)
}
#if LANG_CXX11
inline void LoginRequest::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.os_version)
}
#endif
inline void LoginRequest::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.os_version)
}
inline void LoginRequest::set_os_version(const void* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.os_version)
}
inline ::std::string* LoginRequest::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_os_version() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.os_version)
}

// bytes channel = 11;
inline void LoginRequest::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::channel() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.channel)
  return channel_.GetNoArena();
}
inline void LoginRequest::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.channel)
}
#if LANG_CXX11
inline void LoginRequest::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.channel)
}
#endif
inline void LoginRequest::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.channel)
}
inline void LoginRequest::set_channel(const void* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.channel)
}
inline ::std::string* LoginRequest::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_channel() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.channel)
}

// bytes device_name = 12;
inline void LoginRequest::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::device_name() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.device_name)
  return device_name_.GetNoArena();
}
inline void LoginRequest::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.device_name)
}
#if LANG_CXX11
inline void LoginRequest::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.device_name)
}
#endif
inline void LoginRequest::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.device_name)
}
inline void LoginRequest::set_device_name(const void* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.device_name)
}
inline ::std::string* LoginRequest::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.device_name)
}

// int32 user_type = 13;
inline void LoginRequest::clear_user_type() {
  user_type_ = 0;
}
inline ::google::protobuf::int32 LoginRequest::user_type() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.user_type)
  return user_type_;
}
inline void LoginRequest::set_user_type(::google::protobuf::int32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.user_type)
}

// bytes header_url = 14;
inline void LoginRequest::clear_header_url() {
  header_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::header_url() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginRequest.header_url)
  return header_url_.GetNoArena();
}
inline void LoginRequest::set_header_url(const ::std::string& value) {
  
  header_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginRequest.header_url)
}
#if LANG_CXX11
inline void LoginRequest::set_header_url(::std::string&& value) {
  
  header_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginRequest.header_url)
}
#endif
inline void LoginRequest::set_header_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  header_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginRequest.header_url)
}
inline void LoginRequest::set_header_url(const void* value, size_t size) {
  
  header_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginRequest.header_url)
}
inline ::std::string* LoginRequest::mutable_header_url() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginRequest.header_url)
  return header_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_header_url() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginRequest.header_url)
  
  return header_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_header_url(::std::string* header_url) {
  if (header_url != NULL) {
    
  } else {
    
  }
  header_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_url);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginRequest.header_url)
}

// -------------------------------------------------------------------

// LoginResponse

// bytes token = 1;
inline void LoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.token)
  return token_.GetNoArena();
}
inline void LoginResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.token)
}
#if LANG_CXX11
inline void LoginResponse::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginResponse.token)
}
#endif
inline void LoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginResponse.token)
}
inline void LoginResponse::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginResponse.token)
}
inline ::std::string* LoginResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginResponse.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginResponse.token)
}

// int32 user_id = 2;
inline void LoginResponse::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::user_id() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.user_id)
  return user_id_;
}
inline void LoginResponse::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.user_id)
}

// bytes cur_version = 3;
inline void LoginResponse::clear_cur_version() {
  cur_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::cur_version() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.cur_version)
  return cur_version_.GetNoArena();
}
inline void LoginResponse::set_cur_version(const ::std::string& value) {
  
  cur_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.cur_version)
}
#if LANG_CXX11
inline void LoginResponse::set_cur_version(::std::string&& value) {
  
  cur_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginResponse.cur_version)
}
#endif
inline void LoginResponse::set_cur_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cur_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginResponse.cur_version)
}
inline void LoginResponse::set_cur_version(const void* value, size_t size) {
  
  cur_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginResponse.cur_version)
}
inline ::std::string* LoginResponse::mutable_cur_version() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginResponse.cur_version)
  return cur_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_cur_version() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginResponse.cur_version)
  
  return cur_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_cur_version(::std::string* cur_version) {
  if (cur_version != NULL) {
    
  } else {
    
  }
  cur_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_version);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginResponse.cur_version)
}

// int32 update_type = 4;
inline void LoginResponse::clear_update_type() {
  update_type_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::update_type() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.update_type)
  return update_type_;
}
inline void LoginResponse::set_update_type(::google::protobuf::int32 value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.update_type)
}

// bytes update_desc = 5;
inline void LoginResponse::clear_update_desc() {
  update_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::update_desc() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.update_desc)
  return update_desc_.GetNoArena();
}
inline void LoginResponse::set_update_desc(const ::std::string& value) {
  
  update_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.update_desc)
}
#if LANG_CXX11
inline void LoginResponse::set_update_desc(::std::string&& value) {
  
  update_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginResponse.update_desc)
}
#endif
inline void LoginResponse::set_update_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  update_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginResponse.update_desc)
}
inline void LoginResponse::set_update_desc(const void* value, size_t size) {
  
  update_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginResponse.update_desc)
}
inline ::std::string* LoginResponse::mutable_update_desc() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginResponse.update_desc)
  return update_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_update_desc() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginResponse.update_desc)
  
  return update_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_update_desc(::std::string* update_desc) {
  if (update_desc != NULL) {
    
  } else {
    
  }
  update_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_desc);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginResponse.update_desc)
}

// bytes account = 6;
inline void LoginResponse::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::account() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.account)
  return account_.GetNoArena();
}
inline void LoginResponse::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.account)
}
#if LANG_CXX11
inline void LoginResponse::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginResponse.account)
}
#endif
inline void LoginResponse::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginResponse.account)
}
inline void LoginResponse::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginResponse.account)
}
inline ::std::string* LoginResponse::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginResponse.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_account() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginResponse.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginResponse.account)
}

// bytes lobby_ip = 7;
inline void LoginResponse::clear_lobby_ip() {
  lobby_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::lobby_ip() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.lobby_ip)
  return lobby_ip_.GetNoArena();
}
inline void LoginResponse::set_lobby_ip(const ::std::string& value) {
  
  lobby_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.lobby_ip)
}
#if LANG_CXX11
inline void LoginResponse::set_lobby_ip(::std::string&& value) {
  
  lobby_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.LoginResponse.lobby_ip)
}
#endif
inline void LoginResponse::set_lobby_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lobby_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.LoginResponse.lobby_ip)
}
inline void LoginResponse::set_lobby_ip(const void* value, size_t size) {
  
  lobby_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.LoginResponse.lobby_ip)
}
inline ::std::string* LoginResponse::mutable_lobby_ip() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.LoginResponse.lobby_ip)
  return lobby_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_lobby_ip() {
  // @@protoc_insertion_point(field_release:MatchMsg.LoginResponse.lobby_ip)
  
  return lobby_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_lobby_ip(::std::string* lobby_ip) {
  if (lobby_ip != NULL) {
    
  } else {
    
  }
  lobby_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lobby_ip);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.LoginResponse.lobby_ip)
}

// int32 lobby_port = 8;
inline void LoginResponse::clear_lobby_port() {
  lobby_port_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::lobby_port() const {
  // @@protoc_insertion_point(field_get:MatchMsg.LoginResponse.lobby_port)
  return lobby_port_;
}
inline void LoginResponse::set_lobby_port(::google::protobuf::int32 value) {
  
  lobby_port_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.LoginResponse.lobby_port)
}

// -------------------------------------------------------------------

// UserTokenLoginRequest

// bytes userToken = 1;
inline void UserTokenLoginRequest::clear_usertoken() {
  usertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenLoginRequest::usertoken() const {
  // @@protoc_insertion_point(field_get:MatchMsg.UserTokenLoginRequest.userToken)
  return usertoken_.GetNoArena();
}
inline void UserTokenLoginRequest::set_usertoken(const ::std::string& value) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.UserTokenLoginRequest.userToken)
}
#if LANG_CXX11
inline void UserTokenLoginRequest::set_usertoken(::std::string&& value) {
  
  usertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.UserTokenLoginRequest.userToken)
}
#endif
inline void UserTokenLoginRequest::set_usertoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.UserTokenLoginRequest.userToken)
}
inline void UserTokenLoginRequest::set_usertoken(const void* value, size_t size) {
  
  usertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.UserTokenLoginRequest.userToken)
}
inline ::std::string* UserTokenLoginRequest::mutable_usertoken() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.UserTokenLoginRequest.userToken)
  return usertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenLoginRequest::release_usertoken() {
  // @@protoc_insertion_point(field_release:MatchMsg.UserTokenLoginRequest.userToken)
  
  return usertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenLoginRequest::set_allocated_usertoken(::std::string* usertoken) {
  if (usertoken != NULL) {
    
  } else {
    
  }
  usertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertoken);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.UserTokenLoginRequest.userToken)
}

// -------------------------------------------------------------------

// UserTokenLoginResponse

// -------------------------------------------------------------------

// NotifyLoginRequest

// int32 user_id = 1;
inline void NotifyLoginRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.user_id)
  return user_id_;
}
inline void NotifyLoginRequest::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.user_id)
}

// bytes account = 2;
inline void NotifyLoginRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::account() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.account)
  return account_.GetNoArena();
}
inline void NotifyLoginRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.account)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.account)
}
#endif
inline void NotifyLoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.account)
}
inline void NotifyLoginRequest::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.account)
}
inline ::std::string* NotifyLoginRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.account)
}

// bytes device_code = 3;
inline void NotifyLoginRequest::clear_device_code() {
  device_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::device_code() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.device_code)
  return device_code_.GetNoArena();
}
inline void NotifyLoginRequest::set_device_code(const ::std::string& value) {
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.device_code)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_device_code(::std::string&& value) {
  
  device_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.device_code)
}
#endif
inline void NotifyLoginRequest::set_device_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.device_code)
}
inline void NotifyLoginRequest::set_device_code(const void* value, size_t size) {
  
  device_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.device_code)
}
inline ::std::string* NotifyLoginRequest::mutable_device_code() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.device_code)
  return device_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_device_code() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.device_code)
  
  return device_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_device_code(::std::string* device_code) {
  if (device_code != NULL) {
    
  } else {
    
  }
  device_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_code);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.device_code)
}

// bytes user_name = 4;
inline void NotifyLoginRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.user_name)
  return user_name_.GetNoArena();
}
inline void NotifyLoginRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.user_name)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.user_name)
}
#endif
inline void NotifyLoginRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.user_name)
}
inline void NotifyLoginRequest::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.user_name)
}
inline ::std::string* NotifyLoginRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.user_name)
}

// int32 screen_h = 5;
inline void NotifyLoginRequest::clear_screen_h() {
  screen_h_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::screen_h() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.screen_h)
  return screen_h_;
}
inline void NotifyLoginRequest::set_screen_h(::google::protobuf::int32 value) {
  
  screen_h_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.screen_h)
}

// int32 screen_w = 6;
inline void NotifyLoginRequest::clear_screen_w() {
  screen_w_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::screen_w() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.screen_w)
  return screen_w_;
}
inline void NotifyLoginRequest::set_screen_w(::google::protobuf::int32 value) {
  
  screen_w_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.screen_w)
}

// bytes resolution_ratio = 7;
inline void NotifyLoginRequest::clear_resolution_ratio() {
  resolution_ratio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::resolution_ratio() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.resolution_ratio)
  return resolution_ratio_.GetNoArena();
}
inline void NotifyLoginRequest::set_resolution_ratio(const ::std::string& value) {
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.resolution_ratio)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_resolution_ratio(::std::string&& value) {
  
  resolution_ratio_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.resolution_ratio)
}
#endif
inline void NotifyLoginRequest::set_resolution_ratio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.resolution_ratio)
}
inline void NotifyLoginRequest::set_resolution_ratio(const void* value, size_t size) {
  
  resolution_ratio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.resolution_ratio)
}
inline ::std::string* NotifyLoginRequest::mutable_resolution_ratio() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.resolution_ratio)
  return resolution_ratio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_resolution_ratio() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.resolution_ratio)
  
  return resolution_ratio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_resolution_ratio(::std::string* resolution_ratio) {
  if (resolution_ratio != NULL) {
    
  } else {
    
  }
  resolution_ratio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resolution_ratio);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.resolution_ratio)
}

// bytes version = 8;
inline void NotifyLoginRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::version() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.version)
  return version_.GetNoArena();
}
inline void NotifyLoginRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.version)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.version)
}
#endif
inline void NotifyLoginRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.version)
}
inline void NotifyLoginRequest::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.version)
}
inline ::std::string* NotifyLoginRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_version() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.version)
}

// int32 app_type = 9;
inline void NotifyLoginRequest::clear_app_type() {
  app_type_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::app_type() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.app_type)
  return app_type_;
}
inline void NotifyLoginRequest::set_app_type(::google::protobuf::int32 value) {
  
  app_type_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.app_type)
}

// int32 network_mode = 10;
inline void NotifyLoginRequest::clear_network_mode() {
  network_mode_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::network_mode() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.network_mode)
  return network_mode_;
}
inline void NotifyLoginRequest::set_network_mode(::google::protobuf::int32 value) {
  
  network_mode_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.network_mode)
}

// bytes os_version = 11;
inline void NotifyLoginRequest::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::os_version() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.os_version)
  return os_version_.GetNoArena();
}
inline void NotifyLoginRequest::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.os_version)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.os_version)
}
#endif
inline void NotifyLoginRequest::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.os_version)
}
inline void NotifyLoginRequest::set_os_version(const void* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.os_version)
}
inline ::std::string* NotifyLoginRequest::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_os_version() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.os_version)
}

// bytes channel = 12;
inline void NotifyLoginRequest::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyLoginRequest::channel() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.channel)
  return channel_.GetNoArena();
}
inline void NotifyLoginRequest::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.channel)
}
#if LANG_CXX11
inline void NotifyLoginRequest::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchMsg.NotifyLoginRequest.channel)
}
#endif
inline void NotifyLoginRequest::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchMsg.NotifyLoginRequest.channel)
}
inline void NotifyLoginRequest::set_channel(const void* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchMsg.NotifyLoginRequest.channel)
}
inline ::std::string* NotifyLoginRequest::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:MatchMsg.NotifyLoginRequest.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyLoginRequest::release_channel() {
  // @@protoc_insertion_point(field_release:MatchMsg.NotifyLoginRequest.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyLoginRequest::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:MatchMsg.NotifyLoginRequest.channel)
}

// int32 user_type = 13;
inline void NotifyLoginRequest::clear_user_type() {
  user_type_ = 0;
}
inline ::google::protobuf::int32 NotifyLoginRequest::user_type() const {
  // @@protoc_insertion_point(field_get:MatchMsg.NotifyLoginRequest.user_type)
  return user_type_;
}
inline void NotifyLoginRequest::set_user_type(::google::protobuf::int32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:MatchMsg.NotifyLoginRequest.user_type)
}

// -------------------------------------------------------------------

// NotifyLoginResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MatchMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_MatchMsg_2eproto
