// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvrMsg.proto

#include "SvrMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_SvrMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DBRow_SvrMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvrMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerGameResult_SvrMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvrMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserGameAccount_SvrMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvrMsg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserGameStatus_SvrMsg_2eproto;
namespace SvrMsg {
class GetGameSvrInstanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetGameSvrInstanceRequest> _instance;
} _GetGameSvrInstanceRequest_default_instance_;
class GetGameSvrInstanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetGameSvrInstanceResponse> _instance;
} _GetGameSvrInstanceResponse_default_instance_;
class CommQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommQueryRequest> _instance;
} _CommQueryRequest_default_instance_;
class DBRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DBRow> _instance;
} _DBRow_default_instance_;
class CommQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommQueryResponse> _instance;
} _CommQueryResponse_default_instance_;
class PlayerGameResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerGameResult> _instance;
} _PlayerGameResult_default_instance_;
class SubmitGameResultRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitGameResultRequest> _instance;
} _SubmitGameResultRequest_default_instance_;
class SubmitGameResultResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitGameResultResponse> _instance;
} _SubmitGameResultResponse_default_instance_;
class AddPlayerChipsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPlayerChipsRequest> _instance;
} _AddPlayerChipsRequest_default_instance_;
class AddPlayerChipsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPlayerChipsResponse> _instance;
} _AddPlayerChipsResponse_default_instance_;
class UserJoinGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserJoinGameRequest> _instance;
} _UserJoinGameRequest_default_instance_;
class UserJoinGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserJoinGameResponse> _instance;
} _UserJoinGameResponse_default_instance_;
class UserLeaveGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLeaveGameRequest> _instance;
} _UserLeaveGameRequest_default_instance_;
class UserLeaveGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLeaveGameResponse> _instance;
} _UserLeaveGameResponse_default_instance_;
class UserEnterRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserEnterRoomRequest> _instance;
} _UserEnterRoomRequest_default_instance_;
class UserEnterRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserEnterRoomResponse> _instance;
} _UserEnterRoomResponse_default_instance_;
class UserQuitRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserQuitRoomRequest> _instance;
} _UserQuitRoomRequest_default_instance_;
class UserQuitRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserQuitRoomResponse> _instance;
} _UserQuitRoomResponse_default_instance_;
class GameSvrStartRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSvrStartRequest> _instance;
} _GameSvrStartRequest_default_instance_;
class GameSvrStartResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSvrStartResponse> _instance;
} _GameSvrStartResponse_default_instance_;
class OpenGameRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenGameRoomRequest> _instance;
} _OpenGameRoomRequest_default_instance_;
class OpenGameRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenGameRoomResponse> _instance;
} _OpenGameRoomResponse_default_instance_;
class GameRoomEmptyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameRoomEmptyRequest> _instance;
} _GameRoomEmptyRequest_default_instance_;
class GameRoomEmptyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameRoomEmptyResponse> _instance;
} _GameRoomEmptyResponse_default_instance_;
class GameSvrAliveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSvrAliveRequest> _instance;
} _GameSvrAliveRequest_default_instance_;
class GameSvrAliveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSvrAliveResponse> _instance;
} _GameSvrAliveResponse_default_instance_;
class HallStartUpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HallStartUpRequest> _instance;
} _HallStartUpRequest_default_instance_;
class HallStartUpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HallStartUpResponse> _instance;
} _HallStartUpResponse_default_instance_;
class FlushUserOnlineRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserOnlineRequest> _instance;
} _FlushUserOnlineRequest_default_instance_;
class FlushUserOnlineResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserOnlineResponse> _instance;
} _FlushUserOnlineResponse_default_instance_;
class FlushUserGameSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserGameSessionRequest> _instance;
} _FlushUserGameSessionRequest_default_instance_;
class FlushUserGameSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserGameSessionResponse> _instance;
} _FlushUserGameSessionResponse_default_instance_;
class UserGameStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameStatus> _instance;
} _UserGameStatus_default_instance_;
class FlushUserInGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserInGameRequest> _instance;
} _FlushUserInGameRequest_default_instance_;
class FlushUserInGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlushUserInGameResponse> _instance;
} _FlushUserInGameResponse_default_instance_;
class TellUserOfflineRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TellUserOfflineRequest> _instance;
} _TellUserOfflineRequest_default_instance_;
class TellUserOfflineResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TellUserOfflineResponse> _instance;
} _TellUserOfflineResponse_default_instance_;
class TellUserLogoutGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TellUserLogoutGameRequest> _instance;
} _TellUserLogoutGameRequest_default_instance_;
class TellUserLogoutGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TellUserLogoutGameResponse> _instance;
} _TellUserLogoutGameResponse_default_instance_;
class DispatchUserMsgRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispatchUserMsgRequest> _instance;
} _DispatchUserMsgRequest_default_instance_;
class DispatchUserMsgResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispatchUserMsgResponse> _instance;
} _DispatchUserMsgResponse_default_instance_;
class HallLoginRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HallLoginRecordRequest> _instance;
} _HallLoginRecordRequest_default_instance_;
class HallLoginRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HallLoginRecordResponse> _instance;
} _HallLoginRecordResponse_default_instance_;
class GameLoginRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLoginRecordRequest> _instance;
} _GameLoginRecordRequest_default_instance_;
class GameLoginRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLoginRecordResponse> _instance;
} _GameLoginRecordResponse_default_instance_;
class CheckUserTokenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserTokenRequest> _instance;
} _CheckUserTokenRequest_default_instance_;
class CheckUserTokenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserTokenResponse> _instance;
} _CheckUserTokenResponse_default_instance_;
class CheckUserLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserLoginRequest> _instance;
} _CheckUserLoginRequest_default_instance_;
class CheckUserLoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckUserLoginResponse> _instance;
} _CheckUserLoginResponse_default_instance_;
class KickOutUserRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickOutUserRequest> _instance;
} _KickOutUserRequest_default_instance_;
class KickOutUserResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickOutUserResponse> _instance;
} _KickOutUserResponse_default_instance_;
class ForbiddenUserRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ForbiddenUserRequest> _instance;
} _ForbiddenUserRequest_default_instance_;
class ForbiddenUserResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ForbiddenUserResponse> _instance;
} _ForbiddenUserResponse_default_instance_;
class GetInGameCountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInGameCountRequest> _instance;
} _GetInGameCountRequest_default_instance_;
class GetInGameCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInGameCountResponse> _instance;
} _GetInGameCountResponse_default_instance_;
class GameBuyChipsInRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBuyChipsInRequest> _instance;
} _GameBuyChipsInRequest_default_instance_;
class GameBuyChipsInResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameBuyChipsInResponse> _instance;
} _GameBuyChipsInResponse_default_instance_;
class GameStartBetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStartBetRequest> _instance;
} _GameStartBetRequest_default_instance_;
class GameStartBetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStartBetResponse> _instance;
} _GameStartBetResponse_default_instance_;
class GameAddCarryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAddCarryRequest> _instance;
} _GameAddCarryRequest_default_instance_;
class GameAddCarryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAddCarryResponse> _instance;
} _GameAddCarryResponse_default_instance_;
class MatchOverAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchOverAccountRequest> _instance;
} _MatchOverAccountRequest_default_instance_;
class MatchOverAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchOverAccountResponse> _instance;
} _MatchOverAccountResponse_default_instance_;
class UserGameAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameAccount> _instance;
} _UserGameAccount_default_instance_;
class GameOverAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameOverAccountRequest> _instance;
} _GameOverAccountRequest_default_instance_;
class GameOverAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameOverAccountResponse> _instance;
} _GameOverAccountResponse_default_instance_;
class GameLeaveAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLeaveAccountRequest> _instance;
} _GameLeaveAccountRequest_default_instance_;
class GameLeaveAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLeaveAccountResponse> _instance;
} _GameLeaveAccountResponse_default_instance_;
class UserBoxTimeRecoverRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBoxTimeRecoverRequest> _instance;
} _UserBoxTimeRecoverRequest_default_instance_;
class UserBoxTimeRecoverResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBoxTimeRecoverResponse> _instance;
} _UserBoxTimeRecoverResponse_default_instance_;
class UserBoxTimePauseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBoxTimePauseRequest> _instance;
} _UserBoxTimePauseRequest_default_instance_;
class UserBoxTimePauseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserBoxTimePauseResponse> _instance;
} _UserBoxTimePauseResponse_default_instance_;
class NotifyTokenLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyTokenLoginRequest> _instance;
} _NotifyTokenLoginRequest_default_instance_;
class NotifyTokenLoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyTokenLoginResponse> _instance;
} _NotifyTokenLoginResponse_default_instance_;
class NotifyOpenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyOpenRequest> _instance;
} _NotifyOpenRequest_default_instance_;
class NotifyOpenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyOpenResponse> _instance;
} _NotifyOpenResponse_default_instance_;
class UserLogRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLogRecordRequest> _instance;
} _UserLogRecordRequest_default_instance_;
class UserLogRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLogRecordResponse> _instance;
} _UserLogRecordResponse_default_instance_;
class GameLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLogRequest> _instance;
} _GameLogRequest_default_instance_;
class GameLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLogResponse> _instance;
} _GameLogResponse_default_instance_;
class AppLogRecordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppLogRecordRequest> _instance;
} _AppLogRecordRequest_default_instance_;
class AppLogRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppLogRecordResponse> _instance;
} _AppLogRecordResponse_default_instance_;
class UserChipsLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChipsLogRequest> _instance;
} _UserChipsLogRequest_default_instance_;
class UserChipsLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserChipsLogResponse> _instance;
} _UserChipsLogResponse_default_instance_;
class BankruptLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BankruptLogRequest> _instance;
} _BankruptLogRequest_default_instance_;
class BankruptLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BankruptLogResponse> _instance;
} _BankruptLogResponse_default_instance_;
class QueryRoomMatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryRoomMatchRequest> _instance;
} _QueryRoomMatchRequest_default_instance_;
class QueryRoomMatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryRoomMatchResponse> _instance;
} _QueryRoomMatchResponse_default_instance_;
class RoomMatchStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomMatchStatusRequest> _instance;
} _RoomMatchStatusRequest_default_instance_;
class RoomMatchStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomMatchStatusResponse> _instance;
} _RoomMatchStatusResponse_default_instance_;
}  // namespace SvrMsg
static void InitDefaultsGetGameSvrInstanceRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GetGameSvrInstanceRequest_default_instance_;
    new (ptr) ::SvrMsg::GetGameSvrInstanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GetGameSvrInstanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetGameSvrInstanceRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetGameSvrInstanceRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGetGameSvrInstanceResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GetGameSvrInstanceResponse_default_instance_;
    new (ptr) ::SvrMsg::GetGameSvrInstanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GetGameSvrInstanceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetGameSvrInstanceResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetGameSvrInstanceResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsCommQueryRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CommQueryRequest_default_instance_;
    new (ptr) ::SvrMsg::CommQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CommQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommQueryRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommQueryRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsDBRow_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_DBRow_default_instance_;
    new (ptr) ::SvrMsg::DBRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::DBRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DBRow_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDBRow_SvrMsg_2eproto}, {}};

static void InitDefaultsCommQueryResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CommQueryResponse_default_instance_;
    new (ptr) ::SvrMsg::CommQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CommQueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommQueryResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommQueryResponse_SvrMsg_2eproto}, {
      &scc_info_DBRow_SvrMsg_2eproto.base,}};

static void InitDefaultsPlayerGameResult_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_PlayerGameResult_default_instance_;
    new (ptr) ::SvrMsg::PlayerGameResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::PlayerGameResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerGameResult_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerGameResult_SvrMsg_2eproto}, {}};

static void InitDefaultsSubmitGameResultRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_SubmitGameResultRequest_default_instance_;
    new (ptr) ::SvrMsg::SubmitGameResultRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::SubmitGameResultRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubmitGameResultRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubmitGameResultRequest_SvrMsg_2eproto}, {
      &scc_info_PlayerGameResult_SvrMsg_2eproto.base,}};

static void InitDefaultsSubmitGameResultResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_SubmitGameResultResponse_default_instance_;
    new (ptr) ::SvrMsg::SubmitGameResultResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::SubmitGameResultResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitGameResultResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitGameResultResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsAddPlayerChipsRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_AddPlayerChipsRequest_default_instance_;
    new (ptr) ::SvrMsg::AddPlayerChipsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::AddPlayerChipsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddPlayerChipsRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddPlayerChipsRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsAddPlayerChipsResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_AddPlayerChipsResponse_default_instance_;
    new (ptr) ::SvrMsg::AddPlayerChipsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::AddPlayerChipsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddPlayerChipsResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddPlayerChipsResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserJoinGameRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserJoinGameRequest_default_instance_;
    new (ptr) ::SvrMsg::UserJoinGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserJoinGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserJoinGameRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserJoinGameRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserJoinGameResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserJoinGameResponse_default_instance_;
    new (ptr) ::SvrMsg::UserJoinGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserJoinGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserJoinGameResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserJoinGameResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserLeaveGameRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserLeaveGameRequest_default_instance_;
    new (ptr) ::SvrMsg::UserLeaveGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserLeaveGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLeaveGameRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLeaveGameRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserLeaveGameResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserLeaveGameResponse_default_instance_;
    new (ptr) ::SvrMsg::UserLeaveGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserLeaveGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLeaveGameResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLeaveGameResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserEnterRoomRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserEnterRoomRequest_default_instance_;
    new (ptr) ::SvrMsg::UserEnterRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserEnterRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserEnterRoomRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserEnterRoomRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserEnterRoomResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserEnterRoomResponse_default_instance_;
    new (ptr) ::SvrMsg::UserEnterRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserEnterRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserEnterRoomResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserEnterRoomResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserQuitRoomRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserQuitRoomRequest_default_instance_;
    new (ptr) ::SvrMsg::UserQuitRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserQuitRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserQuitRoomRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserQuitRoomRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserQuitRoomResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserQuitRoomResponse_default_instance_;
    new (ptr) ::SvrMsg::UserQuitRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserQuitRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserQuitRoomResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserQuitRoomResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameSvrStartRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameSvrStartRequest_default_instance_;
    new (ptr) ::SvrMsg::GameSvrStartRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameSvrStartRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSvrStartRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSvrStartRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameSvrStartResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameSvrStartResponse_default_instance_;
    new (ptr) ::SvrMsg::GameSvrStartResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameSvrStartResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSvrStartResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSvrStartResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsOpenGameRoomRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_OpenGameRoomRequest_default_instance_;
    new (ptr) ::SvrMsg::OpenGameRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::OpenGameRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenGameRoomRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenGameRoomRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsOpenGameRoomResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_OpenGameRoomResponse_default_instance_;
    new (ptr) ::SvrMsg::OpenGameRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::OpenGameRoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenGameRoomResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenGameRoomResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameRoomEmptyRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameRoomEmptyRequest_default_instance_;
    new (ptr) ::SvrMsg::GameRoomEmptyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameRoomEmptyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameRoomEmptyRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameRoomEmptyRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameRoomEmptyResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameRoomEmptyResponse_default_instance_;
    new (ptr) ::SvrMsg::GameRoomEmptyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameRoomEmptyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameRoomEmptyResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameRoomEmptyResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameSvrAliveRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameSvrAliveRequest_default_instance_;
    new (ptr) ::SvrMsg::GameSvrAliveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameSvrAliveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSvrAliveRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSvrAliveRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameSvrAliveResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameSvrAliveResponse_default_instance_;
    new (ptr) ::SvrMsg::GameSvrAliveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameSvrAliveResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSvrAliveResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSvrAliveResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsHallStartUpRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_HallStartUpRequest_default_instance_;
    new (ptr) ::SvrMsg::HallStartUpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::HallStartUpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HallStartUpRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHallStartUpRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsHallStartUpResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_HallStartUpResponse_default_instance_;
    new (ptr) ::SvrMsg::HallStartUpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::HallStartUpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HallStartUpResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHallStartUpResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsFlushUserOnlineRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserOnlineRequest_default_instance_;
    new (ptr) ::SvrMsg::FlushUserOnlineRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserOnlineRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushUserOnlineRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushUserOnlineRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsFlushUserOnlineResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserOnlineResponse_default_instance_;
    new (ptr) ::SvrMsg::FlushUserOnlineResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserOnlineResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushUserOnlineResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushUserOnlineResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsFlushUserGameSessionRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserGameSessionRequest_default_instance_;
    new (ptr) ::SvrMsg::FlushUserGameSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserGameSessionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushUserGameSessionRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushUserGameSessionRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsFlushUserGameSessionResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserGameSessionResponse_default_instance_;
    new (ptr) ::SvrMsg::FlushUserGameSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserGameSessionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushUserGameSessionResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushUserGameSessionResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserGameStatus_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserGameStatus_default_instance_;
    new (ptr) ::SvrMsg::UserGameStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserGameStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserGameStatus_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserGameStatus_SvrMsg_2eproto}, {}};

static void InitDefaultsFlushUserInGameRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserInGameRequest_default_instance_;
    new (ptr) ::SvrMsg::FlushUserInGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserInGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FlushUserInGameRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFlushUserInGameRequest_SvrMsg_2eproto}, {
      &scc_info_UserGameStatus_SvrMsg_2eproto.base,}};

static void InitDefaultsFlushUserInGameResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_FlushUserInGameResponse_default_instance_;
    new (ptr) ::SvrMsg::FlushUserInGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::FlushUserInGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlushUserInGameResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlushUserInGameResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsTellUserOfflineRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_TellUserOfflineRequest_default_instance_;
    new (ptr) ::SvrMsg::TellUserOfflineRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::TellUserOfflineRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TellUserOfflineRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTellUserOfflineRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsTellUserOfflineResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_TellUserOfflineResponse_default_instance_;
    new (ptr) ::SvrMsg::TellUserOfflineResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::TellUserOfflineResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TellUserOfflineResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTellUserOfflineResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsTellUserLogoutGameRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_TellUserLogoutGameRequest_default_instance_;
    new (ptr) ::SvrMsg::TellUserLogoutGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::TellUserLogoutGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TellUserLogoutGameRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTellUserLogoutGameRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsTellUserLogoutGameResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_TellUserLogoutGameResponse_default_instance_;
    new (ptr) ::SvrMsg::TellUserLogoutGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::TellUserLogoutGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TellUserLogoutGameResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTellUserLogoutGameResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsDispatchUserMsgRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_DispatchUserMsgRequest_default_instance_;
    new (ptr) ::SvrMsg::DispatchUserMsgRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::DispatchUserMsgRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DispatchUserMsgRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDispatchUserMsgRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsDispatchUserMsgResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_DispatchUserMsgResponse_default_instance_;
    new (ptr) ::SvrMsg::DispatchUserMsgResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::DispatchUserMsgResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DispatchUserMsgResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDispatchUserMsgResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsHallLoginRecordRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_HallLoginRecordRequest_default_instance_;
    new (ptr) ::SvrMsg::HallLoginRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::HallLoginRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HallLoginRecordRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHallLoginRecordRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsHallLoginRecordResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_HallLoginRecordResponse_default_instance_;
    new (ptr) ::SvrMsg::HallLoginRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::HallLoginRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HallLoginRecordResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHallLoginRecordResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLoginRecordRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLoginRecordRequest_default_instance_;
    new (ptr) ::SvrMsg::GameLoginRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLoginRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLoginRecordRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLoginRecordRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLoginRecordResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLoginRecordResponse_default_instance_;
    new (ptr) ::SvrMsg::GameLoginRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLoginRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLoginRecordResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLoginRecordResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsCheckUserTokenRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CheckUserTokenRequest_default_instance_;
    new (ptr) ::SvrMsg::CheckUserTokenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CheckUserTokenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckUserTokenRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckUserTokenRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsCheckUserTokenResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CheckUserTokenResponse_default_instance_;
    new (ptr) ::SvrMsg::CheckUserTokenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CheckUserTokenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckUserTokenResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckUserTokenResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsCheckUserLoginRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CheckUserLoginRequest_default_instance_;
    new (ptr) ::SvrMsg::CheckUserLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CheckUserLoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckUserLoginRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckUserLoginRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsCheckUserLoginResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_CheckUserLoginResponse_default_instance_;
    new (ptr) ::SvrMsg::CheckUserLoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::CheckUserLoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckUserLoginResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckUserLoginResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsKickOutUserRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_KickOutUserRequest_default_instance_;
    new (ptr) ::SvrMsg::KickOutUserRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::KickOutUserRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickOutUserRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickOutUserRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsKickOutUserResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_KickOutUserResponse_default_instance_;
    new (ptr) ::SvrMsg::KickOutUserResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::KickOutUserResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickOutUserResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickOutUserResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsForbiddenUserRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_ForbiddenUserRequest_default_instance_;
    new (ptr) ::SvrMsg::ForbiddenUserRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::ForbiddenUserRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ForbiddenUserRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsForbiddenUserRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsForbiddenUserResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_ForbiddenUserResponse_default_instance_;
    new (ptr) ::SvrMsg::ForbiddenUserResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::ForbiddenUserResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ForbiddenUserResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsForbiddenUserResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGetInGameCountRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GetInGameCountRequest_default_instance_;
    new (ptr) ::SvrMsg::GetInGameCountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GetInGameCountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInGameCountRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInGameCountRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGetInGameCountResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GetInGameCountResponse_default_instance_;
    new (ptr) ::SvrMsg::GetInGameCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GetInGameCountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInGameCountResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInGameCountResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameBuyChipsInRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameBuyChipsInRequest_default_instance_;
    new (ptr) ::SvrMsg::GameBuyChipsInRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameBuyChipsInRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBuyChipsInRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBuyChipsInRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameBuyChipsInResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameBuyChipsInResponse_default_instance_;
    new (ptr) ::SvrMsg::GameBuyChipsInResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameBuyChipsInResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameBuyChipsInResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameBuyChipsInResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameStartBetRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameStartBetRequest_default_instance_;
    new (ptr) ::SvrMsg::GameStartBetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameStartBetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameStartBetRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameStartBetRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameStartBetResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameStartBetResponse_default_instance_;
    new (ptr) ::SvrMsg::GameStartBetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameStartBetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameStartBetResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameStartBetResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameAddCarryRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameAddCarryRequest_default_instance_;
    new (ptr) ::SvrMsg::GameAddCarryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameAddCarryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameAddCarryRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameAddCarryRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameAddCarryResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameAddCarryResponse_default_instance_;
    new (ptr) ::SvrMsg::GameAddCarryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameAddCarryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameAddCarryResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameAddCarryResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsMatchOverAccountRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_MatchOverAccountRequest_default_instance_;
    new (ptr) ::SvrMsg::MatchOverAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::MatchOverAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchOverAccountRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchOverAccountRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsMatchOverAccountResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_MatchOverAccountResponse_default_instance_;
    new (ptr) ::SvrMsg::MatchOverAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::MatchOverAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchOverAccountResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchOverAccountResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserGameAccount_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserGameAccount_default_instance_;
    new (ptr) ::SvrMsg::UserGameAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserGameAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserGameAccount_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserGameAccount_SvrMsg_2eproto}, {}};

static void InitDefaultsGameOverAccountRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameOverAccountRequest_default_instance_;
    new (ptr) ::SvrMsg::GameOverAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameOverAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameOverAccountRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameOverAccountRequest_SvrMsg_2eproto}, {
      &scc_info_UserGameAccount_SvrMsg_2eproto.base,}};

static void InitDefaultsGameOverAccountResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameOverAccountResponse_default_instance_;
    new (ptr) ::SvrMsg::GameOverAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameOverAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameOverAccountResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameOverAccountResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLeaveAccountRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLeaveAccountRequest_default_instance_;
    new (ptr) ::SvrMsg::GameLeaveAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLeaveAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLeaveAccountRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLeaveAccountRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLeaveAccountResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLeaveAccountResponse_default_instance_;
    new (ptr) ::SvrMsg::GameLeaveAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLeaveAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLeaveAccountResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLeaveAccountResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserBoxTimeRecoverRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserBoxTimeRecoverRequest_default_instance_;
    new (ptr) ::SvrMsg::UserBoxTimeRecoverRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserBoxTimeRecoverRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBoxTimeRecoverRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBoxTimeRecoverRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserBoxTimeRecoverResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserBoxTimeRecoverResponse_default_instance_;
    new (ptr) ::SvrMsg::UserBoxTimeRecoverResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserBoxTimeRecoverResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBoxTimeRecoverResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBoxTimeRecoverResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserBoxTimePauseRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserBoxTimePauseRequest_default_instance_;
    new (ptr) ::SvrMsg::UserBoxTimePauseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserBoxTimePauseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBoxTimePauseRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBoxTimePauseRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserBoxTimePauseResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserBoxTimePauseResponse_default_instance_;
    new (ptr) ::SvrMsg::UserBoxTimePauseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserBoxTimePauseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserBoxTimePauseResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserBoxTimePauseResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsNotifyTokenLoginRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_NotifyTokenLoginRequest_default_instance_;
    new (ptr) ::SvrMsg::NotifyTokenLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::NotifyTokenLoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyTokenLoginRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyTokenLoginRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsNotifyTokenLoginResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_NotifyTokenLoginResponse_default_instance_;
    new (ptr) ::SvrMsg::NotifyTokenLoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::NotifyTokenLoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyTokenLoginResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyTokenLoginResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsNotifyOpenRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_NotifyOpenRequest_default_instance_;
    new (ptr) ::SvrMsg::NotifyOpenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::NotifyOpenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyOpenRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyOpenRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsNotifyOpenResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_NotifyOpenResponse_default_instance_;
    new (ptr) ::SvrMsg::NotifyOpenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::NotifyOpenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyOpenResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyOpenResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserLogRecordRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserLogRecordRequest_default_instance_;
    new (ptr) ::SvrMsg::UserLogRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserLogRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLogRecordRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLogRecordRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserLogRecordResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserLogRecordResponse_default_instance_;
    new (ptr) ::SvrMsg::UserLogRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserLogRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLogRecordResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLogRecordResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLogRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLogRequest_default_instance_;
    new (ptr) ::SvrMsg::GameLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLogRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLogRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsGameLogResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_GameLogResponse_default_instance_;
    new (ptr) ::SvrMsg::GameLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::GameLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLogResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLogResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsAppLogRecordRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_AppLogRecordRequest_default_instance_;
    new (ptr) ::SvrMsg::AppLogRecordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::AppLogRecordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppLogRecordRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppLogRecordRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsAppLogRecordResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_AppLogRecordResponse_default_instance_;
    new (ptr) ::SvrMsg::AppLogRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::AppLogRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppLogRecordResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppLogRecordResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsUserChipsLogRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserChipsLogRequest_default_instance_;
    new (ptr) ::SvrMsg::UserChipsLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserChipsLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserChipsLogRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserChipsLogRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsUserChipsLogResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_UserChipsLogResponse_default_instance_;
    new (ptr) ::SvrMsg::UserChipsLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::UserChipsLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserChipsLogResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserChipsLogResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsBankruptLogRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_BankruptLogRequest_default_instance_;
    new (ptr) ::SvrMsg::BankruptLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::BankruptLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BankruptLogRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBankruptLogRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsBankruptLogResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_BankruptLogResponse_default_instance_;
    new (ptr) ::SvrMsg::BankruptLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::BankruptLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BankruptLogResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBankruptLogResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsQueryRoomMatchRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_QueryRoomMatchRequest_default_instance_;
    new (ptr) ::SvrMsg::QueryRoomMatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::QueryRoomMatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryRoomMatchRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryRoomMatchRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsQueryRoomMatchResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_QueryRoomMatchResponse_default_instance_;
    new (ptr) ::SvrMsg::QueryRoomMatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::QueryRoomMatchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryRoomMatchResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryRoomMatchResponse_SvrMsg_2eproto}, {}};

static void InitDefaultsRoomMatchStatusRequest_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_RoomMatchStatusRequest_default_instance_;
    new (ptr) ::SvrMsg::RoomMatchStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::RoomMatchStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomMatchStatusRequest_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomMatchStatusRequest_SvrMsg_2eproto}, {}};

static void InitDefaultsRoomMatchStatusResponse_SvrMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SvrMsg::_RoomMatchStatusResponse_default_instance_;
    new (ptr) ::SvrMsg::RoomMatchStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrMsg::RoomMatchStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomMatchStatusResponse_SvrMsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomMatchStatusResponse_SvrMsg_2eproto}, {}};

void InitDefaults_SvrMsg_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetGameSvrInstanceRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetGameSvrInstanceResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommQueryRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DBRow_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommQueryResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerGameResult_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitGameResultRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitGameResultResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddPlayerChipsRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddPlayerChipsResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserJoinGameRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserJoinGameResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLeaveGameRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLeaveGameResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserEnterRoomRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserEnterRoomResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserQuitRoomRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserQuitRoomResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSvrStartRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSvrStartResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenGameRoomRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenGameRoomResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameRoomEmptyRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameRoomEmptyResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSvrAliveRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSvrAliveResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HallStartUpRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HallStartUpResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserOnlineRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserOnlineResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserGameSessionRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserGameSessionResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserGameStatus_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserInGameRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlushUserInGameResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TellUserOfflineRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TellUserOfflineResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TellUserLogoutGameRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TellUserLogoutGameResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DispatchUserMsgRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DispatchUserMsgResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HallLoginRecordRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HallLoginRecordResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLoginRecordRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLoginRecordResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserTokenRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserTokenResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserLoginRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckUserLoginResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KickOutUserRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KickOutUserResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ForbiddenUserRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ForbiddenUserResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInGameCountRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInGameCountResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBuyChipsInRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameBuyChipsInResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameStartBetRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameStartBetResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameAddCarryRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameAddCarryResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchOverAccountRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchOverAccountResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserGameAccount_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameOverAccountRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameOverAccountResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLeaveAccountRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLeaveAccountResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBoxTimeRecoverRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBoxTimeRecoverResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBoxTimePauseRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserBoxTimePauseResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyTokenLoginRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyTokenLoginResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyOpenRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyOpenResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLogRecordRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLogRecordResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLogRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLogResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppLogRecordRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppLogRecordResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChipsLogRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserChipsLogResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BankruptLogRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BankruptLogResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryRoomMatchRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryRoomMatchResponse_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomMatchStatusRequest_SvrMsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomMatchStatusResponse_SvrMsg_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_SvrMsg_2eproto[90];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_SvrMsg_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_SvrMsg_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_SvrMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetGameSvrInstanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetGameSvrInstanceRequest, hostip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetGameSvrInstanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetGameSvrInstanceResponse, gamesvrports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CommQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CommQueryRequest, templatename_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CommQueryRequest, queryparas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DBRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DBRow, dbrow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CommQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CommQueryResponse, queryresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, chipsincrease_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, expincrease_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, statusmask_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::PlayerGameResult, chipswinpool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::SubmitGameResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::SubmitGameResultRequest, gameid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::SubmitGameResultRequest, gameresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::SubmitGameResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsRequest, chipsaddcount_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsRequest, addreason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AddPlayerChipsResponse, currentchips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameRequest, smallblind_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameRequest, playingcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserJoinGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, playingcount_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, givebackchips_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameRequest, smallblind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLeaveGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserEnterRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserEnterRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserEnterRoomRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserEnterRoomRequest, smallblind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserEnterRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomRequest, playingcount_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomRequest, givebackchips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserQuitRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrStartRequest, gamesvrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrStartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::OpenGameRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::OpenGameRoomRequest, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::OpenGameRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameRoomEmptyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameRoomEmptyRequest, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameRoomEmptyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameRoomEmptyResponse, needcloseroom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrAliveRequest, gamesvrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameSvrAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallStartUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallStartUpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserOnlineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserOnlineRequest, onlineuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserOnlineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserGameSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserGameSessionRequest, onlineuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserGameSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameStatus, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameStatus, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameStatus, gamestatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserInGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserInGameRequest, gameplayer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::FlushUserInGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserOfflineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserOfflineRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserOfflineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserLogoutGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserLogoutGameRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::TellUserLogoutGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DispatchUserMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DispatchUserMsgRequest, jsonstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DispatchUserMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::DispatchUserMsgResponse, jsonstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, pid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, time_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, action_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordRequest, remoteaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::HallLoginRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, pid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, time_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, action_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordRequest, remoteaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLoginRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserTokenRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserTokenRequest, usertoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserLoginRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserLoginRequest, usertoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::CheckUserLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::KickOutUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::KickOutUserRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::KickOutUserRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::KickOutUserRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::KickOutUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::ForbiddenUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::ForbiddenUserRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::ForbiddenUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetInGameCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetInGameCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetInGameCountResponse, logincount_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetInGameCountResponse, playcount_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GetInGameCountResponse, watchcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, smallblind_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, buychips_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInRequest, buychipsmin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInResponse, buychipsreal_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameBuyChipsInResponse, chipsleft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetRequest, betchips_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetRequest, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameStartBetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryRequest, curcarrychips_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryRequest, needaddtocarry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameAddCarryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, curcarrychips_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, needaddtoactive_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountRequest, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::MatchOverAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameAccount, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserGameAccount, currentcarry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameOverAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameOverAccountRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameOverAccountRequest, gameid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameOverAccountRequest, usergameresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameOverAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, currentcarry_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, gameid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountRequest, smallblind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLeaveAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimeRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimeRecoverRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimeRecoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimePauseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimePauseRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserBoxTimePauseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::NotifyTokenLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::NotifyTokenLoginRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::NotifyTokenLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::NotifyOpenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::NotifyOpenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordRequest, logtime_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordRequest, action_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordRequest, loginfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserLogRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, smallblind_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, logtime_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, tipstotal_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, gameid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, loginfo_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, chipspool_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogRequest, roomtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::GameLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AppLogRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AppLogRecordRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AppLogRecordRequest, loginfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::AppLogRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, logtime_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, oldtotal_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, newtotal_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, changereaseon_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, usertype_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, roomid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, carry_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogRequest, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::UserChipsLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::BankruptLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::BankruptLogRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::SvrMsg::BankruptLogRequest, logtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::BankruptLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::QueryRoomMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::QueryRoomMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::QueryRoomMatchResponse, isavailable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::RoomMatchStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::RoomMatchStatusRequest, isavailable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrMsg::RoomMatchStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SvrMsg::GetGameSvrInstanceRequest)},
  { 6, -1, sizeof(::SvrMsg::GetGameSvrInstanceResponse)},
  { 12, -1, sizeof(::SvrMsg::CommQueryRequest)},
  { 19, -1, sizeof(::SvrMsg::DBRow)},
  { 25, -1, sizeof(::SvrMsg::CommQueryResponse)},
  { 31, -1, sizeof(::SvrMsg::PlayerGameResult)},
  { 41, -1, sizeof(::SvrMsg::SubmitGameResultRequest)},
  { 48, -1, sizeof(::SvrMsg::SubmitGameResultResponse)},
  { 53, -1, sizeof(::SvrMsg::AddPlayerChipsRequest)},
  { 61, -1, sizeof(::SvrMsg::AddPlayerChipsResponse)},
  { 67, -1, sizeof(::SvrMsg::UserJoinGameRequest)},
  { 76, -1, sizeof(::SvrMsg::UserJoinGameResponse)},
  { 81, -1, sizeof(::SvrMsg::UserLeaveGameRequest)},
  { 91, -1, sizeof(::SvrMsg::UserLeaveGameResponse)},
  { 96, -1, sizeof(::SvrMsg::UserEnterRoomRequest)},
  { 104, -1, sizeof(::SvrMsg::UserEnterRoomResponse)},
  { 109, -1, sizeof(::SvrMsg::UserQuitRoomRequest)},
  { 118, -1, sizeof(::SvrMsg::UserQuitRoomResponse)},
  { 123, -1, sizeof(::SvrMsg::GameSvrStartRequest)},
  { 129, -1, sizeof(::SvrMsg::GameSvrStartResponse)},
  { 134, -1, sizeof(::SvrMsg::OpenGameRoomRequest)},
  { 140, -1, sizeof(::SvrMsg::OpenGameRoomResponse)},
  { 145, -1, sizeof(::SvrMsg::GameRoomEmptyRequest)},
  { 151, -1, sizeof(::SvrMsg::GameRoomEmptyResponse)},
  { 157, -1, sizeof(::SvrMsg::GameSvrAliveRequest)},
  { 163, -1, sizeof(::SvrMsg::GameSvrAliveResponse)},
  { 168, -1, sizeof(::SvrMsg::HallStartUpRequest)},
  { 173, -1, sizeof(::SvrMsg::HallStartUpResponse)},
  { 178, -1, sizeof(::SvrMsg::FlushUserOnlineRequest)},
  { 184, -1, sizeof(::SvrMsg::FlushUserOnlineResponse)},
  { 189, -1, sizeof(::SvrMsg::FlushUserGameSessionRequest)},
  { 195, -1, sizeof(::SvrMsg::FlushUserGameSessionResponse)},
  { 200, -1, sizeof(::SvrMsg::UserGameStatus)},
  { 208, -1, sizeof(::SvrMsg::FlushUserInGameRequest)},
  { 214, -1, sizeof(::SvrMsg::FlushUserInGameResponse)},
  { 219, -1, sizeof(::SvrMsg::TellUserOfflineRequest)},
  { 225, -1, sizeof(::SvrMsg::TellUserOfflineResponse)},
  { 230, -1, sizeof(::SvrMsg::TellUserLogoutGameRequest)},
  { 236, -1, sizeof(::SvrMsg::TellUserLogoutGameResponse)},
  { 241, -1, sizeof(::SvrMsg::DispatchUserMsgRequest)},
  { 247, -1, sizeof(::SvrMsg::DispatchUserMsgResponse)},
  { 253, -1, sizeof(::SvrMsg::HallLoginRecordRequest)},
  { 263, -1, sizeof(::SvrMsg::HallLoginRecordResponse)},
  { 268, -1, sizeof(::SvrMsg::GameLoginRecordRequest)},
  { 278, -1, sizeof(::SvrMsg::GameLoginRecordResponse)},
  { 283, -1, sizeof(::SvrMsg::CheckUserTokenRequest)},
  { 290, -1, sizeof(::SvrMsg::CheckUserTokenResponse)},
  { 295, -1, sizeof(::SvrMsg::CheckUserLoginRequest)},
  { 302, -1, sizeof(::SvrMsg::CheckUserLoginResponse)},
  { 307, -1, sizeof(::SvrMsg::KickOutUserRequest)},
  { 315, -1, sizeof(::SvrMsg::KickOutUserResponse)},
  { 320, -1, sizeof(::SvrMsg::ForbiddenUserRequest)},
  { 326, -1, sizeof(::SvrMsg::ForbiddenUserResponse)},
  { 331, -1, sizeof(::SvrMsg::GetInGameCountRequest)},
  { 336, -1, sizeof(::SvrMsg::GetInGameCountResponse)},
  { 344, -1, sizeof(::SvrMsg::GameBuyChipsInRequest)},
  { 354, -1, sizeof(::SvrMsg::GameBuyChipsInResponse)},
  { 361, -1, sizeof(::SvrMsg::GameStartBetRequest)},
  { 370, -1, sizeof(::SvrMsg::GameStartBetResponse)},
  { 375, -1, sizeof(::SvrMsg::GameAddCarryRequest)},
  { 384, -1, sizeof(::SvrMsg::GameAddCarryResponse)},
  { 389, -1, sizeof(::SvrMsg::MatchOverAccountRequest)},
  { 399, -1, sizeof(::SvrMsg::MatchOverAccountResponse)},
  { 404, -1, sizeof(::SvrMsg::UserGameAccount)},
  { 411, -1, sizeof(::SvrMsg::GameOverAccountRequest)},
  { 419, -1, sizeof(::SvrMsg::GameOverAccountResponse)},
  { 424, -1, sizeof(::SvrMsg::GameLeaveAccountRequest)},
  { 434, -1, sizeof(::SvrMsg::GameLeaveAccountResponse)},
  { 439, -1, sizeof(::SvrMsg::UserBoxTimeRecoverRequest)},
  { 445, -1, sizeof(::SvrMsg::UserBoxTimeRecoverResponse)},
  { 450, -1, sizeof(::SvrMsg::UserBoxTimePauseRequest)},
  { 456, -1, sizeof(::SvrMsg::UserBoxTimePauseResponse)},
  { 461, -1, sizeof(::SvrMsg::NotifyTokenLoginRequest)},
  { 467, -1, sizeof(::SvrMsg::NotifyTokenLoginResponse)},
  { 472, -1, sizeof(::SvrMsg::NotifyOpenRequest)},
  { 477, -1, sizeof(::SvrMsg::NotifyOpenResponse)},
  { 482, -1, sizeof(::SvrMsg::UserLogRecordRequest)},
  { 491, -1, sizeof(::SvrMsg::UserLogRecordResponse)},
  { 496, -1, sizeof(::SvrMsg::GameLogRequest)},
  { 510, -1, sizeof(::SvrMsg::GameLogResponse)},
  { 515, -1, sizeof(::SvrMsg::AppLogRecordRequest)},
  { 522, -1, sizeof(::SvrMsg::AppLogRecordResponse)},
  { 527, -1, sizeof(::SvrMsg::UserChipsLogRequest)},
  { 541, -1, sizeof(::SvrMsg::UserChipsLogResponse)},
  { 546, -1, sizeof(::SvrMsg::BankruptLogRequest)},
  { 553, -1, sizeof(::SvrMsg::BankruptLogResponse)},
  { 558, -1, sizeof(::SvrMsg::QueryRoomMatchRequest)},
  { 563, -1, sizeof(::SvrMsg::QueryRoomMatchResponse)},
  { 569, -1, sizeof(::SvrMsg::RoomMatchStatusRequest)},
  { 575, -1, sizeof(::SvrMsg::RoomMatchStatusResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GetGameSvrInstanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GetGameSvrInstanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CommQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_DBRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CommQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_PlayerGameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_SubmitGameResultRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_SubmitGameResultResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_AddPlayerChipsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_AddPlayerChipsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserJoinGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserJoinGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserLeaveGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserLeaveGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserEnterRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserEnterRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserQuitRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserQuitRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameSvrStartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameSvrStartResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_OpenGameRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_OpenGameRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameRoomEmptyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameRoomEmptyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameSvrAliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameSvrAliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_HallStartUpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_HallStartUpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserOnlineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserOnlineResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserGameSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserGameSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserGameStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserInGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_FlushUserInGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_TellUserOfflineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_TellUserOfflineResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_TellUserLogoutGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_TellUserLogoutGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_DispatchUserMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_DispatchUserMsgResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_HallLoginRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_HallLoginRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLoginRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLoginRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CheckUserTokenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CheckUserTokenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CheckUserLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_CheckUserLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_KickOutUserRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_KickOutUserResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_ForbiddenUserRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_ForbiddenUserResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GetInGameCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GetInGameCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameBuyChipsInRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameBuyChipsInResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameStartBetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameStartBetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameAddCarryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameAddCarryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_MatchOverAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_MatchOverAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserGameAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameOverAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameOverAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLeaveAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLeaveAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserBoxTimeRecoverRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserBoxTimeRecoverResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserBoxTimePauseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserBoxTimePauseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_NotifyTokenLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_NotifyTokenLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_NotifyOpenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_NotifyOpenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserLogRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserLogRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_GameLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_AppLogRecordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_AppLogRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserChipsLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_UserChipsLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_BankruptLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_BankruptLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_QueryRoomMatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_QueryRoomMatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_RoomMatchStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SvrMsg::_RoomMatchStatusResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_SvrMsg_2eproto = {
  {}, AddDescriptors_SvrMsg_2eproto, "SvrMsg.proto", schemas,
  file_default_instances, TableStruct_SvrMsg_2eproto::offsets,
  file_level_metadata_SvrMsg_2eproto, 90, file_level_enum_descriptors_SvrMsg_2eproto, file_level_service_descriptors_SvrMsg_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_SvrMsg_2eproto = {
  false, InitDefaults_SvrMsg_2eproto, 
  "\n\014SvrMsg.proto\022\006SvrMsg\"+\n\031GetGameSvrInst"
  "anceRequest\022\016\n\006hostIp\030\001 \001(\014\"2\n\032GetGameSv"
  "rInstanceResponse\022\024\n\014gamesvrPorts\030\001 \003(\005\""
  "<\n\020CommQueryRequest\022\024\n\014templateName\030\001 \001("
  "\014\022\022\n\nqueryParas\030\002 \003(\014\"\026\n\005DBRow\022\r\n\005dbRow\030"
  "\001 \003(\014\"7\n\021CommQueryResponse\022\"\n\013queryResul"
  "t\030\001 \003(\0132\r.SvrMsg.DBRow\"\251\001\n\020PlayerGameRes"
  "ult\022\016\n\006userId\030\001 \001(\005\022\025\n\rchipsIncrease\030\002 \001"
  "(\003\022\023\n\013expIncrease\030\003 \001(\005\022\022\n\nstatusMask\030\004 "
  "\001(\005\022\024\n\014chipsWinPool\030\005 \001(\003\"/\n\nEnumResult\022"
  "\r\n\tfirstFlag\020\000\022\007\n\003win\020\010\022\t\n\005abort\020 \"W\n\027Su"
  "bmitGameResultRequest\022\016\n\006gameId\030\001 \001(\014\022,\n"
  "\ngameResult\030\002 \003(\0132\030.SvrMsg.PlayerGameRes"
  "ult\"\032\n\030SubmitGameResultResponse\"Q\n\025AddPl"
  "ayerChipsRequest\022\016\n\006userId\030\001 \001(\005\022\025\n\rchip"
  "sAddCount\030\002 \001(\003\022\021\n\taddReason\030\003 \001(\005\".\n\026Ad"
  "dPlayerChipsResponse\022\024\n\014currentChips\030\001 \001"
  "(\003\"_\n\023UserJoinGameRequest\022\016\n\006userId\030\001 \001("
  "\005\022\016\n\006roomId\030\002 \001(\005\022\022\n\nsmallBlind\030\003 \001(\003\022\024\n"
  "\014playingCount\030\004 \001(\005\"\026\n\024UserJoinGameRespo"
  "nse\"w\n\024UserLeaveGameRequest\022\016\n\006userId\030\001 "
  "\001(\005\022\016\n\006roomId\030\002 \001(\005\022\024\n\014playingCount\030\003 \001("
  "\005\022\025\n\rgiveBackChips\030\004 \001(\003\022\022\n\nsmallBlind\030\005"
  " \001(\003\"\027\n\025UserLeaveGameResponse\"J\n\024UserEnt"
  "erRoomRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030"
  "\002 \001(\003\022\022\n\nsmallBlind\030\003 \001(\003\"\027\n\025UserEnterRo"
  "omResponse\"b\n\023UserQuitRoomRequest\022\016\n\006use"
  "rId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\024\n\014playingCoun"
  "t\030\003 \001(\005\022\025\n\rgiveBackChips\030\004 \001(\003\"\026\n\024UserQu"
  "itRoomResponse\"(\n\023GameSvrStartRequest\022\021\n"
  "\tgamesvrId\030\001 \001(\005\"\026\n\024GameSvrStartResponse"
  "\"%\n\023OpenGameRoomRequest\022\016\n\006roomId\030\001 \001(\005\""
  "\026\n\024OpenGameRoomResponse\"&\n\024GameRoomEmpty"
  "Request\022\016\n\006roomId\030\001 \001(\005\".\n\025GameRoomEmpty"
  "Response\022\025\n\rneedCloseRoom\030\001 \001(\005\"(\n\023GameS"
  "vrAliveRequest\022\021\n\tgamesvrId\030\001 \001(\005\"\026\n\024Gam"
  "eSvrAliveResponse\"\024\n\022HallStartUpRequest\""
  "\025\n\023HallStartUpResponse\".\n\026FlushUserOnlin"
  "eRequest\022\024\n\014onlineUserId\030\001 \003(\005\"\031\n\027FlushU"
  "serOnlineResponse\"3\n\033FlushUserGameSessio"
  "nRequest\022\024\n\014onlineUserId\030\001 \003(\005\"\036\n\034FlushU"
  "serGameSessionResponse\"D\n\016UserGameStatus"
  "\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\022\n\ngame"
  "Status\030\003 \001(\005\"\212\001\n\026FlushUserInGameRequest\022"
  "*\n\ngamePlayer\030\001 \003(\0132\026.SvrMsg.UserGameSta"
  "tus\"D\n\016EnumGameStatus\022\r\n\tFIST_GLAG\020\000\022\020\n\014"
  "USER_IN_GAME\020\002\022\021\n\rUSER_IN_WATCH\020\003\"\031\n\027Flu"
  "shUserInGameResponse\"(\n\026TellUserOfflineR"
  "equest\022\016\n\006userId\030\001 \001(\005\"\031\n\027TellUserOfflin"
  "eResponse\"+\n\031TellUserLogoutGameRequest\022\016"
  "\n\006userId\030\001 \001(\005\"\034\n\032TellUserLogoutGameResp"
  "onse\",\n\026DispatchUserMsgRequest\022\022\n\njsonSt"
  "ring\030\001 \001(\014\"-\n\027DispatchUserMsgResponse\022\022\n"
  "\njsonString\030\001 \001(\014\"g\n\026HallLoginRecordRequ"
  "est\022\016\n\006userId\030\001 \001(\005\022\013\n\003pid\030\002 \001(\005\022\014\n\004time"
  "\030\003 \001(\005\022\016\n\006action\030\004 \001(\005\022\022\n\nremoteAddr\030\005 \001"
  "(\014\"\031\n\027HallLoginRecordResponse\"g\n\026GameLog"
  "inRecordRequest\022\016\n\006userId\030\001 \001(\005\022\013\n\003pid\030\002"
  " \001(\005\022\014\n\004time\030\003 \001(\005\022\016\n\006action\030\004 \001(\005\022\022\n\nre"
  "moteAddr\030\005 \001(\014\"\031\n\027GameLoginRecordRespons"
  "e\":\n\025CheckUserTokenRequest\022\016\n\006userId\030\001 \001"
  "(\005\022\021\n\tuserToken\030\002 \001(\014\"\030\n\026CheckUserTokenR"
  "esponse\":\n\025CheckUserLoginRequest\022\016\n\006user"
  "Id\030\001 \001(\005\022\021\n\tuserToken\030\002 \001(\014\"\030\n\026CheckUser"
  "LoginResponse\"I\n\022KickOutUserRequest\022\016\n\006u"
  "serId\030\001 \001(\005\022\016\n\006reason\030\002 \001(\005\022\023\n\013descripti"
  "on\030\003 \001(\014\"\025\n\023KickOutUserResponse\"&\n\024Forbi"
  "ddenUserRequest\022\016\n\006userId\030\001 \001(\005\"\027\n\025Forbi"
  "ddenUserResponse\"\027\n\025GetInGameCountReques"
  "t\"S\n\026GetInGameCountResponse\022\022\n\nloginCoun"
  "t\030\001 \001(\005\022\021\n\tplayCount\030\002 \001(\005\022\022\n\nwatchCount"
  "\030\003 \001(\005\"r\n\025GameBuyChipsInRequest\022\016\n\006userI"
  "d\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\022\n\nsmallBlind\030\003 "
  "\001(\003\022\020\n\010buyChips\030\004 \001(\003\022\023\n\013buyChipsMin\030\005 \001"
  "(\003\"A\n\026GameBuyChipsInResponse\022\024\n\014buyChips"
  "Real\030\001 \001(\003\022\021\n\tchipsLeft\030\002 \001(\003\"W\n\023GameSta"
  "rtBetRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002"
  " \001(\005\022\020\n\010betChips\030\003 \001(\003\022\016\n\006gameId\030\004 \001(\014\"\026"
  "\n\024GameStartBetResponse\"d\n\023GameAddCarryRe"
  "quest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\025\n"
  "\rcurCarryChips\030\003 \001(\003\022\026\n\016needAddToCarry\030\004"
  " \001(\003\"\026\n\024GameAddCarryResponse\"y\n\027MatchOve"
  "rAccountRequest\022\016\n\006userId\030\001 \001(\005\022\016\n\006roomI"
  "d\030\002 \001(\005\022\025\n\rcurCarryChips\030\003 \001(\003\022\027\n\017needAd"
  "dToActive\030\004 \001(\003\022\016\n\006gameId\030\005 \001(\014\"\032\n\030Match"
  "OverAccountResponse\"7\n\017UserGameAccount\022\016"
  "\n\006userId\030\001 \001(\005\022\024\n\014currentCarry\030\002 \001(\003\"i\n\026"
  "GameOverAccountRequest\022\016\n\006roomId\030\001 \001(\005\022\016"
  "\n\006gameId\030\002 \001(\014\022/\n\016userGameResult\030\003 \003(\0132\027"
  ".SvrMsg.UserGameAccount\"\031\n\027GameOverAccou"
  "ntResponse\"s\n\027GameLeaveAccountRequest\022\016\n"
  "\006userId\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\005\022\024\n\014current"
  "Carry\030\003 \001(\003\022\016\n\006gameId\030\004 \001(\014\022\022\n\nsmallBlin"
  "d\030\005 \001(\003\"\032\n\030GameLeaveAccountResponse\"+\n\031U"
  "serBoxTimeRecoverRequest\022\016\n\006userId\030\001 \001(\005"
  "\"\034\n\032UserBoxTimeRecoverResponse\")\n\027UserBo"
  "xTimePauseRequest\022\016\n\006userId\030\001 \001(\005\"\032\n\030Use"
  "rBoxTimePauseResponse\")\n\027NotifyTokenLogi"
  "nRequest\022\016\n\006userId\030\001 \001(\005\"\032\n\030NotifyTokenL"
  "oginResponse\"\023\n\021NotifyOpenRequest\"\024\n\022Not"
  "ifyOpenResponse\"X\n\024UserLogRecordRequest\022"
  "\016\n\006userId\030\001 \001(\005\022\017\n\007logTime\030\002 \001(\003\022\016\n\006acti"
  "on\030\003 \001(\014\022\017\n\007logInfo\030\004 \001(\014\"\027\n\025UserLogReco"
  "rdResponse\"\260\001\n\016GameLogRequest\022\016\n\006roomId\030"
  "\001 \001(\005\022\022\n\nsmallBlind\030\002 \001(\003\022\017\n\007logTime\030\003 \001"
  "(\003\022\021\n\ttipsTotal\030\004 \001(\003\022\016\n\006gameId\030\005 \001(\014\022\017\n"
  "\007logInfo\030\006 \001(\014\022\020\n\010playerId\030\007 \003(\005\022\021\n\tchip"
  "sPool\030\010 \001(\003\022\020\n\010roomType\030\t \001(\014\"\021\n\017GameLog"
  "Response\"6\n\023AppLogRecordRequest\022\016\n\006userI"
  "d\030\001 \001(\005\022\017\n\007logInfo\030\002 \001(\014\"\026\n\024AppLogRecord"
  "Response\"\262\001\n\023UserChipsLogRequest\022\016\n\006user"
  "Id\030\001 \001(\005\022\017\n\007logTime\030\002 \001(\003\022\020\n\010oldTotal\030\003 "
  "\001(\003\022\020\n\010newTotal\030\004 \001(\003\022\025\n\rchangeReaseon\030\005"
  " \001(\005\022\020\n\010userType\030\006 \001(\005\022\016\n\006roomId\030\007 \001(\005\022\r"
  "\n\005carry\030\010 \001(\003\022\016\n\006gameId\030\t \001(\014\"\026\n\024UserChi"
  "psLogResponse\"5\n\022BankruptLogRequest\022\016\n\006u"
  "serId\030\001 \001(\005\022\017\n\007logTime\030\002 \001(\003\"\025\n\023Bankrupt"
  "LogResponse\"\027\n\025QueryRoomMatchRequest\"-\n\026"
  "QueryRoomMatchResponse\022\023\n\013isAvailable\030\001 "
  "\001(\010\"-\n\026RoomMatchStatusRequest\022\023\n\013isAvail"
  "able\030\001 \001(\010\"\031\n\027RoomMatchStatusResponse*2\n"
  "\017EnumLoginAction\022\017\n\013USER_LOGOUT\020\000\022\016\n\nUSE"
  "R_LOGIN\020\001b\006proto3"
,
  "SvrMsg.proto", &assign_descriptors_table_SvrMsg_2eproto, 4897,
};

void AddDescriptors_SvrMsg_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_SvrMsg_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SvrMsg_2eproto = []() { AddDescriptors_SvrMsg_2eproto(); return true; }();
namespace SvrMsg {
const ::google::protobuf::EnumDescriptor* PlayerGameResult_EnumResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_SvrMsg_2eproto);
  return file_level_enum_descriptors_SvrMsg_2eproto[0];
}
bool PlayerGameResult_EnumResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerGameResult_EnumResult PlayerGameResult::firstFlag;
const PlayerGameResult_EnumResult PlayerGameResult::win;
const PlayerGameResult_EnumResult PlayerGameResult::abort;
const PlayerGameResult_EnumResult PlayerGameResult::EnumResult_MIN;
const PlayerGameResult_EnumResult PlayerGameResult::EnumResult_MAX;
const int PlayerGameResult::EnumResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlushUserInGameRequest_EnumGameStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_SvrMsg_2eproto);
  return file_level_enum_descriptors_SvrMsg_2eproto[1];
}
bool FlushUserInGameRequest_EnumGameStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest::FIST_GLAG;
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest::USER_IN_GAME;
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest::USER_IN_WATCH;
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest::EnumGameStatus_MIN;
const FlushUserInGameRequest_EnumGameStatus FlushUserInGameRequest::EnumGameStatus_MAX;
const int FlushUserInGameRequest::EnumGameStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumLoginAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_SvrMsg_2eproto);
  return file_level_enum_descriptors_SvrMsg_2eproto[2];
}
bool EnumLoginAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetGameSvrInstanceRequest::InitAsDefaultInstance() {
}
class GetGameSvrInstanceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGameSvrInstanceRequest::kHostIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGameSvrInstanceRequest::GetGameSvrInstanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GetGameSvrInstanceRequest)
}
GetGameSvrInstanceRequest::GetGameSvrInstanceRequest(const GetGameSvrInstanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostip().size() > 0) {
    hostip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostip_);
  }
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GetGameSvrInstanceRequest)
}

void GetGameSvrInstanceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetGameSvrInstanceRequest_SvrMsg_2eproto.base);
  hostip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetGameSvrInstanceRequest::~GetGameSvrInstanceRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GetGameSvrInstanceRequest)
  SharedDtor();
}

void GetGameSvrInstanceRequest::SharedDtor() {
  hostip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetGameSvrInstanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameSvrInstanceRequest& GetGameSvrInstanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetGameSvrInstanceRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GetGameSvrInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GetGameSvrInstanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGameSvrInstanceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetGameSvrInstanceRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes hostIp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_hostip();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGameSvrInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GetGameSvrInstanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hostIp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GetGameSvrInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GetGameSvrInstanceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGameSvrInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GetGameSvrInstanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hostIp = 1;
  if (this->hostip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hostip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GetGameSvrInstanceRequest)
}

::google::protobuf::uint8* GetGameSvrInstanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GetGameSvrInstanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hostIp = 1;
  if (this->hostip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hostip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GetGameSvrInstanceRequest)
  return target;
}

size_t GetGameSvrInstanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GetGameSvrInstanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hostIp = 1;
  if (this->hostip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hostip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameSvrInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GetGameSvrInstanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameSvrInstanceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetGameSvrInstanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GetGameSvrInstanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GetGameSvrInstanceRequest)
    MergeFrom(*source);
  }
}

void GetGameSvrInstanceRequest::MergeFrom(const GetGameSvrInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GetGameSvrInstanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostip().size() > 0) {

    hostip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostip_);
  }
}

void GetGameSvrInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GetGameSvrInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSvrInstanceRequest::CopyFrom(const GetGameSvrInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GetGameSvrInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSvrInstanceRequest::IsInitialized() const {
  return true;
}

void GetGameSvrInstanceRequest::Swap(GetGameSvrInstanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGameSvrInstanceRequest::InternalSwap(GetGameSvrInstanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hostip_.Swap(&other->hostip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetGameSvrInstanceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetGameSvrInstanceResponse::InitAsDefaultInstance() {
}
class GetGameSvrInstanceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGameSvrInstanceResponse::kGamesvrPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGameSvrInstanceResponse::GetGameSvrInstanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GetGameSvrInstanceResponse)
}
GetGameSvrInstanceResponse::GetGameSvrInstanceResponse(const GetGameSvrInstanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gamesvrports_(from.gamesvrports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GetGameSvrInstanceResponse)
}

void GetGameSvrInstanceResponse::SharedCtor() {
}

GetGameSvrInstanceResponse::~GetGameSvrInstanceResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GetGameSvrInstanceResponse)
  SharedDtor();
}

void GetGameSvrInstanceResponse::SharedDtor() {
}

void GetGameSvrInstanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameSvrInstanceResponse& GetGameSvrInstanceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetGameSvrInstanceResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GetGameSvrInstanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GetGameSvrInstanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesvrports_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGameSvrInstanceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetGameSvrInstanceResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 gamesvrPorts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_gamesvrports();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_gamesvrports(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGameSvrInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GetGameSvrInstanceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 gamesvrPorts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gamesvrports())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_gamesvrports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GetGameSvrInstanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GetGameSvrInstanceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGameSvrInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GetGameSvrInstanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gamesvrPorts = 1;
  if (this->gamesvrports_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gamesvrports_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->gamesvrports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->gamesvrports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GetGameSvrInstanceResponse)
}

::google::protobuf::uint8* GetGameSvrInstanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GetGameSvrInstanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gamesvrPorts = 1;
  if (this->gamesvrports_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _gamesvrports_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->gamesvrports_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GetGameSvrInstanceResponse)
  return target;
}

size_t GetGameSvrInstanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GetGameSvrInstanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gamesvrPorts = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->gamesvrports_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _gamesvrports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameSvrInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GetGameSvrInstanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameSvrInstanceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetGameSvrInstanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GetGameSvrInstanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GetGameSvrInstanceResponse)
    MergeFrom(*source);
  }
}

void GetGameSvrInstanceResponse::MergeFrom(const GetGameSvrInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GetGameSvrInstanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamesvrports_.MergeFrom(from.gamesvrports_);
}

void GetGameSvrInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GetGameSvrInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSvrInstanceResponse::CopyFrom(const GetGameSvrInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GetGameSvrInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSvrInstanceResponse::IsInitialized() const {
  return true;
}

void GetGameSvrInstanceResponse::Swap(GetGameSvrInstanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGameSvrInstanceResponse::InternalSwap(GetGameSvrInstanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesvrports_.InternalSwap(&other->gamesvrports_);
}

::google::protobuf::Metadata GetGameSvrInstanceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommQueryRequest::InitAsDefaultInstance() {
}
class CommQueryRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommQueryRequest::kTemplateNameFieldNumber;
const int CommQueryRequest::kQueryParasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommQueryRequest::CommQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CommQueryRequest)
}
CommQueryRequest::CommQueryRequest(const CommQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queryparas_(from.queryparas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.templatename().size() > 0) {
    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CommQueryRequest)
}

void CommQueryRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommQueryRequest_SvrMsg_2eproto.base);
  templatename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommQueryRequest::~CommQueryRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.CommQueryRequest)
  SharedDtor();
}

void CommQueryRequest::SharedDtor() {
  templatename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommQueryRequest& CommQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommQueryRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CommQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CommQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryparas_.Clear();
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommQueryRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommQueryRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes templateName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_templatename();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated bytes queryParas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_queryparas();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          str->append(ptr, size);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CommQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes templateName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_templatename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes queryParas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_queryparas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CommQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CommQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CommQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes templateName = 1;
  if (this->templatename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->templatename(), output);
  }

  // repeated bytes queryParas = 2;
  for (int i = 0, n = this->queryparas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->queryparas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CommQueryRequest)
}

::google::protobuf::uint8* CommQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CommQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes templateName = 1;
  if (this->templatename().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->templatename(), target);
  }

  // repeated bytes queryParas = 2;
  for (int i = 0, n = this->queryparas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->queryparas(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CommQueryRequest)
  return target;
}

size_t CommQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CommQueryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes queryParas = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queryparas_size());
  for (int i = 0, n = this->queryparas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->queryparas(i));
  }

  // bytes templateName = 1;
  if (this->templatename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->templatename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CommQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommQueryRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CommQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CommQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CommQueryRequest)
    MergeFrom(*source);
  }
}

void CommQueryRequest::MergeFrom(const CommQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CommQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queryparas_.MergeFrom(from.queryparas_);
  if (from.templatename().size() > 0) {

    templatename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templatename_);
  }
}

void CommQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CommQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommQueryRequest::CopyFrom(const CommQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CommQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommQueryRequest::IsInitialized() const {
  return true;
}

void CommQueryRequest::Swap(CommQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommQueryRequest::InternalSwap(CommQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queryparas_.InternalSwap(CastToBase(&other->queryparas_));
  templatename_.Swap(&other->templatename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CommQueryRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DBRow::InitAsDefaultInstance() {
}
class DBRow::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBRow::kDbRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBRow::DBRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.DBRow)
}
DBRow::DBRow(const DBRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dbrow_(from.dbrow_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.DBRow)
}

void DBRow::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DBRow_SvrMsg_2eproto.base);
}

DBRow::~DBRow() {
  // @@protoc_insertion_point(destructor:SvrMsg.DBRow)
  SharedDtor();
}

void DBRow::SharedDtor() {
}

void DBRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBRow& DBRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DBRow_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void DBRow::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.DBRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbrow_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBRow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DBRow*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes dbRow = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_dbrow();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          str->append(ptr, size);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.DBRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes dbRow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_dbrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.DBRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.DBRow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.DBRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes dbRow = 1;
  for (int i = 0, n = this->dbrow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->dbrow(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.DBRow)
}

::google::protobuf::uint8* DBRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.DBRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes dbRow = 1;
  for (int i = 0, n = this->dbrow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->dbrow(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.DBRow)
  return target;
}

size_t DBRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.DBRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes dbRow = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dbrow_size());
  for (int i = 0, n = this->dbrow_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->dbrow(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.DBRow)
  GOOGLE_DCHECK_NE(&from, this);
  const DBRow* source =
      ::google::protobuf::DynamicCastToGenerated<DBRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.DBRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.DBRow)
    MergeFrom(*source);
  }
}

void DBRow::MergeFrom(const DBRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.DBRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dbrow_.MergeFrom(from.dbrow_);
}

void DBRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.DBRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRow::CopyFrom(const DBRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.DBRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRow::IsInitialized() const {
  return true;
}

void DBRow::Swap(DBRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBRow::InternalSwap(DBRow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dbrow_.InternalSwap(CastToBase(&other->dbrow_));
}

::google::protobuf::Metadata DBRow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommQueryResponse::InitAsDefaultInstance() {
}
class CommQueryResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommQueryResponse::kQueryResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommQueryResponse::CommQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CommQueryResponse)
}
CommQueryResponse::CommQueryResponse(const CommQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queryresult_(from.queryresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CommQueryResponse)
}

void CommQueryResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommQueryResponse_SvrMsg_2eproto.base);
}

CommQueryResponse::~CommQueryResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.CommQueryResponse)
  SharedDtor();
}

void CommQueryResponse::SharedDtor() {
}

void CommQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommQueryResponse& CommQueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommQueryResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CommQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CommQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryresult_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommQueryResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommQueryResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .SvrMsg.DBRow queryResult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SvrMsg::DBRow::_InternalParse;
          object = msg->add_queryresult();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CommQueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SvrMsg.DBRow queryResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_queryresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CommQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CommQueryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CommQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SvrMsg.DBRow queryResult = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queryresult_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->queryresult(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CommQueryResponse)
}

::google::protobuf::uint8* CommQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CommQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SvrMsg.DBRow queryResult = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queryresult_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->queryresult(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CommQueryResponse)
  return target;
}

size_t CommQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CommQueryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SvrMsg.DBRow queryResult = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->queryresult_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queryresult(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CommQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommQueryResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CommQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CommQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CommQueryResponse)
    MergeFrom(*source);
  }
}

void CommQueryResponse::MergeFrom(const CommQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CommQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queryresult_.MergeFrom(from.queryresult_);
}

void CommQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CommQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommQueryResponse::CopyFrom(const CommQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CommQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommQueryResponse::IsInitialized() const {
  return true;
}

void CommQueryResponse::Swap(CommQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommQueryResponse::InternalSwap(CommQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&queryresult_)->InternalSwap(CastToBase(&other->queryresult_));
}

::google::protobuf::Metadata CommQueryResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerGameResult::InitAsDefaultInstance() {
}
class PlayerGameResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerGameResult::kUserIdFieldNumber;
const int PlayerGameResult::kChipsIncreaseFieldNumber;
const int PlayerGameResult::kExpIncreaseFieldNumber;
const int PlayerGameResult::kStatusMaskFieldNumber;
const int PlayerGameResult::kChipsWinPoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerGameResult::PlayerGameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.PlayerGameResult)
}
PlayerGameResult::PlayerGameResult(const PlayerGameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chipsincrease_, &from.chipsincrease_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusmask_) -
    reinterpret_cast<char*>(&chipsincrease_)) + sizeof(statusmask_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.PlayerGameResult)
}

void PlayerGameResult::SharedCtor() {
  ::memset(&chipsincrease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusmask_) -
      reinterpret_cast<char*>(&chipsincrease_)) + sizeof(statusmask_));
}

PlayerGameResult::~PlayerGameResult() {
  // @@protoc_insertion_point(destructor:SvrMsg.PlayerGameResult)
  SharedDtor();
}

void PlayerGameResult::SharedDtor() {
}

void PlayerGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerGameResult& PlayerGameResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerGameResult_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void PlayerGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.PlayerGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chipsincrease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusmask_) -
      reinterpret_cast<char*>(&chipsincrease_)) + sizeof(statusmask_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerGameResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerGameResult*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 chipsIncrease = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipsincrease(value);
        break;
      }
      // int32 expIncrease = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_expincrease(value);
        break;
      }
      // int32 statusMask = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_statusmask(value);
        break;
      }
      // int64 chipsWinPool = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipswinpool(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.PlayerGameResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chipsIncrease = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipsincrease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expIncrease = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expincrease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 statusMask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chipsWinPool = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipswinpool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.PlayerGameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.PlayerGameResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.PlayerGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 chipsIncrease = 2;
  if (this->chipsincrease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chipsincrease(), output);
  }

  // int32 expIncrease = 3;
  if (this->expincrease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expincrease(), output);
  }

  // int32 statusMask = 4;
  if (this->statusmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->statusmask(), output);
  }

  // int64 chipsWinPool = 5;
  if (this->chipswinpool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->chipswinpool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.PlayerGameResult)
}

::google::protobuf::uint8* PlayerGameResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.PlayerGameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 chipsIncrease = 2;
  if (this->chipsincrease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chipsincrease(), target);
  }

  // int32 expIncrease = 3;
  if (this->expincrease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expincrease(), target);
  }

  // int32 statusMask = 4;
  if (this->statusmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->statusmask(), target);
  }

  // int64 chipsWinPool = 5;
  if (this->chipswinpool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->chipswinpool(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.PlayerGameResult)
  return target;
}

size_t PlayerGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.PlayerGameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 chipsIncrease = 2;
  if (this->chipsincrease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chipsincrease());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 expIncrease = 3;
  if (this->expincrease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expincrease());
  }

  // int64 chipsWinPool = 5;
  if (this->chipswinpool() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chipswinpool());
  }

  // int32 statusMask = 4;
  if (this->statusmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statusmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerGameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.PlayerGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerGameResult* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerGameResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.PlayerGameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.PlayerGameResult)
    MergeFrom(*source);
  }
}

void PlayerGameResult::MergeFrom(const PlayerGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.PlayerGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chipsincrease() != 0) {
    set_chipsincrease(from.chipsincrease());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.expincrease() != 0) {
    set_expincrease(from.expincrease());
  }
  if (from.chipswinpool() != 0) {
    set_chipswinpool(from.chipswinpool());
  }
  if (from.statusmask() != 0) {
    set_statusmask(from.statusmask());
  }
}

void PlayerGameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.PlayerGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGameResult::CopyFrom(const PlayerGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.PlayerGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGameResult::IsInitialized() const {
  return true;
}

void PlayerGameResult::Swap(PlayerGameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerGameResult::InternalSwap(PlayerGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chipsincrease_, other->chipsincrease_);
  swap(userid_, other->userid_);
  swap(expincrease_, other->expincrease_);
  swap(chipswinpool_, other->chipswinpool_);
  swap(statusmask_, other->statusmask_);
}

::google::protobuf::Metadata PlayerGameResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubmitGameResultRequest::InitAsDefaultInstance() {
}
class SubmitGameResultRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitGameResultRequest::kGameIdFieldNumber;
const int SubmitGameResultRequest::kGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitGameResultRequest::SubmitGameResultRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.SubmitGameResultRequest)
}
SubmitGameResultRequest::SubmitGameResultRequest(const SubmitGameResultRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gameresult_(from.gameresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  // @@protoc_insertion_point(copy_constructor:SvrMsg.SubmitGameResultRequest)
}

void SubmitGameResultRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SubmitGameResultRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubmitGameResultRequest::~SubmitGameResultRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.SubmitGameResultRequest)
  SharedDtor();
}

void SubmitGameResultRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitGameResultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitGameResultRequest& SubmitGameResultRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmitGameResultRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void SubmitGameResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.SubmitGameResultRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameresult_.Clear();
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitGameResultRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmitGameResultRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated .SvrMsg.PlayerGameResult gameResult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SvrMsg::PlayerGameResult::_InternalParse;
          object = msg->add_gameresult();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitGameResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.SubmitGameResultRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SvrMsg.PlayerGameResult gameResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gameresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.SubmitGameResultRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.SubmitGameResultRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitGameResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.SubmitGameResultRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gameId = 1;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gameid(), output);
  }

  // repeated .SvrMsg.PlayerGameResult gameResult = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameresult_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->gameresult(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.SubmitGameResultRequest)
}

::google::protobuf::uint8* SubmitGameResultRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.SubmitGameResultRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gameId = 1;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gameid(), target);
  }

  // repeated .SvrMsg.PlayerGameResult gameResult = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameresult_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->gameresult(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.SubmitGameResultRequest)
  return target;
}

size_t SubmitGameResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.SubmitGameResultRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SvrMsg.PlayerGameResult gameResult = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gameresult_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gameresult(static_cast<int>(i)));
    }
  }

  // bytes gameId = 1;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitGameResultRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.SubmitGameResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitGameResultRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubmitGameResultRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.SubmitGameResultRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.SubmitGameResultRequest)
    MergeFrom(*source);
  }
}

void SubmitGameResultRequest::MergeFrom(const SubmitGameResultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.SubmitGameResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameresult_.MergeFrom(from.gameresult_);
  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
}

void SubmitGameResultRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.SubmitGameResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitGameResultRequest::CopyFrom(const SubmitGameResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.SubmitGameResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitGameResultRequest::IsInitialized() const {
  return true;
}

void SubmitGameResultRequest::Swap(SubmitGameResultRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitGameResultRequest::InternalSwap(SubmitGameResultRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&gameresult_)->InternalSwap(CastToBase(&other->gameresult_));
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SubmitGameResultRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubmitGameResultResponse::InitAsDefaultInstance() {
}
class SubmitGameResultResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitGameResultResponse::SubmitGameResultResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.SubmitGameResultResponse)
}
SubmitGameResultResponse::SubmitGameResultResponse(const SubmitGameResultResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.SubmitGameResultResponse)
}

void SubmitGameResultResponse::SharedCtor() {
}

SubmitGameResultResponse::~SubmitGameResultResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.SubmitGameResultResponse)
  SharedDtor();
}

void SubmitGameResultResponse::SharedDtor() {
}

void SubmitGameResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitGameResultResponse& SubmitGameResultResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmitGameResultResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void SubmitGameResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.SubmitGameResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitGameResultResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmitGameResultResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitGameResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.SubmitGameResultResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.SubmitGameResultResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.SubmitGameResultResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitGameResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.SubmitGameResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.SubmitGameResultResponse)
}

::google::protobuf::uint8* SubmitGameResultResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.SubmitGameResultResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.SubmitGameResultResponse)
  return target;
}

size_t SubmitGameResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.SubmitGameResultResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitGameResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.SubmitGameResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitGameResultResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SubmitGameResultResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.SubmitGameResultResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.SubmitGameResultResponse)
    MergeFrom(*source);
  }
}

void SubmitGameResultResponse::MergeFrom(const SubmitGameResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.SubmitGameResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubmitGameResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.SubmitGameResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitGameResultResponse::CopyFrom(const SubmitGameResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.SubmitGameResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitGameResultResponse::IsInitialized() const {
  return true;
}

void SubmitGameResultResponse::Swap(SubmitGameResultResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitGameResultResponse::InternalSwap(SubmitGameResultResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitGameResultResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddPlayerChipsRequest::InitAsDefaultInstance() {
}
class AddPlayerChipsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayerChipsRequest::kUserIdFieldNumber;
const int AddPlayerChipsRequest::kChipsAddCountFieldNumber;
const int AddPlayerChipsRequest::kAddReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayerChipsRequest::AddPlayerChipsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.AddPlayerChipsRequest)
}
AddPlayerChipsRequest::AddPlayerChipsRequest(const AddPlayerChipsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chipsaddcount_, &from.chipsaddcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&addreason_) -
    reinterpret_cast<char*>(&chipsaddcount_)) + sizeof(addreason_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.AddPlayerChipsRequest)
}

void AddPlayerChipsRequest::SharedCtor() {
  ::memset(&chipsaddcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addreason_) -
      reinterpret_cast<char*>(&chipsaddcount_)) + sizeof(addreason_));
}

AddPlayerChipsRequest::~AddPlayerChipsRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.AddPlayerChipsRequest)
  SharedDtor();
}

void AddPlayerChipsRequest::SharedDtor() {
}

void AddPlayerChipsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPlayerChipsRequest& AddPlayerChipsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddPlayerChipsRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void AddPlayerChipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.AddPlayerChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chipsaddcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addreason_) -
      reinterpret_cast<char*>(&chipsaddcount_)) + sizeof(addreason_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddPlayerChipsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddPlayerChipsRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 chipsAddCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipsaddcount(value);
        break;
      }
      // int32 addReason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_addreason(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddPlayerChipsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.AddPlayerChipsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chipsAddCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipsaddcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 addReason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.AddPlayerChipsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.AddPlayerChipsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddPlayerChipsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.AddPlayerChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 chipsAddCount = 2;
  if (this->chipsaddcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chipsaddcount(), output);
  }

  // int32 addReason = 3;
  if (this->addreason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.AddPlayerChipsRequest)
}

::google::protobuf::uint8* AddPlayerChipsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.AddPlayerChipsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 chipsAddCount = 2;
  if (this->chipsaddcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chipsaddcount(), target);
  }

  // int32 addReason = 3;
  if (this->addreason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.AddPlayerChipsRequest)
  return target;
}

size_t AddPlayerChipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.AddPlayerChipsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 chipsAddCount = 2;
  if (this->chipsaddcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chipsaddcount());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 addReason = 3;
  if (this->addreason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addreason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlayerChipsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.AddPlayerChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlayerChipsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddPlayerChipsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.AddPlayerChipsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.AddPlayerChipsRequest)
    MergeFrom(*source);
  }
}

void AddPlayerChipsRequest::MergeFrom(const AddPlayerChipsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.AddPlayerChipsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chipsaddcount() != 0) {
    set_chipsaddcount(from.chipsaddcount());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.addreason() != 0) {
    set_addreason(from.addreason());
  }
}

void AddPlayerChipsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.AddPlayerChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerChipsRequest::CopyFrom(const AddPlayerChipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.AddPlayerChipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerChipsRequest::IsInitialized() const {
  return true;
}

void AddPlayerChipsRequest::Swap(AddPlayerChipsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayerChipsRequest::InternalSwap(AddPlayerChipsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chipsaddcount_, other->chipsaddcount_);
  swap(userid_, other->userid_);
  swap(addreason_, other->addreason_);
}

::google::protobuf::Metadata AddPlayerChipsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddPlayerChipsResponse::InitAsDefaultInstance() {
}
class AddPlayerChipsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPlayerChipsResponse::kCurrentChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPlayerChipsResponse::AddPlayerChipsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.AddPlayerChipsResponse)
}
AddPlayerChipsResponse::AddPlayerChipsResponse(const AddPlayerChipsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currentchips_ = from.currentchips_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.AddPlayerChipsResponse)
}

void AddPlayerChipsResponse::SharedCtor() {
  currentchips_ = PROTOBUF_LONGLONG(0);
}

AddPlayerChipsResponse::~AddPlayerChipsResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.AddPlayerChipsResponse)
  SharedDtor();
}

void AddPlayerChipsResponse::SharedDtor() {
}

void AddPlayerChipsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPlayerChipsResponse& AddPlayerChipsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddPlayerChipsResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void AddPlayerChipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.AddPlayerChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currentchips_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddPlayerChipsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddPlayerChipsResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 currentChips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentchips(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddPlayerChipsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.AddPlayerChipsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 currentChips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.AddPlayerChipsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.AddPlayerChipsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddPlayerChipsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.AddPlayerChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 currentChips = 1;
  if (this->currentchips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->currentchips(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.AddPlayerChipsResponse)
}

::google::protobuf::uint8* AddPlayerChipsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.AddPlayerChipsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 currentChips = 1;
  if (this->currentchips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->currentchips(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.AddPlayerChipsResponse)
  return target;
}

size_t AddPlayerChipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.AddPlayerChipsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 currentChips = 1;
  if (this->currentchips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->currentchips());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlayerChipsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.AddPlayerChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlayerChipsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddPlayerChipsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.AddPlayerChipsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.AddPlayerChipsResponse)
    MergeFrom(*source);
  }
}

void AddPlayerChipsResponse::MergeFrom(const AddPlayerChipsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.AddPlayerChipsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentchips() != 0) {
    set_currentchips(from.currentchips());
  }
}

void AddPlayerChipsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.AddPlayerChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerChipsResponse::CopyFrom(const AddPlayerChipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.AddPlayerChipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerChipsResponse::IsInitialized() const {
  return true;
}

void AddPlayerChipsResponse::Swap(AddPlayerChipsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPlayerChipsResponse::InternalSwap(AddPlayerChipsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currentchips_, other->currentchips_);
}

::google::protobuf::Metadata AddPlayerChipsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserJoinGameRequest::InitAsDefaultInstance() {
}
class UserJoinGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserJoinGameRequest::kUserIdFieldNumber;
const int UserJoinGameRequest::kRoomIdFieldNumber;
const int UserJoinGameRequest::kSmallBlindFieldNumber;
const int UserJoinGameRequest::kPlayingCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserJoinGameRequest::UserJoinGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserJoinGameRequest)
}
UserJoinGameRequest::UserJoinGameRequest(const UserJoinGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playingcount_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserJoinGameRequest)
}

void UserJoinGameRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
}

UserJoinGameRequest::~UserJoinGameRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserJoinGameRequest)
  SharedDtor();
}

void UserJoinGameRequest::SharedDtor() {
}

void UserJoinGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserJoinGameRequest& UserJoinGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserJoinGameRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserJoinGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserJoinGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserJoinGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserJoinGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 smallBlind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      // int32 playingCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_playingcount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserJoinGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserJoinGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playingCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playingcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserJoinGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserJoinGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserJoinGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserJoinGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->smallblind(), output);
  }

  // int32 playingCount = 4;
  if (this->playingcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playingcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserJoinGameRequest)
}

::google::protobuf::uint8* UserJoinGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserJoinGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->smallblind(), target);
  }

  // int32 playingCount = 4;
  if (this->playingcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playingcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserJoinGameRequest)
  return target;
}

size_t UserJoinGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserJoinGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  // int32 playingCount = 4;
  if (this->playingcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playingcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserJoinGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserJoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserJoinGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserJoinGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserJoinGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserJoinGameRequest)
    MergeFrom(*source);
  }
}

void UserJoinGameRequest::MergeFrom(const UserJoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserJoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
  if (from.playingcount() != 0) {
    set_playingcount(from.playingcount());
  }
}

void UserJoinGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserJoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserJoinGameRequest::CopyFrom(const UserJoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserJoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserJoinGameRequest::IsInitialized() const {
  return true;
}

void UserJoinGameRequest::Swap(UserJoinGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserJoinGameRequest::InternalSwap(UserJoinGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(smallblind_, other->smallblind_);
  swap(playingcount_, other->playingcount_);
}

::google::protobuf::Metadata UserJoinGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserJoinGameResponse::InitAsDefaultInstance() {
}
class UserJoinGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserJoinGameResponse::UserJoinGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserJoinGameResponse)
}
UserJoinGameResponse::UserJoinGameResponse(const UserJoinGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserJoinGameResponse)
}

void UserJoinGameResponse::SharedCtor() {
}

UserJoinGameResponse::~UserJoinGameResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserJoinGameResponse)
  SharedDtor();
}

void UserJoinGameResponse::SharedDtor() {
}

void UserJoinGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserJoinGameResponse& UserJoinGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserJoinGameResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserJoinGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserJoinGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserJoinGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserJoinGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserJoinGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserJoinGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserJoinGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserJoinGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserJoinGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserJoinGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserJoinGameResponse)
}

::google::protobuf::uint8* UserJoinGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserJoinGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserJoinGameResponse)
  return target;
}

size_t UserJoinGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserJoinGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserJoinGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserJoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserJoinGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserJoinGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserJoinGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserJoinGameResponse)
    MergeFrom(*source);
  }
}

void UserJoinGameResponse::MergeFrom(const UserJoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserJoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserJoinGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserJoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserJoinGameResponse::CopyFrom(const UserJoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserJoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserJoinGameResponse::IsInitialized() const {
  return true;
}

void UserJoinGameResponse::Swap(UserJoinGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserJoinGameResponse::InternalSwap(UserJoinGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserJoinGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLeaveGameRequest::InitAsDefaultInstance() {
}
class UserLeaveGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLeaveGameRequest::kUserIdFieldNumber;
const int UserLeaveGameRequest::kRoomIdFieldNumber;
const int UserLeaveGameRequest::kPlayingCountFieldNumber;
const int UserLeaveGameRequest::kGiveBackChipsFieldNumber;
const int UserLeaveGameRequest::kSmallBlindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLeaveGameRequest::UserLeaveGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserLeaveGameRequest)
}
UserLeaveGameRequest::UserLeaveGameRequest(const UserLeaveGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playingcount_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserLeaveGameRequest)
}

void UserLeaveGameRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
}

UserLeaveGameRequest::~UserLeaveGameRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserLeaveGameRequest)
  SharedDtor();
}

void UserLeaveGameRequest::SharedDtor() {
}

void UserLeaveGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLeaveGameRequest& UserLeaveGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLeaveGameRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserLeaveGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserLeaveGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLeaveGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLeaveGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int32 playingCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_playingcount(value);
        break;
      }
      // int64 giveBackChips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_givebackchips(value);
        break;
      }
      // int64 smallBlind = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLeaveGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserLeaveGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playingCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playingcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 giveBackChips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &givebackchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserLeaveGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserLeaveGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLeaveGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserLeaveGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playingcount(), output);
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->givebackchips(), output);
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->smallblind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserLeaveGameRequest)
}

::google::protobuf::uint8* UserLeaveGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserLeaveGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playingcount(), target);
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->givebackchips(), target);
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->smallblind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserLeaveGameRequest)
  return target;
}

size_t UserLeaveGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserLeaveGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->givebackchips());
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playingcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLeaveGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserLeaveGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLeaveGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserLeaveGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserLeaveGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserLeaveGameRequest)
    MergeFrom(*source);
  }
}

void UserLeaveGameRequest::MergeFrom(const UserLeaveGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserLeaveGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.givebackchips() != 0) {
    set_givebackchips(from.givebackchips());
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
  if (from.playingcount() != 0) {
    set_playingcount(from.playingcount());
  }
}

void UserLeaveGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserLeaveGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeaveGameRequest::CopyFrom(const UserLeaveGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserLeaveGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveGameRequest::IsInitialized() const {
  return true;
}

void UserLeaveGameRequest::Swap(UserLeaveGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLeaveGameRequest::InternalSwap(UserLeaveGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(givebackchips_, other->givebackchips_);
  swap(smallblind_, other->smallblind_);
  swap(playingcount_, other->playingcount_);
}

::google::protobuf::Metadata UserLeaveGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLeaveGameResponse::InitAsDefaultInstance() {
}
class UserLeaveGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLeaveGameResponse::UserLeaveGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserLeaveGameResponse)
}
UserLeaveGameResponse::UserLeaveGameResponse(const UserLeaveGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserLeaveGameResponse)
}

void UserLeaveGameResponse::SharedCtor() {
}

UserLeaveGameResponse::~UserLeaveGameResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserLeaveGameResponse)
  SharedDtor();
}

void UserLeaveGameResponse::SharedDtor() {
}

void UserLeaveGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLeaveGameResponse& UserLeaveGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLeaveGameResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserLeaveGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserLeaveGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLeaveGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLeaveGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLeaveGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserLeaveGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserLeaveGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserLeaveGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLeaveGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserLeaveGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserLeaveGameResponse)
}

::google::protobuf::uint8* UserLeaveGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserLeaveGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserLeaveGameResponse)
  return target;
}

size_t UserLeaveGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserLeaveGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLeaveGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserLeaveGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLeaveGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserLeaveGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserLeaveGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserLeaveGameResponse)
    MergeFrom(*source);
  }
}

void UserLeaveGameResponse::MergeFrom(const UserLeaveGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserLeaveGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserLeaveGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserLeaveGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeaveGameResponse::CopyFrom(const UserLeaveGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserLeaveGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveGameResponse::IsInitialized() const {
  return true;
}

void UserLeaveGameResponse::Swap(UserLeaveGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLeaveGameResponse::InternalSwap(UserLeaveGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserLeaveGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserEnterRoomRequest::InitAsDefaultInstance() {
}
class UserEnterRoomRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEnterRoomRequest::kUserIdFieldNumber;
const int UserEnterRoomRequest::kRoomIdFieldNumber;
const int UserEnterRoomRequest::kSmallBlindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEnterRoomRequest::UserEnterRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserEnterRoomRequest)
}
UserEnterRoomRequest::UserEnterRoomRequest(const UserEnterRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserEnterRoomRequest)
}

void UserEnterRoomRequest::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
}

UserEnterRoomRequest::~UserEnterRoomRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserEnterRoomRequest)
  SharedDtor();
}

void UserEnterRoomRequest::SharedDtor() {
}

void UserEnterRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEnterRoomRequest& UserEnterRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserEnterRoomRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserEnterRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEnterRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserEnterRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 smallBlind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserEnterRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserEnterRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserEnterRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->smallblind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserEnterRoomRequest)
}

::google::protobuf::uint8* UserEnterRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserEnterRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->smallblind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserEnterRoomRequest)
  return target;
}

size_t UserEnterRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserEnterRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEnterRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserEnterRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserEnterRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserEnterRoomRequest)
    MergeFrom(*source);
  }
}

void UserEnterRoomRequest::MergeFrom(const UserEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserEnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void UserEnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEnterRoomRequest::CopyFrom(const UserEnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserEnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterRoomRequest::IsInitialized() const {
  return true;
}

void UserEnterRoomRequest::Swap(UserEnterRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEnterRoomRequest::InternalSwap(UserEnterRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
  swap(smallblind_, other->smallblind_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata UserEnterRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserEnterRoomResponse::InitAsDefaultInstance() {
}
class UserEnterRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEnterRoomResponse::UserEnterRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserEnterRoomResponse)
}
UserEnterRoomResponse::UserEnterRoomResponse(const UserEnterRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserEnterRoomResponse)
}

void UserEnterRoomResponse::SharedCtor() {
}

UserEnterRoomResponse::~UserEnterRoomResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserEnterRoomResponse)
  SharedDtor();
}

void UserEnterRoomResponse::SharedDtor() {
}

void UserEnterRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEnterRoomResponse& UserEnterRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserEnterRoomResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserEnterRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEnterRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserEnterRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEnterRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserEnterRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserEnterRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserEnterRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEnterRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserEnterRoomResponse)
}

::google::protobuf::uint8* UserEnterRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserEnterRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserEnterRoomResponse)
  return target;
}

size_t UserEnterRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserEnterRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEnterRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEnterRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserEnterRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserEnterRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserEnterRoomResponse)
    MergeFrom(*source);
  }
}

void UserEnterRoomResponse::MergeFrom(const UserEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserEnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserEnterRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEnterRoomResponse::CopyFrom(const UserEnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserEnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterRoomResponse::IsInitialized() const {
  return true;
}

void UserEnterRoomResponse::Swap(UserEnterRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEnterRoomResponse::InternalSwap(UserEnterRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserEnterRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserQuitRoomRequest::InitAsDefaultInstance() {
}
class UserQuitRoomRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserQuitRoomRequest::kUserIdFieldNumber;
const int UserQuitRoomRequest::kRoomIdFieldNumber;
const int UserQuitRoomRequest::kPlayingCountFieldNumber;
const int UserQuitRoomRequest::kGiveBackChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserQuitRoomRequest::UserQuitRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserQuitRoomRequest)
}
UserQuitRoomRequest::UserQuitRoomRequest(const UserQuitRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playingcount_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserQuitRoomRequest)
}

void UserQuitRoomRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
}

UserQuitRoomRequest::~UserQuitRoomRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserQuitRoomRequest)
  SharedDtor();
}

void UserQuitRoomRequest::SharedDtor() {
}

void UserQuitRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQuitRoomRequest& UserQuitRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserQuitRoomRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserQuitRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playingcount_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(playingcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserQuitRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserQuitRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int32 playingCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_playingcount(value);
        break;
      }
      // int64 giveBackChips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_givebackchips(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserQuitRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserQuitRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playingCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playingcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 giveBackChips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &givebackchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserQuitRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserQuitRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserQuitRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playingcount(), output);
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->givebackchips(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserQuitRoomRequest)
}

::google::protobuf::uint8* UserQuitRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserQuitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playingcount(), target);
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->givebackchips(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserQuitRoomRequest)
  return target;
}

size_t UserQuitRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserQuitRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 giveBackChips = 4;
  if (this->givebackchips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->givebackchips());
  }

  // int32 playingCount = 3;
  if (this->playingcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playingcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQuitRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQuitRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserQuitRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserQuitRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserQuitRoomRequest)
    MergeFrom(*source);
  }
}

void UserQuitRoomRequest::MergeFrom(const UserQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserQuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.givebackchips() != 0) {
    set_givebackchips(from.givebackchips());
  }
  if (from.playingcount() != 0) {
    set_playingcount(from.playingcount());
  }
}

void UserQuitRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuitRoomRequest::CopyFrom(const UserQuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserQuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuitRoomRequest::IsInitialized() const {
  return true;
}

void UserQuitRoomRequest::Swap(UserQuitRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserQuitRoomRequest::InternalSwap(UserQuitRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(givebackchips_, other->givebackchips_);
  swap(playingcount_, other->playingcount_);
}

::google::protobuf::Metadata UserQuitRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserQuitRoomResponse::InitAsDefaultInstance() {
}
class UserQuitRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserQuitRoomResponse::UserQuitRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserQuitRoomResponse)
}
UserQuitRoomResponse::UserQuitRoomResponse(const UserQuitRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserQuitRoomResponse)
}

void UserQuitRoomResponse::SharedCtor() {
}

UserQuitRoomResponse::~UserQuitRoomResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserQuitRoomResponse)
  SharedDtor();
}

void UserQuitRoomResponse::SharedDtor() {
}

void UserQuitRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQuitRoomResponse& UserQuitRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserQuitRoomResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserQuitRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserQuitRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserQuitRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserQuitRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserQuitRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserQuitRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserQuitRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserQuitRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserQuitRoomResponse)
}

::google::protobuf::uint8* UserQuitRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserQuitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserQuitRoomResponse)
  return target;
}

size_t UserQuitRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserQuitRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQuitRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQuitRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserQuitRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserQuitRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserQuitRoomResponse)
    MergeFrom(*source);
  }
}

void UserQuitRoomResponse::MergeFrom(const UserQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserQuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserQuitRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuitRoomResponse::CopyFrom(const UserQuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserQuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuitRoomResponse::IsInitialized() const {
  return true;
}

void UserQuitRoomResponse::Swap(UserQuitRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserQuitRoomResponse::InternalSwap(UserQuitRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserQuitRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSvrStartRequest::InitAsDefaultInstance() {
}
class GameSvrStartRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSvrStartRequest::kGamesvrIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSvrStartRequest::GameSvrStartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameSvrStartRequest)
}
GameSvrStartRequest::GameSvrStartRequest(const GameSvrStartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesvrid_ = from.gamesvrid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameSvrStartRequest)
}

void GameSvrStartRequest::SharedCtor() {
  gamesvrid_ = 0;
}

GameSvrStartRequest::~GameSvrStartRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameSvrStartRequest)
  SharedDtor();
}

void GameSvrStartRequest::SharedDtor() {
}

void GameSvrStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSvrStartRequest& GameSvrStartRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSvrStartRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameSvrStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameSvrStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesvrid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSvrStartRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSvrStartRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 gamesvrId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gamesvrid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSvrStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameSvrStartRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gamesvrId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamesvrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameSvrStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameSvrStartRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSvrStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameSvrStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamesvrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameSvrStartRequest)
}

::google::protobuf::uint8* GameSvrStartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameSvrStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamesvrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameSvrStartRequest)
  return target;
}

size_t GameSvrStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameSvrStartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamesvrid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSvrStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameSvrStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSvrStartRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameSvrStartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameSvrStartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameSvrStartRequest)
    MergeFrom(*source);
  }
}

void GameSvrStartRequest::MergeFrom(const GameSvrStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameSvrStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesvrid() != 0) {
    set_gamesvrid(from.gamesvrid());
  }
}

void GameSvrStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameSvrStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSvrStartRequest::CopyFrom(const GameSvrStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameSvrStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSvrStartRequest::IsInitialized() const {
  return true;
}

void GameSvrStartRequest::Swap(GameSvrStartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSvrStartRequest::InternalSwap(GameSvrStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gamesvrid_, other->gamesvrid_);
}

::google::protobuf::Metadata GameSvrStartRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSvrStartResponse::InitAsDefaultInstance() {
}
class GameSvrStartResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSvrStartResponse::GameSvrStartResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameSvrStartResponse)
}
GameSvrStartResponse::GameSvrStartResponse(const GameSvrStartResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameSvrStartResponse)
}

void GameSvrStartResponse::SharedCtor() {
}

GameSvrStartResponse::~GameSvrStartResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameSvrStartResponse)
  SharedDtor();
}

void GameSvrStartResponse::SharedDtor() {
}

void GameSvrStartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSvrStartResponse& GameSvrStartResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSvrStartResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameSvrStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameSvrStartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSvrStartResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSvrStartResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSvrStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameSvrStartResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameSvrStartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameSvrStartResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSvrStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameSvrStartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameSvrStartResponse)
}

::google::protobuf::uint8* GameSvrStartResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameSvrStartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameSvrStartResponse)
  return target;
}

size_t GameSvrStartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameSvrStartResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSvrStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameSvrStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSvrStartResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameSvrStartResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameSvrStartResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameSvrStartResponse)
    MergeFrom(*source);
  }
}

void GameSvrStartResponse::MergeFrom(const GameSvrStartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameSvrStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameSvrStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameSvrStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSvrStartResponse::CopyFrom(const GameSvrStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameSvrStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSvrStartResponse::IsInitialized() const {
  return true;
}

void GameSvrStartResponse::Swap(GameSvrStartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSvrStartResponse::InternalSwap(GameSvrStartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameSvrStartResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OpenGameRoomRequest::InitAsDefaultInstance() {
}
class OpenGameRoomRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenGameRoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenGameRoomRequest::OpenGameRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.OpenGameRoomRequest)
}
OpenGameRoomRequest::OpenGameRoomRequest(const OpenGameRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.OpenGameRoomRequest)
}

void OpenGameRoomRequest::SharedCtor() {
  roomid_ = 0;
}

OpenGameRoomRequest::~OpenGameRoomRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.OpenGameRoomRequest)
  SharedDtor();
}

void OpenGameRoomRequest::SharedDtor() {
}

void OpenGameRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenGameRoomRequest& OpenGameRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OpenGameRoomRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void OpenGameRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.OpenGameRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenGameRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OpenGameRoomRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenGameRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.OpenGameRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.OpenGameRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.OpenGameRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenGameRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.OpenGameRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.OpenGameRoomRequest)
}

::google::protobuf::uint8* OpenGameRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.OpenGameRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.OpenGameRoomRequest)
  return target;
}

size_t OpenGameRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.OpenGameRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenGameRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.OpenGameRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenGameRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OpenGameRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.OpenGameRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.OpenGameRoomRequest)
    MergeFrom(*source);
  }
}

void OpenGameRoomRequest::MergeFrom(const OpenGameRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.OpenGameRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void OpenGameRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.OpenGameRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGameRoomRequest::CopyFrom(const OpenGameRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.OpenGameRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGameRoomRequest::IsInitialized() const {
  return true;
}

void OpenGameRoomRequest::Swap(OpenGameRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenGameRoomRequest::InternalSwap(OpenGameRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata OpenGameRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OpenGameRoomResponse::InitAsDefaultInstance() {
}
class OpenGameRoomResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenGameRoomResponse::OpenGameRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.OpenGameRoomResponse)
}
OpenGameRoomResponse::OpenGameRoomResponse(const OpenGameRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.OpenGameRoomResponse)
}

void OpenGameRoomResponse::SharedCtor() {
}

OpenGameRoomResponse::~OpenGameRoomResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.OpenGameRoomResponse)
  SharedDtor();
}

void OpenGameRoomResponse::SharedDtor() {
}

void OpenGameRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenGameRoomResponse& OpenGameRoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OpenGameRoomResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void OpenGameRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.OpenGameRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenGameRoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OpenGameRoomResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenGameRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.OpenGameRoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.OpenGameRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.OpenGameRoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenGameRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.OpenGameRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.OpenGameRoomResponse)
}

::google::protobuf::uint8* OpenGameRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.OpenGameRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.OpenGameRoomResponse)
  return target;
}

size_t OpenGameRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.OpenGameRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenGameRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.OpenGameRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenGameRoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OpenGameRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.OpenGameRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.OpenGameRoomResponse)
    MergeFrom(*source);
  }
}

void OpenGameRoomResponse::MergeFrom(const OpenGameRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.OpenGameRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OpenGameRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.OpenGameRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGameRoomResponse::CopyFrom(const OpenGameRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.OpenGameRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGameRoomResponse::IsInitialized() const {
  return true;
}

void OpenGameRoomResponse::Swap(OpenGameRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenGameRoomResponse::InternalSwap(OpenGameRoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenGameRoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameRoomEmptyRequest::InitAsDefaultInstance() {
}
class GameRoomEmptyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRoomEmptyRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRoomEmptyRequest::GameRoomEmptyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameRoomEmptyRequest)
}
GameRoomEmptyRequest::GameRoomEmptyRequest(const GameRoomEmptyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameRoomEmptyRequest)
}

void GameRoomEmptyRequest::SharedCtor() {
  roomid_ = 0;
}

GameRoomEmptyRequest::~GameRoomEmptyRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameRoomEmptyRequest)
  SharedDtor();
}

void GameRoomEmptyRequest::SharedDtor() {
}

void GameRoomEmptyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameRoomEmptyRequest& GameRoomEmptyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameRoomEmptyRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameRoomEmptyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameRoomEmptyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameRoomEmptyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameRoomEmptyRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameRoomEmptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameRoomEmptyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameRoomEmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameRoomEmptyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameRoomEmptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameRoomEmptyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameRoomEmptyRequest)
}

::google::protobuf::uint8* GameRoomEmptyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameRoomEmptyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameRoomEmptyRequest)
  return target;
}

size_t GameRoomEmptyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameRoomEmptyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameRoomEmptyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameRoomEmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRoomEmptyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameRoomEmptyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameRoomEmptyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameRoomEmptyRequest)
    MergeFrom(*source);
  }
}

void GameRoomEmptyRequest::MergeFrom(const GameRoomEmptyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameRoomEmptyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void GameRoomEmptyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameRoomEmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomEmptyRequest::CopyFrom(const GameRoomEmptyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameRoomEmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomEmptyRequest::IsInitialized() const {
  return true;
}

void GameRoomEmptyRequest::Swap(GameRoomEmptyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRoomEmptyRequest::InternalSwap(GameRoomEmptyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata GameRoomEmptyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameRoomEmptyResponse::InitAsDefaultInstance() {
}
class GameRoomEmptyResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameRoomEmptyResponse::kNeedCloseRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameRoomEmptyResponse::GameRoomEmptyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameRoomEmptyResponse)
}
GameRoomEmptyResponse::GameRoomEmptyResponse(const GameRoomEmptyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  needcloseroom_ = from.needcloseroom_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameRoomEmptyResponse)
}

void GameRoomEmptyResponse::SharedCtor() {
  needcloseroom_ = 0;
}

GameRoomEmptyResponse::~GameRoomEmptyResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameRoomEmptyResponse)
  SharedDtor();
}

void GameRoomEmptyResponse::SharedDtor() {
}

void GameRoomEmptyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameRoomEmptyResponse& GameRoomEmptyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameRoomEmptyResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameRoomEmptyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameRoomEmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needcloseroom_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameRoomEmptyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameRoomEmptyResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 needCloseRoom = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_needcloseroom(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameRoomEmptyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameRoomEmptyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 needCloseRoom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcloseroom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameRoomEmptyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameRoomEmptyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameRoomEmptyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameRoomEmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 needCloseRoom = 1;
  if (this->needcloseroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needcloseroom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameRoomEmptyResponse)
}

::google::protobuf::uint8* GameRoomEmptyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameRoomEmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 needCloseRoom = 1;
  if (this->needcloseroom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needcloseroom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameRoomEmptyResponse)
  return target;
}

size_t GameRoomEmptyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameRoomEmptyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 needCloseRoom = 1;
  if (this->needcloseroom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->needcloseroom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameRoomEmptyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameRoomEmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameRoomEmptyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameRoomEmptyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameRoomEmptyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameRoomEmptyResponse)
    MergeFrom(*source);
  }
}

void GameRoomEmptyResponse::MergeFrom(const GameRoomEmptyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameRoomEmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.needcloseroom() != 0) {
    set_needcloseroom(from.needcloseroom());
  }
}

void GameRoomEmptyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameRoomEmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomEmptyResponse::CopyFrom(const GameRoomEmptyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameRoomEmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomEmptyResponse::IsInitialized() const {
  return true;
}

void GameRoomEmptyResponse::Swap(GameRoomEmptyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameRoomEmptyResponse::InternalSwap(GameRoomEmptyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(needcloseroom_, other->needcloseroom_);
}

::google::protobuf::Metadata GameRoomEmptyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSvrAliveRequest::InitAsDefaultInstance() {
}
class GameSvrAliveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSvrAliveRequest::kGamesvrIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSvrAliveRequest::GameSvrAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameSvrAliveRequest)
}
GameSvrAliveRequest::GameSvrAliveRequest(const GameSvrAliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesvrid_ = from.gamesvrid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameSvrAliveRequest)
}

void GameSvrAliveRequest::SharedCtor() {
  gamesvrid_ = 0;
}

GameSvrAliveRequest::~GameSvrAliveRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameSvrAliveRequest)
  SharedDtor();
}

void GameSvrAliveRequest::SharedDtor() {
}

void GameSvrAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSvrAliveRequest& GameSvrAliveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSvrAliveRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameSvrAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameSvrAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesvrid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSvrAliveRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSvrAliveRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 gamesvrId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gamesvrid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSvrAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameSvrAliveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gamesvrId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamesvrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameSvrAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameSvrAliveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSvrAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameSvrAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamesvrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameSvrAliveRequest)
}

::google::protobuf::uint8* GameSvrAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameSvrAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamesvrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameSvrAliveRequest)
  return target;
}

size_t GameSvrAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameSvrAliveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gamesvrId = 1;
  if (this->gamesvrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamesvrid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSvrAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameSvrAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSvrAliveRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameSvrAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameSvrAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameSvrAliveRequest)
    MergeFrom(*source);
  }
}

void GameSvrAliveRequest::MergeFrom(const GameSvrAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameSvrAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesvrid() != 0) {
    set_gamesvrid(from.gamesvrid());
  }
}

void GameSvrAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameSvrAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSvrAliveRequest::CopyFrom(const GameSvrAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameSvrAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSvrAliveRequest::IsInitialized() const {
  return true;
}

void GameSvrAliveRequest::Swap(GameSvrAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSvrAliveRequest::InternalSwap(GameSvrAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gamesvrid_, other->gamesvrid_);
}

::google::protobuf::Metadata GameSvrAliveRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSvrAliveResponse::InitAsDefaultInstance() {
}
class GameSvrAliveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSvrAliveResponse::GameSvrAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameSvrAliveResponse)
}
GameSvrAliveResponse::GameSvrAliveResponse(const GameSvrAliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameSvrAliveResponse)
}

void GameSvrAliveResponse::SharedCtor() {
}

GameSvrAliveResponse::~GameSvrAliveResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameSvrAliveResponse)
  SharedDtor();
}

void GameSvrAliveResponse::SharedDtor() {
}

void GameSvrAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSvrAliveResponse& GameSvrAliveResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSvrAliveResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameSvrAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameSvrAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSvrAliveResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSvrAliveResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSvrAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameSvrAliveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameSvrAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameSvrAliveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSvrAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameSvrAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameSvrAliveResponse)
}

::google::protobuf::uint8* GameSvrAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameSvrAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameSvrAliveResponse)
  return target;
}

size_t GameSvrAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameSvrAliveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSvrAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameSvrAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSvrAliveResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameSvrAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameSvrAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameSvrAliveResponse)
    MergeFrom(*source);
  }
}

void GameSvrAliveResponse::MergeFrom(const GameSvrAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameSvrAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameSvrAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameSvrAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSvrAliveResponse::CopyFrom(const GameSvrAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameSvrAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSvrAliveResponse::IsInitialized() const {
  return true;
}

void GameSvrAliveResponse::Swap(GameSvrAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSvrAliveResponse::InternalSwap(GameSvrAliveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameSvrAliveResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HallStartUpRequest::InitAsDefaultInstance() {
}
class HallStartUpRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HallStartUpRequest::HallStartUpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.HallStartUpRequest)
}
HallStartUpRequest::HallStartUpRequest(const HallStartUpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.HallStartUpRequest)
}

void HallStartUpRequest::SharedCtor() {
}

HallStartUpRequest::~HallStartUpRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.HallStartUpRequest)
  SharedDtor();
}

void HallStartUpRequest::SharedDtor() {
}

void HallStartUpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HallStartUpRequest& HallStartUpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HallStartUpRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void HallStartUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.HallStartUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HallStartUpRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HallStartUpRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HallStartUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.HallStartUpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.HallStartUpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.HallStartUpRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HallStartUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.HallStartUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.HallStartUpRequest)
}

::google::protobuf::uint8* HallStartUpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.HallStartUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.HallStartUpRequest)
  return target;
}

size_t HallStartUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.HallStartUpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HallStartUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.HallStartUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HallStartUpRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HallStartUpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.HallStartUpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.HallStartUpRequest)
    MergeFrom(*source);
  }
}

void HallStartUpRequest::MergeFrom(const HallStartUpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.HallStartUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HallStartUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.HallStartUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallStartUpRequest::CopyFrom(const HallStartUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.HallStartUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallStartUpRequest::IsInitialized() const {
  return true;
}

void HallStartUpRequest::Swap(HallStartUpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallStartUpRequest::InternalSwap(HallStartUpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HallStartUpRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HallStartUpResponse::InitAsDefaultInstance() {
}
class HallStartUpResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HallStartUpResponse::HallStartUpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.HallStartUpResponse)
}
HallStartUpResponse::HallStartUpResponse(const HallStartUpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.HallStartUpResponse)
}

void HallStartUpResponse::SharedCtor() {
}

HallStartUpResponse::~HallStartUpResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.HallStartUpResponse)
  SharedDtor();
}

void HallStartUpResponse::SharedDtor() {
}

void HallStartUpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HallStartUpResponse& HallStartUpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HallStartUpResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void HallStartUpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.HallStartUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HallStartUpResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HallStartUpResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HallStartUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.HallStartUpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.HallStartUpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.HallStartUpResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HallStartUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.HallStartUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.HallStartUpResponse)
}

::google::protobuf::uint8* HallStartUpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.HallStartUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.HallStartUpResponse)
  return target;
}

size_t HallStartUpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.HallStartUpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HallStartUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.HallStartUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HallStartUpResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HallStartUpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.HallStartUpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.HallStartUpResponse)
    MergeFrom(*source);
  }
}

void HallStartUpResponse::MergeFrom(const HallStartUpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.HallStartUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HallStartUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.HallStartUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallStartUpResponse::CopyFrom(const HallStartUpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.HallStartUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallStartUpResponse::IsInitialized() const {
  return true;
}

void HallStartUpResponse::Swap(HallStartUpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallStartUpResponse::InternalSwap(HallStartUpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HallStartUpResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserOnlineRequest::InitAsDefaultInstance() {
}
class FlushUserOnlineRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushUserOnlineRequest::kOnlineUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserOnlineRequest::FlushUserOnlineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserOnlineRequest)
}
FlushUserOnlineRequest::FlushUserOnlineRequest(const FlushUserOnlineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      onlineuserid_(from.onlineuserid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserOnlineRequest)
}

void FlushUserOnlineRequest::SharedCtor() {
}

FlushUserOnlineRequest::~FlushUserOnlineRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserOnlineRequest)
  SharedDtor();
}

void FlushUserOnlineRequest::SharedDtor() {
}

void FlushUserOnlineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserOnlineRequest& FlushUserOnlineRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserOnlineRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserOnlineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserOnlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onlineuserid_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserOnlineRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserOnlineRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 onlineUserId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_onlineuserid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_onlineuserid(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserOnlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserOnlineRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 onlineUserId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onlineuserid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_onlineuserid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserOnlineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserOnlineRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserOnlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserOnlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  if (this->onlineuserid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_onlineuserid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->onlineuserid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->onlineuserid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserOnlineRequest)
}

::google::protobuf::uint8* FlushUserOnlineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserOnlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  if (this->onlineuserid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _onlineuserid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->onlineuserid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserOnlineRequest)
  return target;
}

size_t FlushUserOnlineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserOnlineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->onlineuserid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _onlineuserid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserOnlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserOnlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserOnlineRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserOnlineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserOnlineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserOnlineRequest)
    MergeFrom(*source);
  }
}

void FlushUserOnlineRequest::MergeFrom(const FlushUserOnlineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserOnlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onlineuserid_.MergeFrom(from.onlineuserid_);
}

void FlushUserOnlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserOnlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserOnlineRequest::CopyFrom(const FlushUserOnlineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserOnlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserOnlineRequest::IsInitialized() const {
  return true;
}

void FlushUserOnlineRequest::Swap(FlushUserOnlineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserOnlineRequest::InternalSwap(FlushUserOnlineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  onlineuserid_.InternalSwap(&other->onlineuserid_);
}

::google::protobuf::Metadata FlushUserOnlineRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserOnlineResponse::InitAsDefaultInstance() {
}
class FlushUserOnlineResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserOnlineResponse::FlushUserOnlineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserOnlineResponse)
}
FlushUserOnlineResponse::FlushUserOnlineResponse(const FlushUserOnlineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserOnlineResponse)
}

void FlushUserOnlineResponse::SharedCtor() {
}

FlushUserOnlineResponse::~FlushUserOnlineResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserOnlineResponse)
  SharedDtor();
}

void FlushUserOnlineResponse::SharedDtor() {
}

void FlushUserOnlineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserOnlineResponse& FlushUserOnlineResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserOnlineResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserOnlineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserOnlineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserOnlineResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserOnlineResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserOnlineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserOnlineResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserOnlineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserOnlineResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserOnlineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserOnlineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserOnlineResponse)
}

::google::protobuf::uint8* FlushUserOnlineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserOnlineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserOnlineResponse)
  return target;
}

size_t FlushUserOnlineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserOnlineResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserOnlineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserOnlineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserOnlineResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserOnlineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserOnlineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserOnlineResponse)
    MergeFrom(*source);
  }
}

void FlushUserOnlineResponse::MergeFrom(const FlushUserOnlineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserOnlineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushUserOnlineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserOnlineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserOnlineResponse::CopyFrom(const FlushUserOnlineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserOnlineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserOnlineResponse::IsInitialized() const {
  return true;
}

void FlushUserOnlineResponse::Swap(FlushUserOnlineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserOnlineResponse::InternalSwap(FlushUserOnlineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlushUserOnlineResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserGameSessionRequest::InitAsDefaultInstance() {
}
class FlushUserGameSessionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushUserGameSessionRequest::kOnlineUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserGameSessionRequest::FlushUserGameSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserGameSessionRequest)
}
FlushUserGameSessionRequest::FlushUserGameSessionRequest(const FlushUserGameSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      onlineuserid_(from.onlineuserid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserGameSessionRequest)
}

void FlushUserGameSessionRequest::SharedCtor() {
}

FlushUserGameSessionRequest::~FlushUserGameSessionRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserGameSessionRequest)
  SharedDtor();
}

void FlushUserGameSessionRequest::SharedDtor() {
}

void FlushUserGameSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserGameSessionRequest& FlushUserGameSessionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserGameSessionRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserGameSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserGameSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onlineuserid_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserGameSessionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserGameSessionRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 onlineUserId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_onlineuserid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_onlineuserid(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserGameSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserGameSessionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 onlineUserId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onlineuserid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_onlineuserid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserGameSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserGameSessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserGameSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserGameSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  if (this->onlineuserid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_onlineuserid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->onlineuserid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->onlineuserid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserGameSessionRequest)
}

::google::protobuf::uint8* FlushUserGameSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserGameSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  if (this->onlineuserid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _onlineuserid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->onlineuserid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserGameSessionRequest)
  return target;
}

size_t FlushUserGameSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserGameSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 onlineUserId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->onlineuserid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _onlineuserid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserGameSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserGameSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserGameSessionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserGameSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserGameSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserGameSessionRequest)
    MergeFrom(*source);
  }
}

void FlushUserGameSessionRequest::MergeFrom(const FlushUserGameSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserGameSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onlineuserid_.MergeFrom(from.onlineuserid_);
}

void FlushUserGameSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserGameSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserGameSessionRequest::CopyFrom(const FlushUserGameSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserGameSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserGameSessionRequest::IsInitialized() const {
  return true;
}

void FlushUserGameSessionRequest::Swap(FlushUserGameSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserGameSessionRequest::InternalSwap(FlushUserGameSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  onlineuserid_.InternalSwap(&other->onlineuserid_);
}

::google::protobuf::Metadata FlushUserGameSessionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserGameSessionResponse::InitAsDefaultInstance() {
}
class FlushUserGameSessionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserGameSessionResponse::FlushUserGameSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserGameSessionResponse)
}
FlushUserGameSessionResponse::FlushUserGameSessionResponse(const FlushUserGameSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserGameSessionResponse)
}

void FlushUserGameSessionResponse::SharedCtor() {
}

FlushUserGameSessionResponse::~FlushUserGameSessionResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserGameSessionResponse)
  SharedDtor();
}

void FlushUserGameSessionResponse::SharedDtor() {
}

void FlushUserGameSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserGameSessionResponse& FlushUserGameSessionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserGameSessionResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserGameSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserGameSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserGameSessionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserGameSessionResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserGameSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserGameSessionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserGameSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserGameSessionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserGameSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserGameSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserGameSessionResponse)
}

::google::protobuf::uint8* FlushUserGameSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserGameSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserGameSessionResponse)
  return target;
}

size_t FlushUserGameSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserGameSessionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserGameSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserGameSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserGameSessionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserGameSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserGameSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserGameSessionResponse)
    MergeFrom(*source);
  }
}

void FlushUserGameSessionResponse::MergeFrom(const FlushUserGameSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserGameSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushUserGameSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserGameSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserGameSessionResponse::CopyFrom(const FlushUserGameSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserGameSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserGameSessionResponse::IsInitialized() const {
  return true;
}

void FlushUserGameSessionResponse::Swap(FlushUserGameSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserGameSessionResponse::InternalSwap(FlushUserGameSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlushUserGameSessionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserGameStatus::InitAsDefaultInstance() {
}
class UserGameStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameStatus::kUserIdFieldNumber;
const int UserGameStatus::kRoomIdFieldNumber;
const int UserGameStatus::kGameStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameStatus::UserGameStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserGameStatus)
}
UserGameStatus::UserGameStatus(const UserGameStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamestatus_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(gamestatus_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserGameStatus)
}

void UserGameStatus::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestatus_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(gamestatus_));
}

UserGameStatus::~UserGameStatus() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserGameStatus)
  SharedDtor();
}

void UserGameStatus::SharedDtor() {
}

void UserGameStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserGameStatus& UserGameStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserGameStatus_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserGameStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserGameStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestatus_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(gamestatus_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserGameStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserGameStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int32 gameStatus = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gamestatus(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserGameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserGameStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gameStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserGameStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserGameStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserGameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserGameStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int32 gameStatus = 3;
  if (this->gamestatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamestatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserGameStatus)
}

::google::protobuf::uint8* UserGameStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserGameStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int32 gameStatus = 3;
  if (this->gamestatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamestatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserGameStatus)
  return target;
}

size_t UserGameStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserGameStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int32 gameStatus = 3;
  if (this->gamestatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamestatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGameStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameStatus* source =
      ::google::protobuf::DynamicCastToGenerated<UserGameStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserGameStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserGameStatus)
    MergeFrom(*source);
  }
}

void UserGameStatus::MergeFrom(const UserGameStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserGameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.gamestatus() != 0) {
    set_gamestatus(from.gamestatus());
  }
}

void UserGameStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameStatus::CopyFrom(const UserGameStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserGameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameStatus::IsInitialized() const {
  return true;
}

void UserGameStatus::Swap(UserGameStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameStatus::InternalSwap(UserGameStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(gamestatus_, other->gamestatus_);
}

::google::protobuf::Metadata UserGameStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserInGameRequest::InitAsDefaultInstance() {
}
class FlushUserInGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushUserInGameRequest::kGamePlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserInGameRequest::FlushUserInGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserInGameRequest)
}
FlushUserInGameRequest::FlushUserInGameRequest(const FlushUserInGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gameplayer_(from.gameplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserInGameRequest)
}

void FlushUserInGameRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlushUserInGameRequest_SvrMsg_2eproto.base);
}

FlushUserInGameRequest::~FlushUserInGameRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserInGameRequest)
  SharedDtor();
}

void FlushUserInGameRequest::SharedDtor() {
}

void FlushUserInGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserInGameRequest& FlushUserInGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserInGameRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserInGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserInGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameplayer_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserInGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserInGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SvrMsg::UserGameStatus::_InternalParse;
          object = msg->add_gameplayer();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserInGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserInGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gameplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserInGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserInGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserInGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserInGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gameplayer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserInGameRequest)
}

::google::protobuf::uint8* FlushUserInGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserInGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gameplayer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserInGameRequest)
  return target;
}

size_t FlushUserInGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserInGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SvrMsg.UserGameStatus gamePlayer = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gameplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gameplayer(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserInGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserInGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserInGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserInGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserInGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserInGameRequest)
    MergeFrom(*source);
  }
}

void FlushUserInGameRequest::MergeFrom(const FlushUserInGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserInGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameplayer_.MergeFrom(from.gameplayer_);
}

void FlushUserInGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserInGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserInGameRequest::CopyFrom(const FlushUserInGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserInGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserInGameRequest::IsInitialized() const {
  return true;
}

void FlushUserInGameRequest::Swap(FlushUserInGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserInGameRequest::InternalSwap(FlushUserInGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&gameplayer_)->InternalSwap(CastToBase(&other->gameplayer_));
}

::google::protobuf::Metadata FlushUserInGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlushUserInGameResponse::InitAsDefaultInstance() {
}
class FlushUserInGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushUserInGameResponse::FlushUserInGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.FlushUserInGameResponse)
}
FlushUserInGameResponse::FlushUserInGameResponse(const FlushUserInGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.FlushUserInGameResponse)
}

void FlushUserInGameResponse::SharedCtor() {
}

FlushUserInGameResponse::~FlushUserInGameResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.FlushUserInGameResponse)
  SharedDtor();
}

void FlushUserInGameResponse::SharedDtor() {
}

void FlushUserInGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushUserInGameResponse& FlushUserInGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlushUserInGameResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void FlushUserInGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.FlushUserInGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushUserInGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlushUserInGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushUserInGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.FlushUserInGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.FlushUserInGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.FlushUserInGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushUserInGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.FlushUserInGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.FlushUserInGameResponse)
}

::google::protobuf::uint8* FlushUserInGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.FlushUserInGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.FlushUserInGameResponse)
  return target;
}

size_t FlushUserInGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.FlushUserInGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushUserInGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.FlushUserInGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushUserInGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FlushUserInGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.FlushUserInGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.FlushUserInGameResponse)
    MergeFrom(*source);
  }
}

void FlushUserInGameResponse::MergeFrom(const FlushUserInGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.FlushUserInGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushUserInGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.FlushUserInGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushUserInGameResponse::CopyFrom(const FlushUserInGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.FlushUserInGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushUserInGameResponse::IsInitialized() const {
  return true;
}

void FlushUserInGameResponse::Swap(FlushUserInGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushUserInGameResponse::InternalSwap(FlushUserInGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlushUserInGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TellUserOfflineRequest::InitAsDefaultInstance() {
}
class TellUserOfflineRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TellUserOfflineRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TellUserOfflineRequest::TellUserOfflineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.TellUserOfflineRequest)
}
TellUserOfflineRequest::TellUserOfflineRequest(const TellUserOfflineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.TellUserOfflineRequest)
}

void TellUserOfflineRequest::SharedCtor() {
  userid_ = 0;
}

TellUserOfflineRequest::~TellUserOfflineRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.TellUserOfflineRequest)
  SharedDtor();
}

void TellUserOfflineRequest::SharedDtor() {
}

void TellUserOfflineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TellUserOfflineRequest& TellUserOfflineRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TellUserOfflineRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void TellUserOfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.TellUserOfflineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TellUserOfflineRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TellUserOfflineRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TellUserOfflineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.TellUserOfflineRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.TellUserOfflineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.TellUserOfflineRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TellUserOfflineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.TellUserOfflineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.TellUserOfflineRequest)
}

::google::protobuf::uint8* TellUserOfflineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.TellUserOfflineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.TellUserOfflineRequest)
  return target;
}

size_t TellUserOfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.TellUserOfflineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TellUserOfflineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.TellUserOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TellUserOfflineRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TellUserOfflineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.TellUserOfflineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.TellUserOfflineRequest)
    MergeFrom(*source);
  }
}

void TellUserOfflineRequest::MergeFrom(const TellUserOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.TellUserOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void TellUserOfflineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.TellUserOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellUserOfflineRequest::CopyFrom(const TellUserOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.TellUserOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellUserOfflineRequest::IsInitialized() const {
  return true;
}

void TellUserOfflineRequest::Swap(TellUserOfflineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TellUserOfflineRequest::InternalSwap(TellUserOfflineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata TellUserOfflineRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TellUserOfflineResponse::InitAsDefaultInstance() {
}
class TellUserOfflineResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TellUserOfflineResponse::TellUserOfflineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.TellUserOfflineResponse)
}
TellUserOfflineResponse::TellUserOfflineResponse(const TellUserOfflineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.TellUserOfflineResponse)
}

void TellUserOfflineResponse::SharedCtor() {
}

TellUserOfflineResponse::~TellUserOfflineResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.TellUserOfflineResponse)
  SharedDtor();
}

void TellUserOfflineResponse::SharedDtor() {
}

void TellUserOfflineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TellUserOfflineResponse& TellUserOfflineResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TellUserOfflineResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void TellUserOfflineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.TellUserOfflineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TellUserOfflineResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TellUserOfflineResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TellUserOfflineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.TellUserOfflineResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.TellUserOfflineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.TellUserOfflineResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TellUserOfflineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.TellUserOfflineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.TellUserOfflineResponse)
}

::google::protobuf::uint8* TellUserOfflineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.TellUserOfflineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.TellUserOfflineResponse)
  return target;
}

size_t TellUserOfflineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.TellUserOfflineResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TellUserOfflineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.TellUserOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TellUserOfflineResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TellUserOfflineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.TellUserOfflineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.TellUserOfflineResponse)
    MergeFrom(*source);
  }
}

void TellUserOfflineResponse::MergeFrom(const TellUserOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.TellUserOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TellUserOfflineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.TellUserOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellUserOfflineResponse::CopyFrom(const TellUserOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.TellUserOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellUserOfflineResponse::IsInitialized() const {
  return true;
}

void TellUserOfflineResponse::Swap(TellUserOfflineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TellUserOfflineResponse::InternalSwap(TellUserOfflineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TellUserOfflineResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TellUserLogoutGameRequest::InitAsDefaultInstance() {
}
class TellUserLogoutGameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TellUserLogoutGameRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TellUserLogoutGameRequest::TellUserLogoutGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.TellUserLogoutGameRequest)
}
TellUserLogoutGameRequest::TellUserLogoutGameRequest(const TellUserLogoutGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.TellUserLogoutGameRequest)
}

void TellUserLogoutGameRequest::SharedCtor() {
  userid_ = 0;
}

TellUserLogoutGameRequest::~TellUserLogoutGameRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.TellUserLogoutGameRequest)
  SharedDtor();
}

void TellUserLogoutGameRequest::SharedDtor() {
}

void TellUserLogoutGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TellUserLogoutGameRequest& TellUserLogoutGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TellUserLogoutGameRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void TellUserLogoutGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.TellUserLogoutGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TellUserLogoutGameRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TellUserLogoutGameRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TellUserLogoutGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.TellUserLogoutGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.TellUserLogoutGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.TellUserLogoutGameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TellUserLogoutGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.TellUserLogoutGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.TellUserLogoutGameRequest)
}

::google::protobuf::uint8* TellUserLogoutGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.TellUserLogoutGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.TellUserLogoutGameRequest)
  return target;
}

size_t TellUserLogoutGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.TellUserLogoutGameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TellUserLogoutGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.TellUserLogoutGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TellUserLogoutGameRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TellUserLogoutGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.TellUserLogoutGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.TellUserLogoutGameRequest)
    MergeFrom(*source);
  }
}

void TellUserLogoutGameRequest::MergeFrom(const TellUserLogoutGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.TellUserLogoutGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void TellUserLogoutGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.TellUserLogoutGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellUserLogoutGameRequest::CopyFrom(const TellUserLogoutGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.TellUserLogoutGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellUserLogoutGameRequest::IsInitialized() const {
  return true;
}

void TellUserLogoutGameRequest::Swap(TellUserLogoutGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TellUserLogoutGameRequest::InternalSwap(TellUserLogoutGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata TellUserLogoutGameRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TellUserLogoutGameResponse::InitAsDefaultInstance() {
}
class TellUserLogoutGameResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TellUserLogoutGameResponse::TellUserLogoutGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.TellUserLogoutGameResponse)
}
TellUserLogoutGameResponse::TellUserLogoutGameResponse(const TellUserLogoutGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.TellUserLogoutGameResponse)
}

void TellUserLogoutGameResponse::SharedCtor() {
}

TellUserLogoutGameResponse::~TellUserLogoutGameResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.TellUserLogoutGameResponse)
  SharedDtor();
}

void TellUserLogoutGameResponse::SharedDtor() {
}

void TellUserLogoutGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TellUserLogoutGameResponse& TellUserLogoutGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TellUserLogoutGameResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void TellUserLogoutGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.TellUserLogoutGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TellUserLogoutGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TellUserLogoutGameResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TellUserLogoutGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.TellUserLogoutGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.TellUserLogoutGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.TellUserLogoutGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TellUserLogoutGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.TellUserLogoutGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.TellUserLogoutGameResponse)
}

::google::protobuf::uint8* TellUserLogoutGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.TellUserLogoutGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.TellUserLogoutGameResponse)
  return target;
}

size_t TellUserLogoutGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.TellUserLogoutGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TellUserLogoutGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.TellUserLogoutGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TellUserLogoutGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TellUserLogoutGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.TellUserLogoutGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.TellUserLogoutGameResponse)
    MergeFrom(*source);
  }
}

void TellUserLogoutGameResponse::MergeFrom(const TellUserLogoutGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.TellUserLogoutGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TellUserLogoutGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.TellUserLogoutGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellUserLogoutGameResponse::CopyFrom(const TellUserLogoutGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.TellUserLogoutGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellUserLogoutGameResponse::IsInitialized() const {
  return true;
}

void TellUserLogoutGameResponse::Swap(TellUserLogoutGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TellUserLogoutGameResponse::InternalSwap(TellUserLogoutGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TellUserLogoutGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DispatchUserMsgRequest::InitAsDefaultInstance() {
}
class DispatchUserMsgRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispatchUserMsgRequest::kJsonStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispatchUserMsgRequest::DispatchUserMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.DispatchUserMsgRequest)
}
DispatchUserMsgRequest::DispatchUserMsgRequest(const DispatchUserMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jsonstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jsonstring().size() > 0) {
    jsonstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonstring_);
  }
  // @@protoc_insertion_point(copy_constructor:SvrMsg.DispatchUserMsgRequest)
}

void DispatchUserMsgRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DispatchUserMsgRequest_SvrMsg_2eproto.base);
  jsonstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DispatchUserMsgRequest::~DispatchUserMsgRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.DispatchUserMsgRequest)
  SharedDtor();
}

void DispatchUserMsgRequest::SharedDtor() {
  jsonstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DispatchUserMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DispatchUserMsgRequest& DispatchUserMsgRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DispatchUserMsgRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void DispatchUserMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.DispatchUserMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsonstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DispatchUserMsgRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DispatchUserMsgRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes jsonString = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_jsonstring();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DispatchUserMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.DispatchUserMsgRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes jsonString = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jsonstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.DispatchUserMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.DispatchUserMsgRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DispatchUserMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.DispatchUserMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->jsonstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.DispatchUserMsgRequest)
}

::google::protobuf::uint8* DispatchUserMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.DispatchUserMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->jsonstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.DispatchUserMsgRequest)
  return target;
}

size_t DispatchUserMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.DispatchUserMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->jsonstring());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispatchUserMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.DispatchUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DispatchUserMsgRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DispatchUserMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.DispatchUserMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.DispatchUserMsgRequest)
    MergeFrom(*source);
  }
}

void DispatchUserMsgRequest::MergeFrom(const DispatchUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.DispatchUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jsonstring().size() > 0) {

    jsonstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonstring_);
  }
}

void DispatchUserMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.DispatchUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchUserMsgRequest::CopyFrom(const DispatchUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.DispatchUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchUserMsgRequest::IsInitialized() const {
  return true;
}

void DispatchUserMsgRequest::Swap(DispatchUserMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispatchUserMsgRequest::InternalSwap(DispatchUserMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsonstring_.Swap(&other->jsonstring_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DispatchUserMsgRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DispatchUserMsgResponse::InitAsDefaultInstance() {
}
class DispatchUserMsgResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispatchUserMsgResponse::kJsonStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispatchUserMsgResponse::DispatchUserMsgResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.DispatchUserMsgResponse)
}
DispatchUserMsgResponse::DispatchUserMsgResponse(const DispatchUserMsgResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jsonstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jsonstring().size() > 0) {
    jsonstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonstring_);
  }
  // @@protoc_insertion_point(copy_constructor:SvrMsg.DispatchUserMsgResponse)
}

void DispatchUserMsgResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DispatchUserMsgResponse_SvrMsg_2eproto.base);
  jsonstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DispatchUserMsgResponse::~DispatchUserMsgResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.DispatchUserMsgResponse)
  SharedDtor();
}

void DispatchUserMsgResponse::SharedDtor() {
  jsonstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DispatchUserMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DispatchUserMsgResponse& DispatchUserMsgResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DispatchUserMsgResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void DispatchUserMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.DispatchUserMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsonstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DispatchUserMsgResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DispatchUserMsgResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes jsonString = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_jsonstring();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DispatchUserMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.DispatchUserMsgResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes jsonString = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jsonstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.DispatchUserMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.DispatchUserMsgResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DispatchUserMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.DispatchUserMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->jsonstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.DispatchUserMsgResponse)
}

::google::protobuf::uint8* DispatchUserMsgResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.DispatchUserMsgResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->jsonstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.DispatchUserMsgResponse)
  return target;
}

size_t DispatchUserMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.DispatchUserMsgResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes jsonString = 1;
  if (this->jsonstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->jsonstring());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispatchUserMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.DispatchUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DispatchUserMsgResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DispatchUserMsgResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.DispatchUserMsgResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.DispatchUserMsgResponse)
    MergeFrom(*source);
  }
}

void DispatchUserMsgResponse::MergeFrom(const DispatchUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.DispatchUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jsonstring().size() > 0) {

    jsonstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jsonstring_);
  }
}

void DispatchUserMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.DispatchUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchUserMsgResponse::CopyFrom(const DispatchUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.DispatchUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchUserMsgResponse::IsInitialized() const {
  return true;
}

void DispatchUserMsgResponse::Swap(DispatchUserMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispatchUserMsgResponse::InternalSwap(DispatchUserMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsonstring_.Swap(&other->jsonstring_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DispatchUserMsgResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HallLoginRecordRequest::InitAsDefaultInstance() {
}
class HallLoginRecordRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HallLoginRecordRequest::kUserIdFieldNumber;
const int HallLoginRecordRequest::kPidFieldNumber;
const int HallLoginRecordRequest::kTimeFieldNumber;
const int HallLoginRecordRequest::kActionFieldNumber;
const int HallLoginRecordRequest::kRemoteAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HallLoginRecordRequest::HallLoginRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.HallLoginRecordRequest)
}
HallLoginRecordRequest::HallLoginRecordRequest(const HallLoginRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remoteaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remoteaddr().size() > 0) {
    remoteaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteaddr_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.HallLoginRecordRequest)
}

void HallLoginRecordRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HallLoginRecordRequest_SvrMsg_2eproto.base);
  remoteaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(action_));
}

HallLoginRecordRequest::~HallLoginRecordRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.HallLoginRecordRequest)
  SharedDtor();
}

void HallLoginRecordRequest::SharedDtor() {
  remoteaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HallLoginRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HallLoginRecordRequest& HallLoginRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HallLoginRecordRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void HallLoginRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.HallLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remoteaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HallLoginRecordRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HallLoginRecordRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_pid(value);
        break;
      }
      // int32 time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_time(value);
        break;
      }
      // int32 action = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_action(value);
        break;
      }
      // bytes remoteAddr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_remoteaddr();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HallLoginRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.HallLoginRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes remoteAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remoteaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.HallLoginRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.HallLoginRecordRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HallLoginRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.HallLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->remoteaddr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.HallLoginRecordRequest)
}

::google::protobuf::uint8* HallLoginRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.HallLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->remoteaddr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.HallLoginRecordRequest)
  return target;
}

size_t HallLoginRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.HallLoginRecordRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->remoteaddr());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HallLoginRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.HallLoginRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HallLoginRecordRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HallLoginRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.HallLoginRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.HallLoginRecordRequest)
    MergeFrom(*source);
  }
}

void HallLoginRecordRequest::MergeFrom(const HallLoginRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.HallLoginRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remoteaddr().size() > 0) {

    remoteaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteaddr_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void HallLoginRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.HallLoginRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallLoginRecordRequest::CopyFrom(const HallLoginRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.HallLoginRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallLoginRecordRequest::IsInitialized() const {
  return true;
}

void HallLoginRecordRequest::Swap(HallLoginRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallLoginRecordRequest::InternalSwap(HallLoginRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remoteaddr_.Swap(&other->remoteaddr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(pid_, other->pid_);
  swap(time_, other->time_);
  swap(action_, other->action_);
}

::google::protobuf::Metadata HallLoginRecordRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HallLoginRecordResponse::InitAsDefaultInstance() {
}
class HallLoginRecordResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HallLoginRecordResponse::HallLoginRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.HallLoginRecordResponse)
}
HallLoginRecordResponse::HallLoginRecordResponse(const HallLoginRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.HallLoginRecordResponse)
}

void HallLoginRecordResponse::SharedCtor() {
}

HallLoginRecordResponse::~HallLoginRecordResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.HallLoginRecordResponse)
  SharedDtor();
}

void HallLoginRecordResponse::SharedDtor() {
}

void HallLoginRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HallLoginRecordResponse& HallLoginRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HallLoginRecordResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void HallLoginRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.HallLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HallLoginRecordResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HallLoginRecordResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HallLoginRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.HallLoginRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.HallLoginRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.HallLoginRecordResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HallLoginRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.HallLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.HallLoginRecordResponse)
}

::google::protobuf::uint8* HallLoginRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.HallLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.HallLoginRecordResponse)
  return target;
}

size_t HallLoginRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.HallLoginRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HallLoginRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.HallLoginRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HallLoginRecordResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HallLoginRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.HallLoginRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.HallLoginRecordResponse)
    MergeFrom(*source);
  }
}

void HallLoginRecordResponse::MergeFrom(const HallLoginRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.HallLoginRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HallLoginRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.HallLoginRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallLoginRecordResponse::CopyFrom(const HallLoginRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.HallLoginRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallLoginRecordResponse::IsInitialized() const {
  return true;
}

void HallLoginRecordResponse::Swap(HallLoginRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallLoginRecordResponse::InternalSwap(HallLoginRecordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HallLoginRecordResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLoginRecordRequest::InitAsDefaultInstance() {
}
class GameLoginRecordRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLoginRecordRequest::kUserIdFieldNumber;
const int GameLoginRecordRequest::kPidFieldNumber;
const int GameLoginRecordRequest::kTimeFieldNumber;
const int GameLoginRecordRequest::kActionFieldNumber;
const int GameLoginRecordRequest::kRemoteAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLoginRecordRequest::GameLoginRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLoginRecordRequest)
}
GameLoginRecordRequest::GameLoginRecordRequest(const GameLoginRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remoteaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remoteaddr().size() > 0) {
    remoteaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteaddr_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLoginRecordRequest)
}

void GameLoginRecordRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLoginRecordRequest_SvrMsg_2eproto.base);
  remoteaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(action_));
}

GameLoginRecordRequest::~GameLoginRecordRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLoginRecordRequest)
  SharedDtor();
}

void GameLoginRecordRequest::SharedDtor() {
  remoteaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLoginRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLoginRecordRequest& GameLoginRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLoginRecordRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLoginRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remoteaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLoginRecordRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLoginRecordRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_pid(value);
        break;
      }
      // int32 time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_time(value);
        break;
      }
      // int32 action = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_action(value);
        break;
      }
      // bytes remoteAddr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_remoteaddr();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLoginRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLoginRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes remoteAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remoteaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLoginRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLoginRecordRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLoginRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->remoteaddr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLoginRecordRequest)
}

::google::protobuf::uint8* GameLoginRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLoginRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // int32 action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->remoteaddr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLoginRecordRequest)
  return target;
}

size_t GameLoginRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLoginRecordRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes remoteAddr = 5;
  if (this->remoteaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->remoteaddr());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLoginRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLoginRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLoginRecordRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameLoginRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLoginRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLoginRecordRequest)
    MergeFrom(*source);
  }
}

void GameLoginRecordRequest::MergeFrom(const GameLoginRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLoginRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remoteaddr().size() > 0) {

    remoteaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteaddr_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void GameLoginRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLoginRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLoginRecordRequest::CopyFrom(const GameLoginRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLoginRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLoginRecordRequest::IsInitialized() const {
  return true;
}

void GameLoginRecordRequest::Swap(GameLoginRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLoginRecordRequest::InternalSwap(GameLoginRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remoteaddr_.Swap(&other->remoteaddr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(pid_, other->pid_);
  swap(time_, other->time_);
  swap(action_, other->action_);
}

::google::protobuf::Metadata GameLoginRecordRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLoginRecordResponse::InitAsDefaultInstance() {
}
class GameLoginRecordResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLoginRecordResponse::GameLoginRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLoginRecordResponse)
}
GameLoginRecordResponse::GameLoginRecordResponse(const GameLoginRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLoginRecordResponse)
}

void GameLoginRecordResponse::SharedCtor() {
}

GameLoginRecordResponse::~GameLoginRecordResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLoginRecordResponse)
  SharedDtor();
}

void GameLoginRecordResponse::SharedDtor() {
}

void GameLoginRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLoginRecordResponse& GameLoginRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLoginRecordResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLoginRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLoginRecordResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLoginRecordResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLoginRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLoginRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLoginRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLoginRecordResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLoginRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLoginRecordResponse)
}

::google::protobuf::uint8* GameLoginRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLoginRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLoginRecordResponse)
  return target;
}

size_t GameLoginRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLoginRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLoginRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLoginRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLoginRecordResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameLoginRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLoginRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLoginRecordResponse)
    MergeFrom(*source);
  }
}

void GameLoginRecordResponse::MergeFrom(const GameLoginRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLoginRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameLoginRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLoginRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLoginRecordResponse::CopyFrom(const GameLoginRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLoginRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLoginRecordResponse::IsInitialized() const {
  return true;
}

void GameLoginRecordResponse::Swap(GameLoginRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLoginRecordResponse::InternalSwap(GameLoginRecordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameLoginRecordResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckUserTokenRequest::InitAsDefaultInstance() {
}
class CheckUserTokenRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUserTokenRequest::kUserIdFieldNumber;
const int CheckUserTokenRequest::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserTokenRequest::CheckUserTokenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CheckUserTokenRequest)
}
CheckUserTokenRequest::CheckUserTokenRequest(const CheckUserTokenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usertoken().size() > 0) {
    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CheckUserTokenRequest)
}

void CheckUserTokenRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CheckUserTokenRequest_SvrMsg_2eproto.base);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

CheckUserTokenRequest::~CheckUserTokenRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.CheckUserTokenRequest)
  SharedDtor();
}

void CheckUserTokenRequest::SharedDtor() {
  usertoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckUserTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserTokenRequest& CheckUserTokenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckUserTokenRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CheckUserTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CheckUserTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckUserTokenRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckUserTokenRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // bytes userToken = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_usertoken();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckUserTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CheckUserTokenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes userToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usertoken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CheckUserTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CheckUserTokenRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckUserTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CheckUserTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->usertoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CheckUserTokenRequest)
}

::google::protobuf::uint8* CheckUserTokenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CheckUserTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->usertoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CheckUserTokenRequest)
  return target;
}

size_t CheckUserTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CheckUserTokenRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->usertoken());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CheckUserTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserTokenRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CheckUserTokenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CheckUserTokenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CheckUserTokenRequest)
    MergeFrom(*source);
  }
}

void CheckUserTokenRequest::MergeFrom(const CheckUserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CheckUserTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usertoken().size() > 0) {

    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void CheckUserTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CheckUserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserTokenRequest::CopyFrom(const CheckUserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CheckUserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserTokenRequest::IsInitialized() const {
  return true;
}

void CheckUserTokenRequest::Swap(CheckUserTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserTokenRequest::InternalSwap(CheckUserTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usertoken_.Swap(&other->usertoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata CheckUserTokenRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckUserTokenResponse::InitAsDefaultInstance() {
}
class CheckUserTokenResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserTokenResponse::CheckUserTokenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CheckUserTokenResponse)
}
CheckUserTokenResponse::CheckUserTokenResponse(const CheckUserTokenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CheckUserTokenResponse)
}

void CheckUserTokenResponse::SharedCtor() {
}

CheckUserTokenResponse::~CheckUserTokenResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.CheckUserTokenResponse)
  SharedDtor();
}

void CheckUserTokenResponse::SharedDtor() {
}

void CheckUserTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserTokenResponse& CheckUserTokenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckUserTokenResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CheckUserTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CheckUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckUserTokenResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckUserTokenResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckUserTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CheckUserTokenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CheckUserTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CheckUserTokenResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckUserTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CheckUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CheckUserTokenResponse)
}

::google::protobuf::uint8* CheckUserTokenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CheckUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CheckUserTokenResponse)
  return target;
}

size_t CheckUserTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CheckUserTokenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CheckUserTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserTokenResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CheckUserTokenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CheckUserTokenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CheckUserTokenResponse)
    MergeFrom(*source);
  }
}

void CheckUserTokenResponse::MergeFrom(const CheckUserTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CheckUserTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckUserTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CheckUserTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserTokenResponse::CopyFrom(const CheckUserTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CheckUserTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserTokenResponse::IsInitialized() const {
  return true;
}

void CheckUserTokenResponse::Swap(CheckUserTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserTokenResponse::InternalSwap(CheckUserTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckUserTokenResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckUserLoginRequest::InitAsDefaultInstance() {
}
class CheckUserLoginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUserLoginRequest::kUserIdFieldNumber;
const int CheckUserLoginRequest::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserLoginRequest::CheckUserLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CheckUserLoginRequest)
}
CheckUserLoginRequest::CheckUserLoginRequest(const CheckUserLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usertoken().size() > 0) {
    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CheckUserLoginRequest)
}

void CheckUserLoginRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CheckUserLoginRequest_SvrMsg_2eproto.base);
  usertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

CheckUserLoginRequest::~CheckUserLoginRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.CheckUserLoginRequest)
  SharedDtor();
}

void CheckUserLoginRequest::SharedDtor() {
  usertoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckUserLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserLoginRequest& CheckUserLoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckUserLoginRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CheckUserLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CheckUserLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckUserLoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckUserLoginRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // bytes userToken = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_usertoken();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckUserLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CheckUserLoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes userToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usertoken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CheckUserLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CheckUserLoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckUserLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CheckUserLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->usertoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CheckUserLoginRequest)
}

::google::protobuf::uint8* CheckUserLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CheckUserLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->usertoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CheckUserLoginRequest)
  return target;
}

size_t CheckUserLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CheckUserLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userToken = 2;
  if (this->usertoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->usertoken());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CheckUserLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserLoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CheckUserLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CheckUserLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CheckUserLoginRequest)
    MergeFrom(*source);
  }
}

void CheckUserLoginRequest::MergeFrom(const CheckUserLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CheckUserLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usertoken().size() > 0) {

    usertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertoken_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void CheckUserLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CheckUserLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserLoginRequest::CopyFrom(const CheckUserLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CheckUserLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserLoginRequest::IsInitialized() const {
  return true;
}

void CheckUserLoginRequest::Swap(CheckUserLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserLoginRequest::InternalSwap(CheckUserLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usertoken_.Swap(&other->usertoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata CheckUserLoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckUserLoginResponse::InitAsDefaultInstance() {
}
class CheckUserLoginResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUserLoginResponse::CheckUserLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.CheckUserLoginResponse)
}
CheckUserLoginResponse::CheckUserLoginResponse(const CheckUserLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.CheckUserLoginResponse)
}

void CheckUserLoginResponse::SharedCtor() {
}

CheckUserLoginResponse::~CheckUserLoginResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.CheckUserLoginResponse)
  SharedDtor();
}

void CheckUserLoginResponse::SharedDtor() {
}

void CheckUserLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckUserLoginResponse& CheckUserLoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckUserLoginResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void CheckUserLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.CheckUserLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckUserLoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckUserLoginResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckUserLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.CheckUserLoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.CheckUserLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.CheckUserLoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckUserLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.CheckUserLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.CheckUserLoginResponse)
}

::google::protobuf::uint8* CheckUserLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.CheckUserLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.CheckUserLoginResponse)
  return target;
}

size_t CheckUserLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.CheckUserLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.CheckUserLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserLoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CheckUserLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.CheckUserLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.CheckUserLoginResponse)
    MergeFrom(*source);
  }
}

void CheckUserLoginResponse::MergeFrom(const CheckUserLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.CheckUserLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckUserLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.CheckUserLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserLoginResponse::CopyFrom(const CheckUserLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.CheckUserLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserLoginResponse::IsInitialized() const {
  return true;
}

void CheckUserLoginResponse::Swap(CheckUserLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUserLoginResponse::InternalSwap(CheckUserLoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckUserLoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KickOutUserRequest::InitAsDefaultInstance() {
}
class KickOutUserRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickOutUserRequest::kUserIdFieldNumber;
const int KickOutUserRequest::kReasonFieldNumber;
const int KickOutUserRequest::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickOutUserRequest::KickOutUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.KickOutUserRequest)
}
KickOutUserRequest::KickOutUserRequest(const KickOutUserRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.KickOutUserRequest)
}

void KickOutUserRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KickOutUserRequest_SvrMsg_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(reason_));
}

KickOutUserRequest::~KickOutUserRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.KickOutUserRequest)
  SharedDtor();
}

void KickOutUserRequest::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KickOutUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickOutUserRequest& KickOutUserRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KickOutUserRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void KickOutUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.KickOutUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KickOutUserRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KickOutUserRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_reason(value);
        break;
      }
      // bytes description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_description();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KickOutUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.KickOutUserRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.KickOutUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.KickOutUserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KickOutUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.KickOutUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  // bytes description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.KickOutUserRequest)
}

::google::protobuf::uint8* KickOutUserRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.KickOutUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  // bytes description = 3;
  if (this->description().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.KickOutUserRequest)
  return target;
}

size_t KickOutUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.KickOutUserRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickOutUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.KickOutUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickOutUserRequest* source =
      ::google::protobuf::DynamicCastToGenerated<KickOutUserRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.KickOutUserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.KickOutUserRequest)
    MergeFrom(*source);
  }
}

void KickOutUserRequest::MergeFrom(const KickOutUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.KickOutUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void KickOutUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.KickOutUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutUserRequest::CopyFrom(const KickOutUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.KickOutUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutUserRequest::IsInitialized() const {
  return true;
}

void KickOutUserRequest::Swap(KickOutUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickOutUserRequest::InternalSwap(KickOutUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(reason_, other->reason_);
}

::google::protobuf::Metadata KickOutUserRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KickOutUserResponse::InitAsDefaultInstance() {
}
class KickOutUserResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickOutUserResponse::KickOutUserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.KickOutUserResponse)
}
KickOutUserResponse::KickOutUserResponse(const KickOutUserResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.KickOutUserResponse)
}

void KickOutUserResponse::SharedCtor() {
}

KickOutUserResponse::~KickOutUserResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.KickOutUserResponse)
  SharedDtor();
}

void KickOutUserResponse::SharedDtor() {
}

void KickOutUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickOutUserResponse& KickOutUserResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KickOutUserResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void KickOutUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.KickOutUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KickOutUserResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KickOutUserResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KickOutUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.KickOutUserResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.KickOutUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.KickOutUserResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KickOutUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.KickOutUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.KickOutUserResponse)
}

::google::protobuf::uint8* KickOutUserResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.KickOutUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.KickOutUserResponse)
  return target;
}

size_t KickOutUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.KickOutUserResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickOutUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.KickOutUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KickOutUserResponse* source =
      ::google::protobuf::DynamicCastToGenerated<KickOutUserResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.KickOutUserResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.KickOutUserResponse)
    MergeFrom(*source);
  }
}

void KickOutUserResponse::MergeFrom(const KickOutUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.KickOutUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void KickOutUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.KickOutUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutUserResponse::CopyFrom(const KickOutUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.KickOutUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutUserResponse::IsInitialized() const {
  return true;
}

void KickOutUserResponse::Swap(KickOutUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickOutUserResponse::InternalSwap(KickOutUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KickOutUserResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ForbiddenUserRequest::InitAsDefaultInstance() {
}
class ForbiddenUserRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForbiddenUserRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForbiddenUserRequest::ForbiddenUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.ForbiddenUserRequest)
}
ForbiddenUserRequest::ForbiddenUserRequest(const ForbiddenUserRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.ForbiddenUserRequest)
}

void ForbiddenUserRequest::SharedCtor() {
  userid_ = 0;
}

ForbiddenUserRequest::~ForbiddenUserRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.ForbiddenUserRequest)
  SharedDtor();
}

void ForbiddenUserRequest::SharedDtor() {
}

void ForbiddenUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForbiddenUserRequest& ForbiddenUserRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ForbiddenUserRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void ForbiddenUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.ForbiddenUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForbiddenUserRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ForbiddenUserRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForbiddenUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.ForbiddenUserRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.ForbiddenUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.ForbiddenUserRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForbiddenUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.ForbiddenUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.ForbiddenUserRequest)
}

::google::protobuf::uint8* ForbiddenUserRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.ForbiddenUserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.ForbiddenUserRequest)
  return target;
}

size_t ForbiddenUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.ForbiddenUserRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForbiddenUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.ForbiddenUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForbiddenUserRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ForbiddenUserRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.ForbiddenUserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.ForbiddenUserRequest)
    MergeFrom(*source);
  }
}

void ForbiddenUserRequest::MergeFrom(const ForbiddenUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.ForbiddenUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ForbiddenUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.ForbiddenUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForbiddenUserRequest::CopyFrom(const ForbiddenUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.ForbiddenUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbiddenUserRequest::IsInitialized() const {
  return true;
}

void ForbiddenUserRequest::Swap(ForbiddenUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForbiddenUserRequest::InternalSwap(ForbiddenUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata ForbiddenUserRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ForbiddenUserResponse::InitAsDefaultInstance() {
}
class ForbiddenUserResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForbiddenUserResponse::ForbiddenUserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.ForbiddenUserResponse)
}
ForbiddenUserResponse::ForbiddenUserResponse(const ForbiddenUserResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.ForbiddenUserResponse)
}

void ForbiddenUserResponse::SharedCtor() {
}

ForbiddenUserResponse::~ForbiddenUserResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.ForbiddenUserResponse)
  SharedDtor();
}

void ForbiddenUserResponse::SharedDtor() {
}

void ForbiddenUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForbiddenUserResponse& ForbiddenUserResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ForbiddenUserResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void ForbiddenUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.ForbiddenUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForbiddenUserResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ForbiddenUserResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForbiddenUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.ForbiddenUserResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.ForbiddenUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.ForbiddenUserResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForbiddenUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.ForbiddenUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.ForbiddenUserResponse)
}

::google::protobuf::uint8* ForbiddenUserResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.ForbiddenUserResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.ForbiddenUserResponse)
  return target;
}

size_t ForbiddenUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.ForbiddenUserResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForbiddenUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.ForbiddenUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForbiddenUserResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ForbiddenUserResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.ForbiddenUserResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.ForbiddenUserResponse)
    MergeFrom(*source);
  }
}

void ForbiddenUserResponse::MergeFrom(const ForbiddenUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.ForbiddenUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ForbiddenUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.ForbiddenUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForbiddenUserResponse::CopyFrom(const ForbiddenUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.ForbiddenUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbiddenUserResponse::IsInitialized() const {
  return true;
}

void ForbiddenUserResponse::Swap(ForbiddenUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForbiddenUserResponse::InternalSwap(ForbiddenUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ForbiddenUserResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInGameCountRequest::InitAsDefaultInstance() {
}
class GetInGameCountRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInGameCountRequest::GetInGameCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GetInGameCountRequest)
}
GetInGameCountRequest::GetInGameCountRequest(const GetInGameCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GetInGameCountRequest)
}

void GetInGameCountRequest::SharedCtor() {
}

GetInGameCountRequest::~GetInGameCountRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GetInGameCountRequest)
  SharedDtor();
}

void GetInGameCountRequest::SharedDtor() {
}

void GetInGameCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInGameCountRequest& GetInGameCountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInGameCountRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GetInGameCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GetInGameCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInGameCountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInGameCountRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInGameCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GetInGameCountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GetInGameCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GetInGameCountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInGameCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GetInGameCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GetInGameCountRequest)
}

::google::protobuf::uint8* GetInGameCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GetInGameCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GetInGameCountRequest)
  return target;
}

size_t GetInGameCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GetInGameCountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInGameCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GetInGameCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInGameCountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetInGameCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GetInGameCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GetInGameCountRequest)
    MergeFrom(*source);
  }
}

void GetInGameCountRequest::MergeFrom(const GetInGameCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GetInGameCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInGameCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GetInGameCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInGameCountRequest::CopyFrom(const GetInGameCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GetInGameCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInGameCountRequest::IsInitialized() const {
  return true;
}

void GetInGameCountRequest::Swap(GetInGameCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInGameCountRequest::InternalSwap(GetInGameCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetInGameCountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInGameCountResponse::InitAsDefaultInstance() {
}
class GetInGameCountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInGameCountResponse::kLoginCountFieldNumber;
const int GetInGameCountResponse::kPlayCountFieldNumber;
const int GetInGameCountResponse::kWatchCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInGameCountResponse::GetInGameCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GetInGameCountResponse)
}
GetInGameCountResponse::GetInGameCountResponse(const GetInGameCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logincount_, &from.logincount_,
    static_cast<size_t>(reinterpret_cast<char*>(&watchcount_) -
    reinterpret_cast<char*>(&logincount_)) + sizeof(watchcount_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GetInGameCountResponse)
}

void GetInGameCountResponse::SharedCtor() {
  ::memset(&logincount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watchcount_) -
      reinterpret_cast<char*>(&logincount_)) + sizeof(watchcount_));
}

GetInGameCountResponse::~GetInGameCountResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GetInGameCountResponse)
  SharedDtor();
}

void GetInGameCountResponse::SharedDtor() {
}

void GetInGameCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInGameCountResponse& GetInGameCountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInGameCountResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GetInGameCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GetInGameCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&logincount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watchcount_) -
      reinterpret_cast<char*>(&logincount_)) + sizeof(watchcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInGameCountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInGameCountResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 loginCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_logincount(value);
        break;
      }
      // int32 playCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_playcount(value);
        break;
      }
      // int32 watchCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_watchcount(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInGameCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GetInGameCountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 loginCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 watchCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GetInGameCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GetInGameCountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInGameCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GetInGameCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 loginCount = 1;
  if (this->logincount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logincount(), output);
  }

  // int32 playCount = 2;
  if (this->playcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playcount(), output);
  }

  // int32 watchCount = 3;
  if (this->watchcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->watchcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GetInGameCountResponse)
}

::google::protobuf::uint8* GetInGameCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GetInGameCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 loginCount = 1;
  if (this->logincount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logincount(), target);
  }

  // int32 playCount = 2;
  if (this->playcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playcount(), target);
  }

  // int32 watchCount = 3;
  if (this->watchcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->watchcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GetInGameCountResponse)
  return target;
}

size_t GetInGameCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GetInGameCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 loginCount = 1;
  if (this->logincount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logincount());
  }

  // int32 playCount = 2;
  if (this->playcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playcount());
  }

  // int32 watchCount = 3;
  if (this->watchcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInGameCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GetInGameCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInGameCountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetInGameCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GetInGameCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GetInGameCountResponse)
    MergeFrom(*source);
  }
}

void GetInGameCountResponse::MergeFrom(const GetInGameCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GetInGameCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logincount() != 0) {
    set_logincount(from.logincount());
  }
  if (from.playcount() != 0) {
    set_playcount(from.playcount());
  }
  if (from.watchcount() != 0) {
    set_watchcount(from.watchcount());
  }
}

void GetInGameCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GetInGameCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInGameCountResponse::CopyFrom(const GetInGameCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GetInGameCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInGameCountResponse::IsInitialized() const {
  return true;
}

void GetInGameCountResponse::Swap(GetInGameCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInGameCountResponse::InternalSwap(GetInGameCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logincount_, other->logincount_);
  swap(playcount_, other->playcount_);
  swap(watchcount_, other->watchcount_);
}

::google::protobuf::Metadata GetInGameCountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBuyChipsInRequest::InitAsDefaultInstance() {
}
class GameBuyChipsInRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBuyChipsInRequest::kUserIdFieldNumber;
const int GameBuyChipsInRequest::kRoomIdFieldNumber;
const int GameBuyChipsInRequest::kSmallBlindFieldNumber;
const int GameBuyChipsInRequest::kBuyChipsFieldNumber;
const int GameBuyChipsInRequest::kBuyChipsMinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBuyChipsInRequest::GameBuyChipsInRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameBuyChipsInRequest)
}
GameBuyChipsInRequest::GameBuyChipsInRequest(const GameBuyChipsInRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&buychipsmin_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(buychipsmin_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameBuyChipsInRequest)
}

void GameBuyChipsInRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buychipsmin_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(buychipsmin_));
}

GameBuyChipsInRequest::~GameBuyChipsInRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameBuyChipsInRequest)
  SharedDtor();
}

void GameBuyChipsInRequest::SharedDtor() {
}

void GameBuyChipsInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBuyChipsInRequest& GameBuyChipsInRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBuyChipsInRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameBuyChipsInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameBuyChipsInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buychipsmin_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(buychipsmin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBuyChipsInRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBuyChipsInRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 smallBlind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      // int64 buyChips = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_buychips(value);
        break;
      }
      // int64 buyChipsMin = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_buychipsmin(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBuyChipsInRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameBuyChipsInRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 buyChips = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buychips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 buyChipsMin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buychipsmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameBuyChipsInRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameBuyChipsInRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBuyChipsInRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameBuyChipsInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->smallblind(), output);
  }

  // int64 buyChips = 4;
  if (this->buychips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->buychips(), output);
  }

  // int64 buyChipsMin = 5;
  if (this->buychipsmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->buychipsmin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameBuyChipsInRequest)
}

::google::protobuf::uint8* GameBuyChipsInRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameBuyChipsInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->smallblind(), target);
  }

  // int64 buyChips = 4;
  if (this->buychips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->buychips(), target);
  }

  // int64 buyChipsMin = 5;
  if (this->buychipsmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->buychipsmin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameBuyChipsInRequest)
  return target;
}

size_t GameBuyChipsInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameBuyChipsInRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 smallBlind = 3;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  // int64 buyChips = 4;
  if (this->buychips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->buychips());
  }

  // int64 buyChipsMin = 5;
  if (this->buychipsmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->buychipsmin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBuyChipsInRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameBuyChipsInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBuyChipsInRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameBuyChipsInRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameBuyChipsInRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameBuyChipsInRequest)
    MergeFrom(*source);
  }
}

void GameBuyChipsInRequest::MergeFrom(const GameBuyChipsInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameBuyChipsInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
  if (from.buychips() != 0) {
    set_buychips(from.buychips());
  }
  if (from.buychipsmin() != 0) {
    set_buychipsmin(from.buychipsmin());
  }
}

void GameBuyChipsInRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameBuyChipsInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBuyChipsInRequest::CopyFrom(const GameBuyChipsInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameBuyChipsInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBuyChipsInRequest::IsInitialized() const {
  return true;
}

void GameBuyChipsInRequest::Swap(GameBuyChipsInRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBuyChipsInRequest::InternalSwap(GameBuyChipsInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(smallblind_, other->smallblind_);
  swap(buychips_, other->buychips_);
  swap(buychipsmin_, other->buychipsmin_);
}

::google::protobuf::Metadata GameBuyChipsInRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameBuyChipsInResponse::InitAsDefaultInstance() {
}
class GameBuyChipsInResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBuyChipsInResponse::kBuyChipsRealFieldNumber;
const int GameBuyChipsInResponse::kChipsLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBuyChipsInResponse::GameBuyChipsInResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameBuyChipsInResponse)
}
GameBuyChipsInResponse::GameBuyChipsInResponse(const GameBuyChipsInResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buychipsreal_, &from.buychipsreal_,
    static_cast<size_t>(reinterpret_cast<char*>(&chipsleft_) -
    reinterpret_cast<char*>(&buychipsreal_)) + sizeof(chipsleft_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameBuyChipsInResponse)
}

void GameBuyChipsInResponse::SharedCtor() {
  ::memset(&buychipsreal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chipsleft_) -
      reinterpret_cast<char*>(&buychipsreal_)) + sizeof(chipsleft_));
}

GameBuyChipsInResponse::~GameBuyChipsInResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameBuyChipsInResponse)
  SharedDtor();
}

void GameBuyChipsInResponse::SharedDtor() {
}

void GameBuyChipsInResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameBuyChipsInResponse& GameBuyChipsInResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameBuyChipsInResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameBuyChipsInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameBuyChipsInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buychipsreal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chipsleft_) -
      reinterpret_cast<char*>(&buychipsreal_)) + sizeof(chipsleft_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameBuyChipsInResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameBuyChipsInResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 buyChipsReal = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_buychipsreal(value);
        break;
      }
      // int64 chipsLeft = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipsleft(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameBuyChipsInResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameBuyChipsInResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 buyChipsReal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buychipsreal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chipsLeft = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipsleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameBuyChipsInResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameBuyChipsInResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameBuyChipsInResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameBuyChipsInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buyChipsReal = 1;
  if (this->buychipsreal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buychipsreal(), output);
  }

  // int64 chipsLeft = 2;
  if (this->chipsleft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chipsleft(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameBuyChipsInResponse)
}

::google::protobuf::uint8* GameBuyChipsInResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameBuyChipsInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buyChipsReal = 1;
  if (this->buychipsreal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buychipsreal(), target);
  }

  // int64 chipsLeft = 2;
  if (this->chipsleft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chipsleft(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameBuyChipsInResponse)
  return target;
}

size_t GameBuyChipsInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameBuyChipsInResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buyChipsReal = 1;
  if (this->buychipsreal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->buychipsreal());
  }

  // int64 chipsLeft = 2;
  if (this->chipsleft() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chipsleft());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameBuyChipsInResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameBuyChipsInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBuyChipsInResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameBuyChipsInResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameBuyChipsInResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameBuyChipsInResponse)
    MergeFrom(*source);
  }
}

void GameBuyChipsInResponse::MergeFrom(const GameBuyChipsInResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameBuyChipsInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buychipsreal() != 0) {
    set_buychipsreal(from.buychipsreal());
  }
  if (from.chipsleft() != 0) {
    set_chipsleft(from.chipsleft());
  }
}

void GameBuyChipsInResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameBuyChipsInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBuyChipsInResponse::CopyFrom(const GameBuyChipsInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameBuyChipsInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBuyChipsInResponse::IsInitialized() const {
  return true;
}

void GameBuyChipsInResponse::Swap(GameBuyChipsInResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBuyChipsInResponse::InternalSwap(GameBuyChipsInResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(buychipsreal_, other->buychipsreal_);
  swap(chipsleft_, other->chipsleft_);
}

::google::protobuf::Metadata GameBuyChipsInResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameStartBetRequest::InitAsDefaultInstance() {
}
class GameStartBetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartBetRequest::kUserIdFieldNumber;
const int GameStartBetRequest::kRoomIdFieldNumber;
const int GameStartBetRequest::kBetChipsFieldNumber;
const int GameStartBetRequest::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartBetRequest::GameStartBetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameStartBetRequest)
}
GameStartBetRequest::GameStartBetRequest(const GameStartBetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&betchips_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(betchips_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameStartBetRequest)
}

void GameStartBetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameStartBetRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betchips_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(betchips_));
}

GameStartBetRequest::~GameStartBetRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameStartBetRequest)
  SharedDtor();
}

void GameStartBetRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameStartBetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartBetRequest& GameStartBetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameStartBetRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameStartBetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameStartBetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&betchips_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(betchips_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartBetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameStartBetRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 betChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_betchips(value);
        break;
      }
      // bytes gameId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartBetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameStartBetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 betChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betchips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameStartBetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameStartBetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartBetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameStartBetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 betChips = 3;
  if (this->betchips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->betchips(), output);
  }

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameStartBetRequest)
}

::google::protobuf::uint8* GameStartBetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameStartBetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 betChips = 3;
  if (this->betchips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->betchips(), target);
  }

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameStartBetRequest)
  return target;
}

size_t GameStartBetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameStartBetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 betChips = 3;
  if (this->betchips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->betchips());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartBetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameStartBetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartBetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameStartBetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameStartBetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameStartBetRequest)
    MergeFrom(*source);
  }
}

void GameStartBetRequest::MergeFrom(const GameStartBetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameStartBetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.betchips() != 0) {
    set_betchips(from.betchips());
  }
}

void GameStartBetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameStartBetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartBetRequest::CopyFrom(const GameStartBetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameStartBetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartBetRequest::IsInitialized() const {
  return true;
}

void GameStartBetRequest::Swap(GameStartBetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartBetRequest::InternalSwap(GameStartBetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(betchips_, other->betchips_);
}

::google::protobuf::Metadata GameStartBetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameStartBetResponse::InitAsDefaultInstance() {
}
class GameStartBetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartBetResponse::GameStartBetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameStartBetResponse)
}
GameStartBetResponse::GameStartBetResponse(const GameStartBetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameStartBetResponse)
}

void GameStartBetResponse::SharedCtor() {
}

GameStartBetResponse::~GameStartBetResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameStartBetResponse)
  SharedDtor();
}

void GameStartBetResponse::SharedDtor() {
}

void GameStartBetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartBetResponse& GameStartBetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameStartBetResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameStartBetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameStartBetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartBetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameStartBetResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartBetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameStartBetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameStartBetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameStartBetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartBetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameStartBetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameStartBetResponse)
}

::google::protobuf::uint8* GameStartBetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameStartBetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameStartBetResponse)
  return target;
}

size_t GameStartBetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameStartBetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartBetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameStartBetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartBetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameStartBetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameStartBetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameStartBetResponse)
    MergeFrom(*source);
  }
}

void GameStartBetResponse::MergeFrom(const GameStartBetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameStartBetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameStartBetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameStartBetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartBetResponse::CopyFrom(const GameStartBetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameStartBetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartBetResponse::IsInitialized() const {
  return true;
}

void GameStartBetResponse::Swap(GameStartBetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartBetResponse::InternalSwap(GameStartBetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameStartBetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameAddCarryRequest::InitAsDefaultInstance() {
}
class GameAddCarryRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAddCarryRequest::kUserIdFieldNumber;
const int GameAddCarryRequest::kRoomIdFieldNumber;
const int GameAddCarryRequest::kCurCarryChipsFieldNumber;
const int GameAddCarryRequest::kNeedAddToCarryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAddCarryRequest::GameAddCarryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameAddCarryRequest)
}
GameAddCarryRequest::GameAddCarryRequest(const GameAddCarryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needaddtocarry_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(needaddtocarry_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameAddCarryRequest)
}

void GameAddCarryRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needaddtocarry_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(needaddtocarry_));
}

GameAddCarryRequest::~GameAddCarryRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameAddCarryRequest)
  SharedDtor();
}

void GameAddCarryRequest::SharedDtor() {
}

void GameAddCarryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAddCarryRequest& GameAddCarryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameAddCarryRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameAddCarryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameAddCarryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needaddtocarry_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(needaddtocarry_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameAddCarryRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameAddCarryRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 curCarryChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_curcarrychips(value);
        break;
      }
      // int64 needAddToCarry = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_needaddtocarry(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameAddCarryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameAddCarryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 curCarryChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curcarrychips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 needAddToCarry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needaddtocarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameAddCarryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameAddCarryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameAddCarryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameAddCarryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curcarrychips(), output);
  }

  // int64 needAddToCarry = 4;
  if (this->needaddtocarry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->needaddtocarry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameAddCarryRequest)
}

::google::protobuf::uint8* GameAddCarryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameAddCarryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curcarrychips(), target);
  }

  // int64 needAddToCarry = 4;
  if (this->needaddtocarry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->needaddtocarry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameAddCarryRequest)
  return target;
}

size_t GameAddCarryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameAddCarryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curcarrychips());
  }

  // int64 needAddToCarry = 4;
  if (this->needaddtocarry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->needaddtocarry());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAddCarryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameAddCarryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAddCarryRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameAddCarryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameAddCarryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameAddCarryRequest)
    MergeFrom(*source);
  }
}

void GameAddCarryRequest::MergeFrom(const GameAddCarryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameAddCarryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.curcarrychips() != 0) {
    set_curcarrychips(from.curcarrychips());
  }
  if (from.needaddtocarry() != 0) {
    set_needaddtocarry(from.needaddtocarry());
  }
}

void GameAddCarryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameAddCarryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAddCarryRequest::CopyFrom(const GameAddCarryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameAddCarryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAddCarryRequest::IsInitialized() const {
  return true;
}

void GameAddCarryRequest::Swap(GameAddCarryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAddCarryRequest::InternalSwap(GameAddCarryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(curcarrychips_, other->curcarrychips_);
  swap(needaddtocarry_, other->needaddtocarry_);
}

::google::protobuf::Metadata GameAddCarryRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameAddCarryResponse::InitAsDefaultInstance() {
}
class GameAddCarryResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAddCarryResponse::GameAddCarryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameAddCarryResponse)
}
GameAddCarryResponse::GameAddCarryResponse(const GameAddCarryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameAddCarryResponse)
}

void GameAddCarryResponse::SharedCtor() {
}

GameAddCarryResponse::~GameAddCarryResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameAddCarryResponse)
  SharedDtor();
}

void GameAddCarryResponse::SharedDtor() {
}

void GameAddCarryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAddCarryResponse& GameAddCarryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameAddCarryResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameAddCarryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameAddCarryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameAddCarryResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameAddCarryResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameAddCarryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameAddCarryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameAddCarryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameAddCarryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameAddCarryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameAddCarryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameAddCarryResponse)
}

::google::protobuf::uint8* GameAddCarryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameAddCarryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameAddCarryResponse)
  return target;
}

size_t GameAddCarryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameAddCarryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAddCarryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameAddCarryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAddCarryResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameAddCarryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameAddCarryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameAddCarryResponse)
    MergeFrom(*source);
  }
}

void GameAddCarryResponse::MergeFrom(const GameAddCarryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameAddCarryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameAddCarryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameAddCarryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAddCarryResponse::CopyFrom(const GameAddCarryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameAddCarryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAddCarryResponse::IsInitialized() const {
  return true;
}

void GameAddCarryResponse::Swap(GameAddCarryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAddCarryResponse::InternalSwap(GameAddCarryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameAddCarryResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MatchOverAccountRequest::InitAsDefaultInstance() {
}
class MatchOverAccountRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchOverAccountRequest::kUserIdFieldNumber;
const int MatchOverAccountRequest::kRoomIdFieldNumber;
const int MatchOverAccountRequest::kCurCarryChipsFieldNumber;
const int MatchOverAccountRequest::kNeedAddToActiveFieldNumber;
const int MatchOverAccountRequest::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchOverAccountRequest::MatchOverAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.MatchOverAccountRequest)
}
MatchOverAccountRequest::MatchOverAccountRequest(const MatchOverAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needaddtoactive_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(needaddtoactive_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.MatchOverAccountRequest)
}

void MatchOverAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MatchOverAccountRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needaddtoactive_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(needaddtoactive_));
}

MatchOverAccountRequest::~MatchOverAccountRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.MatchOverAccountRequest)
  SharedDtor();
}

void MatchOverAccountRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchOverAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchOverAccountRequest& MatchOverAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MatchOverAccountRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void MatchOverAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.MatchOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needaddtoactive_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(needaddtoactive_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatchOverAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MatchOverAccountRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 curCarryChips = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_curcarrychips(value);
        break;
      }
      // int64 needAddToActive = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_needaddtoactive(value);
        break;
      }
      // bytes gameId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatchOverAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.MatchOverAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 curCarryChips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curcarrychips_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 needAddToActive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needaddtoactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.MatchOverAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.MatchOverAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatchOverAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.MatchOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curcarrychips(), output);
  }

  // int64 needAddToActive = 4;
  if (this->needaddtoactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->needaddtoactive(), output);
  }

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.MatchOverAccountRequest)
}

::google::protobuf::uint8* MatchOverAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.MatchOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curcarrychips(), target);
  }

  // int64 needAddToActive = 4;
  if (this->needaddtoactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->needaddtoactive(), target);
  }

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.MatchOverAccountRequest)
  return target;
}

size_t MatchOverAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.MatchOverAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 curCarryChips = 3;
  if (this->curcarrychips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curcarrychips());
  }

  // int64 needAddToActive = 4;
  if (this->needaddtoactive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->needaddtoactive());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchOverAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.MatchOverAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchOverAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MatchOverAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.MatchOverAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.MatchOverAccountRequest)
    MergeFrom(*source);
  }
}

void MatchOverAccountRequest::MergeFrom(const MatchOverAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.MatchOverAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.curcarrychips() != 0) {
    set_curcarrychips(from.curcarrychips());
  }
  if (from.needaddtoactive() != 0) {
    set_needaddtoactive(from.needaddtoactive());
  }
}

void MatchOverAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.MatchOverAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchOverAccountRequest::CopyFrom(const MatchOverAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.MatchOverAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchOverAccountRequest::IsInitialized() const {
  return true;
}

void MatchOverAccountRequest::Swap(MatchOverAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchOverAccountRequest::InternalSwap(MatchOverAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(curcarrychips_, other->curcarrychips_);
  swap(needaddtoactive_, other->needaddtoactive_);
}

::google::protobuf::Metadata MatchOverAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MatchOverAccountResponse::InitAsDefaultInstance() {
}
class MatchOverAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchOverAccountResponse::MatchOverAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.MatchOverAccountResponse)
}
MatchOverAccountResponse::MatchOverAccountResponse(const MatchOverAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.MatchOverAccountResponse)
}

void MatchOverAccountResponse::SharedCtor() {
}

MatchOverAccountResponse::~MatchOverAccountResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.MatchOverAccountResponse)
  SharedDtor();
}

void MatchOverAccountResponse::SharedDtor() {
}

void MatchOverAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchOverAccountResponse& MatchOverAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MatchOverAccountResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void MatchOverAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.MatchOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatchOverAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MatchOverAccountResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatchOverAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.MatchOverAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.MatchOverAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.MatchOverAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatchOverAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.MatchOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.MatchOverAccountResponse)
}

::google::protobuf::uint8* MatchOverAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.MatchOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.MatchOverAccountResponse)
  return target;
}

size_t MatchOverAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.MatchOverAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchOverAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.MatchOverAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchOverAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MatchOverAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.MatchOverAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.MatchOverAccountResponse)
    MergeFrom(*source);
  }
}

void MatchOverAccountResponse::MergeFrom(const MatchOverAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.MatchOverAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MatchOverAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.MatchOverAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchOverAccountResponse::CopyFrom(const MatchOverAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.MatchOverAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchOverAccountResponse::IsInitialized() const {
  return true;
}

void MatchOverAccountResponse::Swap(MatchOverAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchOverAccountResponse::InternalSwap(MatchOverAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchOverAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserGameAccount::InitAsDefaultInstance() {
}
class UserGameAccount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameAccount::kUserIdFieldNumber;
const int UserGameAccount::kCurrentCarryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameAccount::UserGameAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserGameAccount)
}
UserGameAccount::UserGameAccount(const UserGameAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentcarry_, &from.currentcarry_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&currentcarry_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserGameAccount)
}

void UserGameAccount::SharedCtor() {
  ::memset(&currentcarry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&currentcarry_)) + sizeof(userid_));
}

UserGameAccount::~UserGameAccount() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserGameAccount)
  SharedDtor();
}

void UserGameAccount::SharedDtor() {
}

void UserGameAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserGameAccount& UserGameAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserGameAccount_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserGameAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserGameAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentcarry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&currentcarry_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserGameAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserGameAccount*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 currentCarry = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentcarry(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserGameAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserGameAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 currentCarry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentcarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserGameAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserGameAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserGameAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserGameAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 currentCarry = 2;
  if (this->currentcarry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->currentcarry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserGameAccount)
}

::google::protobuf::uint8* UserGameAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserGameAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 currentCarry = 2;
  if (this->currentcarry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->currentcarry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserGameAccount)
  return target;
}

size_t UserGameAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserGameAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 currentCarry = 2;
  if (this->currentcarry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->currentcarry());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserGameAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserGameAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameAccount* source =
      ::google::protobuf::DynamicCastToGenerated<UserGameAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserGameAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserGameAccount)
    MergeFrom(*source);
  }
}

void UserGameAccount::MergeFrom(const UserGameAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserGameAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentcarry() != 0) {
    set_currentcarry(from.currentcarry());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void UserGameAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserGameAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameAccount::CopyFrom(const UserGameAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserGameAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameAccount::IsInitialized() const {
  return true;
}

void UserGameAccount::Swap(UserGameAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameAccount::InternalSwap(UserGameAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currentcarry_, other->currentcarry_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata UserGameAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameOverAccountRequest::InitAsDefaultInstance() {
}
class GameOverAccountRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverAccountRequest::kRoomIdFieldNumber;
const int GameOverAccountRequest::kGameIdFieldNumber;
const int GameOverAccountRequest::kUserGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverAccountRequest::GameOverAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameOverAccountRequest)
}
GameOverAccountRequest::GameOverAccountRequest(const GameOverAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      usergameresult_(from.usergameresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameOverAccountRequest)
}

void GameOverAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameOverAccountRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
}

GameOverAccountRequest::~GameOverAccountRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameOverAccountRequest)
  SharedDtor();
}

void GameOverAccountRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameOverAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameOverAccountRequest& GameOverAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameOverAccountRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameOverAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usergameresult_.Clear();
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameOverAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameOverAccountRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // bytes gameId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated .SvrMsg.UserGameAccount userGameResult = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SvrMsg::UserGameAccount::_InternalParse;
          object = msg->add_usergameresult();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameOverAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameOverAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SvrMsg.UserGameAccount userGameResult = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_usergameresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameOverAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameOverAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameOverAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // bytes gameId = 2;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->gameid(), output);
  }

  // repeated .SvrMsg.UserGameAccount userGameResult = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->usergameresult_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->usergameresult(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameOverAccountRequest)
}

::google::protobuf::uint8* GameOverAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameOverAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // bytes gameId = 2;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->gameid(), target);
  }

  // repeated .SvrMsg.UserGameAccount userGameResult = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->usergameresult_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->usergameresult(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameOverAccountRequest)
  return target;
}

size_t GameOverAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameOverAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SvrMsg.UserGameAccount userGameResult = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->usergameresult_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->usergameresult(static_cast<int>(i)));
    }
  }

  // bytes gameId = 2;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameOverAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameOverAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameOverAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameOverAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameOverAccountRequest)
    MergeFrom(*source);
  }
}

void GameOverAccountRequest::MergeFrom(const GameOverAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameOverAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usergameresult_.MergeFrom(from.usergameresult_);
  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void GameOverAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameOverAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverAccountRequest::CopyFrom(const GameOverAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameOverAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverAccountRequest::IsInitialized() const {
  return true;
}

void GameOverAccountRequest::Swap(GameOverAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverAccountRequest::InternalSwap(GameOverAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&usergameresult_)->InternalSwap(CastToBase(&other->usergameresult_));
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata GameOverAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameOverAccountResponse::InitAsDefaultInstance() {
}
class GameOverAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverAccountResponse::GameOverAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameOverAccountResponse)
}
GameOverAccountResponse::GameOverAccountResponse(const GameOverAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameOverAccountResponse)
}

void GameOverAccountResponse::SharedCtor() {
}

GameOverAccountResponse::~GameOverAccountResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameOverAccountResponse)
  SharedDtor();
}

void GameOverAccountResponse::SharedDtor() {
}

void GameOverAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameOverAccountResponse& GameOverAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameOverAccountResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameOverAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameOverAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameOverAccountResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameOverAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameOverAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameOverAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameOverAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameOverAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameOverAccountResponse)
}

::google::protobuf::uint8* GameOverAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameOverAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameOverAccountResponse)
  return target;
}

size_t GameOverAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameOverAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameOverAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameOverAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameOverAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameOverAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameOverAccountResponse)
    MergeFrom(*source);
  }
}

void GameOverAccountResponse::MergeFrom(const GameOverAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameOverAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameOverAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameOverAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverAccountResponse::CopyFrom(const GameOverAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameOverAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverAccountResponse::IsInitialized() const {
  return true;
}

void GameOverAccountResponse::Swap(GameOverAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverAccountResponse::InternalSwap(GameOverAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameOverAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLeaveAccountRequest::InitAsDefaultInstance() {
}
class GameLeaveAccountRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLeaveAccountRequest::kUserIdFieldNumber;
const int GameLeaveAccountRequest::kRoomIdFieldNumber;
const int GameLeaveAccountRequest::kCurrentCarryFieldNumber;
const int GameLeaveAccountRequest::kGameIdFieldNumber;
const int GameLeaveAccountRequest::kSmallBlindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLeaveAccountRequest::GameLeaveAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLeaveAccountRequest)
}
GameLeaveAccountRequest::GameLeaveAccountRequest(const GameLeaveAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&smallblind_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(smallblind_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLeaveAccountRequest)
}

void GameLeaveAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLeaveAccountRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smallblind_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(smallblind_));
}

GameLeaveAccountRequest::~GameLeaveAccountRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLeaveAccountRequest)
  SharedDtor();
}

void GameLeaveAccountRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLeaveAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLeaveAccountRequest& GameLeaveAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLeaveAccountRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLeaveAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLeaveAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smallblind_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(smallblind_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLeaveAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLeaveAccountRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int32 roomId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 currentCarry = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_currentcarry(value);
        break;
      }
      // bytes gameId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // int64 smallBlind = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLeaveAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLeaveAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 currentCarry = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentcarry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLeaveAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLeaveAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLeaveAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLeaveAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // int64 currentCarry = 3;
  if (this->currentcarry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currentcarry(), output);
  }

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->gameid(), output);
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->smallblind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLeaveAccountRequest)
}

::google::protobuf::uint8* GameLeaveAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLeaveAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // int64 currentCarry = 3;
  if (this->currentcarry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currentcarry(), target);
  }

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->gameid(), target);
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->smallblind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLeaveAccountRequest)
  return target;
}

size_t GameLeaveAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLeaveAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gameId = 4;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 roomId = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 currentCarry = 3;
  if (this->currentcarry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->currentcarry());
  }

  // int64 smallBlind = 5;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLeaveAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLeaveAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLeaveAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameLeaveAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLeaveAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLeaveAccountRequest)
    MergeFrom(*source);
  }
}

void GameLeaveAccountRequest::MergeFrom(const GameLeaveAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLeaveAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.currentcarry() != 0) {
    set_currentcarry(from.currentcarry());
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
}

void GameLeaveAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLeaveAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLeaveAccountRequest::CopyFrom(const GameLeaveAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLeaveAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLeaveAccountRequest::IsInitialized() const {
  return true;
}

void GameLeaveAccountRequest::Swap(GameLeaveAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLeaveAccountRequest::InternalSwap(GameLeaveAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(roomid_, other->roomid_);
  swap(currentcarry_, other->currentcarry_);
  swap(smallblind_, other->smallblind_);
}

::google::protobuf::Metadata GameLeaveAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLeaveAccountResponse::InitAsDefaultInstance() {
}
class GameLeaveAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLeaveAccountResponse::GameLeaveAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLeaveAccountResponse)
}
GameLeaveAccountResponse::GameLeaveAccountResponse(const GameLeaveAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLeaveAccountResponse)
}

void GameLeaveAccountResponse::SharedCtor() {
}

GameLeaveAccountResponse::~GameLeaveAccountResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLeaveAccountResponse)
  SharedDtor();
}

void GameLeaveAccountResponse::SharedDtor() {
}

void GameLeaveAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLeaveAccountResponse& GameLeaveAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLeaveAccountResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLeaveAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLeaveAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLeaveAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLeaveAccountResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLeaveAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLeaveAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLeaveAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLeaveAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLeaveAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLeaveAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLeaveAccountResponse)
}

::google::protobuf::uint8* GameLeaveAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLeaveAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLeaveAccountResponse)
  return target;
}

size_t GameLeaveAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLeaveAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLeaveAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLeaveAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLeaveAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameLeaveAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLeaveAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLeaveAccountResponse)
    MergeFrom(*source);
  }
}

void GameLeaveAccountResponse::MergeFrom(const GameLeaveAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLeaveAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameLeaveAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLeaveAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLeaveAccountResponse::CopyFrom(const GameLeaveAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLeaveAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLeaveAccountResponse::IsInitialized() const {
  return true;
}

void GameLeaveAccountResponse::Swap(GameLeaveAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLeaveAccountResponse::InternalSwap(GameLeaveAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameLeaveAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBoxTimeRecoverRequest::InitAsDefaultInstance() {
}
class UserBoxTimeRecoverRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBoxTimeRecoverRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBoxTimeRecoverRequest::UserBoxTimeRecoverRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserBoxTimeRecoverRequest)
}
UserBoxTimeRecoverRequest::UserBoxTimeRecoverRequest(const UserBoxTimeRecoverRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserBoxTimeRecoverRequest)
}

void UserBoxTimeRecoverRequest::SharedCtor() {
  userid_ = 0;
}

UserBoxTimeRecoverRequest::~UserBoxTimeRecoverRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserBoxTimeRecoverRequest)
  SharedDtor();
}

void UserBoxTimeRecoverRequest::SharedDtor() {
}

void UserBoxTimeRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBoxTimeRecoverRequest& UserBoxTimeRecoverRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBoxTimeRecoverRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBoxTimeRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserBoxTimeRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBoxTimeRecoverRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBoxTimeRecoverRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBoxTimeRecoverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserBoxTimeRecoverRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserBoxTimeRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserBoxTimeRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBoxTimeRecoverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserBoxTimeRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserBoxTimeRecoverRequest)
}

::google::protobuf::uint8* UserBoxTimeRecoverRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserBoxTimeRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserBoxTimeRecoverRequest)
  return target;
}

size_t UserBoxTimeRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserBoxTimeRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBoxTimeRecoverRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserBoxTimeRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBoxTimeRecoverRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserBoxTimeRecoverRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserBoxTimeRecoverRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserBoxTimeRecoverRequest)
    MergeFrom(*source);
  }
}

void UserBoxTimeRecoverRequest::MergeFrom(const UserBoxTimeRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserBoxTimeRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void UserBoxTimeRecoverRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserBoxTimeRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoxTimeRecoverRequest::CopyFrom(const UserBoxTimeRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserBoxTimeRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoxTimeRecoverRequest::IsInitialized() const {
  return true;
}

void UserBoxTimeRecoverRequest::Swap(UserBoxTimeRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBoxTimeRecoverRequest::InternalSwap(UserBoxTimeRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata UserBoxTimeRecoverRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBoxTimeRecoverResponse::InitAsDefaultInstance() {
}
class UserBoxTimeRecoverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBoxTimeRecoverResponse::UserBoxTimeRecoverResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserBoxTimeRecoverResponse)
}
UserBoxTimeRecoverResponse::UserBoxTimeRecoverResponse(const UserBoxTimeRecoverResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserBoxTimeRecoverResponse)
}

void UserBoxTimeRecoverResponse::SharedCtor() {
}

UserBoxTimeRecoverResponse::~UserBoxTimeRecoverResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserBoxTimeRecoverResponse)
  SharedDtor();
}

void UserBoxTimeRecoverResponse::SharedDtor() {
}

void UserBoxTimeRecoverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBoxTimeRecoverResponse& UserBoxTimeRecoverResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBoxTimeRecoverResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBoxTimeRecoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserBoxTimeRecoverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBoxTimeRecoverResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBoxTimeRecoverResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBoxTimeRecoverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserBoxTimeRecoverResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserBoxTimeRecoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserBoxTimeRecoverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBoxTimeRecoverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserBoxTimeRecoverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserBoxTimeRecoverResponse)
}

::google::protobuf::uint8* UserBoxTimeRecoverResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserBoxTimeRecoverResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserBoxTimeRecoverResponse)
  return target;
}

size_t UserBoxTimeRecoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserBoxTimeRecoverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBoxTimeRecoverResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserBoxTimeRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBoxTimeRecoverResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserBoxTimeRecoverResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserBoxTimeRecoverResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserBoxTimeRecoverResponse)
    MergeFrom(*source);
  }
}

void UserBoxTimeRecoverResponse::MergeFrom(const UserBoxTimeRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserBoxTimeRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserBoxTimeRecoverResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserBoxTimeRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoxTimeRecoverResponse::CopyFrom(const UserBoxTimeRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserBoxTimeRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoxTimeRecoverResponse::IsInitialized() const {
  return true;
}

void UserBoxTimeRecoverResponse::Swap(UserBoxTimeRecoverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBoxTimeRecoverResponse::InternalSwap(UserBoxTimeRecoverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserBoxTimeRecoverResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBoxTimePauseRequest::InitAsDefaultInstance() {
}
class UserBoxTimePauseRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBoxTimePauseRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBoxTimePauseRequest::UserBoxTimePauseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserBoxTimePauseRequest)
}
UserBoxTimePauseRequest::UserBoxTimePauseRequest(const UserBoxTimePauseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserBoxTimePauseRequest)
}

void UserBoxTimePauseRequest::SharedCtor() {
  userid_ = 0;
}

UserBoxTimePauseRequest::~UserBoxTimePauseRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserBoxTimePauseRequest)
  SharedDtor();
}

void UserBoxTimePauseRequest::SharedDtor() {
}

void UserBoxTimePauseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBoxTimePauseRequest& UserBoxTimePauseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBoxTimePauseRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBoxTimePauseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserBoxTimePauseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBoxTimePauseRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBoxTimePauseRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBoxTimePauseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserBoxTimePauseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserBoxTimePauseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserBoxTimePauseRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBoxTimePauseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserBoxTimePauseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserBoxTimePauseRequest)
}

::google::protobuf::uint8* UserBoxTimePauseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserBoxTimePauseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserBoxTimePauseRequest)
  return target;
}

size_t UserBoxTimePauseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserBoxTimePauseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBoxTimePauseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserBoxTimePauseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBoxTimePauseRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserBoxTimePauseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserBoxTimePauseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserBoxTimePauseRequest)
    MergeFrom(*source);
  }
}

void UserBoxTimePauseRequest::MergeFrom(const UserBoxTimePauseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserBoxTimePauseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void UserBoxTimePauseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserBoxTimePauseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoxTimePauseRequest::CopyFrom(const UserBoxTimePauseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserBoxTimePauseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoxTimePauseRequest::IsInitialized() const {
  return true;
}

void UserBoxTimePauseRequest::Swap(UserBoxTimePauseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBoxTimePauseRequest::InternalSwap(UserBoxTimePauseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata UserBoxTimePauseRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserBoxTimePauseResponse::InitAsDefaultInstance() {
}
class UserBoxTimePauseResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBoxTimePauseResponse::UserBoxTimePauseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserBoxTimePauseResponse)
}
UserBoxTimePauseResponse::UserBoxTimePauseResponse(const UserBoxTimePauseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserBoxTimePauseResponse)
}

void UserBoxTimePauseResponse::SharedCtor() {
}

UserBoxTimePauseResponse::~UserBoxTimePauseResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserBoxTimePauseResponse)
  SharedDtor();
}

void UserBoxTimePauseResponse::SharedDtor() {
}

void UserBoxTimePauseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBoxTimePauseResponse& UserBoxTimePauseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserBoxTimePauseResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserBoxTimePauseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserBoxTimePauseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserBoxTimePauseResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserBoxTimePauseResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserBoxTimePauseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserBoxTimePauseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserBoxTimePauseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserBoxTimePauseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserBoxTimePauseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserBoxTimePauseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserBoxTimePauseResponse)
}

::google::protobuf::uint8* UserBoxTimePauseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserBoxTimePauseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserBoxTimePauseResponse)
  return target;
}

size_t UserBoxTimePauseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserBoxTimePauseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBoxTimePauseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserBoxTimePauseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBoxTimePauseResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserBoxTimePauseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserBoxTimePauseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserBoxTimePauseResponse)
    MergeFrom(*source);
  }
}

void UserBoxTimePauseResponse::MergeFrom(const UserBoxTimePauseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserBoxTimePauseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserBoxTimePauseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserBoxTimePauseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoxTimePauseResponse::CopyFrom(const UserBoxTimePauseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserBoxTimePauseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoxTimePauseResponse::IsInitialized() const {
  return true;
}

void UserBoxTimePauseResponse::Swap(UserBoxTimePauseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBoxTimePauseResponse::InternalSwap(UserBoxTimePauseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserBoxTimePauseResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyTokenLoginRequest::InitAsDefaultInstance() {
}
class NotifyTokenLoginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyTokenLoginRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyTokenLoginRequest::NotifyTokenLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.NotifyTokenLoginRequest)
}
NotifyTokenLoginRequest::NotifyTokenLoginRequest(const NotifyTokenLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.NotifyTokenLoginRequest)
}

void NotifyTokenLoginRequest::SharedCtor() {
  userid_ = 0;
}

NotifyTokenLoginRequest::~NotifyTokenLoginRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.NotifyTokenLoginRequest)
  SharedDtor();
}

void NotifyTokenLoginRequest::SharedDtor() {
}

void NotifyTokenLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyTokenLoginRequest& NotifyTokenLoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyTokenLoginRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyTokenLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.NotifyTokenLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyTokenLoginRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyTokenLoginRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyTokenLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.NotifyTokenLoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.NotifyTokenLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.NotifyTokenLoginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyTokenLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.NotifyTokenLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.NotifyTokenLoginRequest)
}

::google::protobuf::uint8* NotifyTokenLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.NotifyTokenLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.NotifyTokenLoginRequest)
  return target;
}

size_t NotifyTokenLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.NotifyTokenLoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyTokenLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.NotifyTokenLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyTokenLoginRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyTokenLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.NotifyTokenLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.NotifyTokenLoginRequest)
    MergeFrom(*source);
  }
}

void NotifyTokenLoginRequest::MergeFrom(const NotifyTokenLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.NotifyTokenLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void NotifyTokenLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.NotifyTokenLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTokenLoginRequest::CopyFrom(const NotifyTokenLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.NotifyTokenLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTokenLoginRequest::IsInitialized() const {
  return true;
}

void NotifyTokenLoginRequest::Swap(NotifyTokenLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyTokenLoginRequest::InternalSwap(NotifyTokenLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata NotifyTokenLoginRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyTokenLoginResponse::InitAsDefaultInstance() {
}
class NotifyTokenLoginResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyTokenLoginResponse::NotifyTokenLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.NotifyTokenLoginResponse)
}
NotifyTokenLoginResponse::NotifyTokenLoginResponse(const NotifyTokenLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.NotifyTokenLoginResponse)
}

void NotifyTokenLoginResponse::SharedCtor() {
}

NotifyTokenLoginResponse::~NotifyTokenLoginResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.NotifyTokenLoginResponse)
  SharedDtor();
}

void NotifyTokenLoginResponse::SharedDtor() {
}

void NotifyTokenLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyTokenLoginResponse& NotifyTokenLoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyTokenLoginResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyTokenLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.NotifyTokenLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyTokenLoginResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyTokenLoginResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyTokenLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.NotifyTokenLoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.NotifyTokenLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.NotifyTokenLoginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyTokenLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.NotifyTokenLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.NotifyTokenLoginResponse)
}

::google::protobuf::uint8* NotifyTokenLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.NotifyTokenLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.NotifyTokenLoginResponse)
  return target;
}

size_t NotifyTokenLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.NotifyTokenLoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyTokenLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.NotifyTokenLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyTokenLoginResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyTokenLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.NotifyTokenLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.NotifyTokenLoginResponse)
    MergeFrom(*source);
  }
}

void NotifyTokenLoginResponse::MergeFrom(const NotifyTokenLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.NotifyTokenLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotifyTokenLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.NotifyTokenLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTokenLoginResponse::CopyFrom(const NotifyTokenLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.NotifyTokenLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTokenLoginResponse::IsInitialized() const {
  return true;
}

void NotifyTokenLoginResponse::Swap(NotifyTokenLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyTokenLoginResponse::InternalSwap(NotifyTokenLoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyTokenLoginResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyOpenRequest::InitAsDefaultInstance() {
}
class NotifyOpenRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyOpenRequest::NotifyOpenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.NotifyOpenRequest)
}
NotifyOpenRequest::NotifyOpenRequest(const NotifyOpenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.NotifyOpenRequest)
}

void NotifyOpenRequest::SharedCtor() {
}

NotifyOpenRequest::~NotifyOpenRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.NotifyOpenRequest)
  SharedDtor();
}

void NotifyOpenRequest::SharedDtor() {
}

void NotifyOpenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyOpenRequest& NotifyOpenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyOpenRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyOpenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.NotifyOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyOpenRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyOpenRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyOpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.NotifyOpenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.NotifyOpenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.NotifyOpenRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyOpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.NotifyOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.NotifyOpenRequest)
}

::google::protobuf::uint8* NotifyOpenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.NotifyOpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.NotifyOpenRequest)
  return target;
}

size_t NotifyOpenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.NotifyOpenRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyOpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.NotifyOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyOpenRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyOpenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.NotifyOpenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.NotifyOpenRequest)
    MergeFrom(*source);
  }
}

void NotifyOpenRequest::MergeFrom(const NotifyOpenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.NotifyOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotifyOpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.NotifyOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOpenRequest::CopyFrom(const NotifyOpenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.NotifyOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOpenRequest::IsInitialized() const {
  return true;
}

void NotifyOpenRequest::Swap(NotifyOpenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyOpenRequest::InternalSwap(NotifyOpenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyOpenRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyOpenResponse::InitAsDefaultInstance() {
}
class NotifyOpenResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyOpenResponse::NotifyOpenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.NotifyOpenResponse)
}
NotifyOpenResponse::NotifyOpenResponse(const NotifyOpenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.NotifyOpenResponse)
}

void NotifyOpenResponse::SharedCtor() {
}

NotifyOpenResponse::~NotifyOpenResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.NotifyOpenResponse)
  SharedDtor();
}

void NotifyOpenResponse::SharedDtor() {
}

void NotifyOpenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyOpenResponse& NotifyOpenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyOpenResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void NotifyOpenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.NotifyOpenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyOpenResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyOpenResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyOpenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.NotifyOpenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.NotifyOpenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.NotifyOpenResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyOpenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.NotifyOpenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.NotifyOpenResponse)
}

::google::protobuf::uint8* NotifyOpenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.NotifyOpenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.NotifyOpenResponse)
  return target;
}

size_t NotifyOpenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.NotifyOpenResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyOpenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.NotifyOpenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyOpenResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyOpenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.NotifyOpenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.NotifyOpenResponse)
    MergeFrom(*source);
  }
}

void NotifyOpenResponse::MergeFrom(const NotifyOpenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.NotifyOpenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotifyOpenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.NotifyOpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOpenResponse::CopyFrom(const NotifyOpenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.NotifyOpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOpenResponse::IsInitialized() const {
  return true;
}

void NotifyOpenResponse::Swap(NotifyOpenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyOpenResponse::InternalSwap(NotifyOpenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyOpenResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLogRecordRequest::InitAsDefaultInstance() {
}
class UserLogRecordRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLogRecordRequest::kUserIdFieldNumber;
const int UserLogRecordRequest::kLogTimeFieldNumber;
const int UserLogRecordRequest::kActionFieldNumber;
const int UserLogRecordRequest::kLogInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLogRecordRequest::UserLogRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserLogRecordRequest)
}
UserLogRecordRequest::UserLogRecordRequest(const UserLogRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loginfo().size() > 0) {
    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  ::memcpy(&logtime_, &from.logtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserLogRecordRequest)
}

void UserLogRecordRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserLogRecordRequest_SvrMsg_2eproto.base);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
}

UserLogRecordRequest::~UserLogRecordRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserLogRecordRequest)
  SharedDtor();
}

void UserLogRecordRequest::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserLogRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLogRecordRequest& UserLogRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLogRecordRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserLogRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLogRecordRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLogRecordRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 logTime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_logtime(value);
        break;
      }
      // bytes action = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_action();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // bytes logInfo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_loginfo();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLogRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserLogRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes logInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserLogRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserLogRecordRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLogRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logtime(), output);
  }

  // bytes action = 3;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->action(), output);
  }

  // bytes logInfo = 4;
  if (this->loginfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->loginfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserLogRecordRequest)
}

::google::protobuf::uint8* UserLogRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logtime(), target);
  }

  // bytes action = 3;
  if (this->action().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->action(), target);
  }

  // bytes logInfo = 4;
  if (this->loginfo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->loginfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserLogRecordRequest)
  return target;
}

size_t UserLogRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserLogRecordRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->action());
  }

  // bytes logInfo = 4;
  if (this->loginfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->loginfo());
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLogRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserLogRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLogRecordRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserLogRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserLogRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserLogRecordRequest)
    MergeFrom(*source);
  }
}

void UserLogRecordRequest::MergeFrom(const UserLogRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserLogRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.loginfo().size() > 0) {

    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void UserLogRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserLogRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogRecordRequest::CopyFrom(const UserLogRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserLogRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogRecordRequest::IsInitialized() const {
  return true;
}

void UserLogRecordRequest::Swap(UserLogRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogRecordRequest::InternalSwap(UserLogRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  loginfo_.Swap(&other->loginfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logtime_, other->logtime_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata UserLogRecordRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLogRecordResponse::InitAsDefaultInstance() {
}
class UserLogRecordResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLogRecordResponse::UserLogRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserLogRecordResponse)
}
UserLogRecordResponse::UserLogRecordResponse(const UserLogRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserLogRecordResponse)
}

void UserLogRecordResponse::SharedCtor() {
}

UserLogRecordResponse::~UserLogRecordResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserLogRecordResponse)
  SharedDtor();
}

void UserLogRecordResponse::SharedDtor() {
}

void UserLogRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLogRecordResponse& UserLogRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLogRecordResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserLogRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLogRecordResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLogRecordResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLogRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserLogRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserLogRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserLogRecordResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLogRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserLogRecordResponse)
}

::google::protobuf::uint8* UserLogRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserLogRecordResponse)
  return target;
}

size_t UserLogRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserLogRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLogRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserLogRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLogRecordResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserLogRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserLogRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserLogRecordResponse)
    MergeFrom(*source);
  }
}

void UserLogRecordResponse::MergeFrom(const UserLogRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserLogRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserLogRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserLogRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogRecordResponse::CopyFrom(const UserLogRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserLogRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogRecordResponse::IsInitialized() const {
  return true;
}

void UserLogRecordResponse::Swap(UserLogRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogRecordResponse::InternalSwap(UserLogRecordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserLogRecordResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLogRequest::InitAsDefaultInstance() {
}
class GameLogRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLogRequest::kRoomIdFieldNumber;
const int GameLogRequest::kSmallBlindFieldNumber;
const int GameLogRequest::kLogTimeFieldNumber;
const int GameLogRequest::kTipsTotalFieldNumber;
const int GameLogRequest::kGameIdFieldNumber;
const int GameLogRequest::kLogInfoFieldNumber;
const int GameLogRequest::kPlayerIdFieldNumber;
const int GameLogRequest::kChipsPoolFieldNumber;
const int GameLogRequest::kRoomTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLogRequest::GameLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLogRequest)
}
GameLogRequest::GameLogRequest(const GameLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      playerid_(from.playerid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loginfo().size() > 0) {
    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomtype().size() > 0) {
    roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
  }
  ::memcpy(&smallblind_, &from.smallblind_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&smallblind_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLogRequest)
}

void GameLogRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLogRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&smallblind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&smallblind_)) + sizeof(roomid_));
}

GameLogRequest::~GameLogRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLogRequest)
  SharedDtor();
}

void GameLogRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLogRequest& GameLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLogRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_.Clear();
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&smallblind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&smallblind_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLogRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLogRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 smallBlind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_smallblind(value);
        break;
      }
      // int64 logTime = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_logtime(value);
        break;
      }
      // int64 tipsTotal = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_tipstotal(value);
        break;
      }
      // bytes gameId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // bytes logInfo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_loginfo();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // repeated int32 playerId = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 58) {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_playerid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ::google::protobuf::int32 value = val;
          msg->add_playerid(value);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
        break;
      }
      // int64 chipsPool = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_chipspool(value);
        break;
      }
      // bytes roomType = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_roomtype();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 smallBlind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tipsTotal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tipstotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes logInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 playerId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_playerid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chipsPool = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chipspool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes roomType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLogRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // int64 smallBlind = 2;
  if (this->smallblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->smallblind(), output);
  }

  // int64 logTime = 3;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->logtime(), output);
  }

  // int64 tipsTotal = 4;
  if (this->tipstotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->tipstotal(), output);
  }

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->gameid(), output);
  }

  // bytes logInfo = 6;
  if (this->loginfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->loginfo(), output);
  }

  // repeated int32 playerId = 7;
  if (this->playerid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->playerid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->playerid(i), output);
  }

  // int64 chipsPool = 8;
  if (this->chipspool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->chipspool(), output);
  }

  // bytes roomType = 9;
  if (this->roomtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->roomtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLogRequest)
}

::google::protobuf::uint8* GameLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // int64 smallBlind = 2;
  if (this->smallblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->smallblind(), target);
  }

  // int64 logTime = 3;
  if (this->logtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->logtime(), target);
  }

  // int64 tipsTotal = 4;
  if (this->tipstotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->tipstotal(), target);
  }

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->gameid(), target);
  }

  // bytes logInfo = 6;
  if (this->loginfo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->loginfo(), target);
  }

  // repeated int32 playerId = 7;
  if (this->playerid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _playerid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->playerid_, target);
  }

  // int64 chipsPool = 8;
  if (this->chipspool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->chipspool(), target);
  }

  // bytes roomType = 9;
  if (this->roomtype().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->roomtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLogRequest)
  return target;
}

size_t GameLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 playerId = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->playerid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _playerid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes gameId = 5;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // bytes logInfo = 6;
  if (this->loginfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->loginfo());
  }

  // bytes roomType = 9;
  if (this->roomtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomtype());
  }

  // int64 smallBlind = 2;
  if (this->smallblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->smallblind());
  }

  // int64 logTime = 3;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());
  }

  // int64 tipsTotal = 4;
  if (this->tipstotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tipstotal());
  }

  // int64 chipsPool = 8;
  if (this->chipspool() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chipspool());
  }

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLogRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GameLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLogRequest)
    MergeFrom(*source);
  }
}

void GameLogRequest::MergeFrom(const GameLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerid_.MergeFrom(from.playerid_);
  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.loginfo().size() > 0) {

    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  if (from.roomtype().size() > 0) {

    roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
  }
  if (from.smallblind() != 0) {
    set_smallblind(from.smallblind());
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.tipstotal() != 0) {
    set_tipstotal(from.tipstotal());
  }
  if (from.chipspool() != 0) {
    set_chipspool(from.chipspool());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void GameLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogRequest::CopyFrom(const GameLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLogRequest::IsInitialized() const {
  return true;
}

void GameLogRequest::Swap(GameLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLogRequest::InternalSwap(GameLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playerid_.InternalSwap(&other->playerid_);
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  loginfo_.Swap(&other->loginfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomtype_.Swap(&other->roomtype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(smallblind_, other->smallblind_);
  swap(logtime_, other->logtime_);
  swap(tipstotal_, other->tipstotal_);
  swap(chipspool_, other->chipspool_);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata GameLogRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLogResponse::InitAsDefaultInstance() {
}
class GameLogResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLogResponse::GameLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.GameLogResponse)
}
GameLogResponse::GameLogResponse(const GameLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.GameLogResponse)
}

void GameLogResponse::SharedCtor() {
}

GameLogResponse::~GameLogResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.GameLogResponse)
  SharedDtor();
}

void GameLogResponse::SharedDtor() {
}

void GameLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLogResponse& GameLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLogResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void GameLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.GameLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLogResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.GameLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.GameLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.GameLogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.GameLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.GameLogResponse)
}

::google::protobuf::uint8* GameLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.GameLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.GameLogResponse)
  return target;
}

size_t GameLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.GameLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.GameLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.GameLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.GameLogResponse)
    MergeFrom(*source);
  }
}

void GameLogResponse::MergeFrom(const GameLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.GameLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.GameLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogResponse::CopyFrom(const GameLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.GameLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLogResponse::IsInitialized() const {
  return true;
}

void GameLogResponse::Swap(GameLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLogResponse::InternalSwap(GameLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameLogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppLogRecordRequest::InitAsDefaultInstance() {
}
class AppLogRecordRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppLogRecordRequest::kUserIdFieldNumber;
const int AppLogRecordRequest::kLogInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppLogRecordRequest::AppLogRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.AppLogRecordRequest)
}
AppLogRecordRequest::AppLogRecordRequest(const AppLogRecordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loginfo().size() > 0) {
    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.AppLogRecordRequest)
}

void AppLogRecordRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AppLogRecordRequest_SvrMsg_2eproto.base);
  loginfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

AppLogRecordRequest::~AppLogRecordRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.AppLogRecordRequest)
  SharedDtor();
}

void AppLogRecordRequest::SharedDtor() {
  loginfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppLogRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppLogRecordRequest& AppLogRecordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppLogRecordRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void AppLogRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.AppLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loginfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppLogRecordRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppLogRecordRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // bytes logInfo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_loginfo();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppLogRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.AppLogRecordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes logInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.AppLogRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.AppLogRecordRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppLogRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.AppLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // bytes logInfo = 2;
  if (this->loginfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->loginfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.AppLogRecordRequest)
}

::google::protobuf::uint8* AppLogRecordRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.AppLogRecordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // bytes logInfo = 2;
  if (this->loginfo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->loginfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.AppLogRecordRequest)
  return target;
}

size_t AppLogRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.AppLogRecordRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes logInfo = 2;
  if (this->loginfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->loginfo());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppLogRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.AppLogRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppLogRecordRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AppLogRecordRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.AppLogRecordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.AppLogRecordRequest)
    MergeFrom(*source);
  }
}

void AppLogRecordRequest::MergeFrom(const AppLogRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.AppLogRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loginfo().size() > 0) {

    loginfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginfo_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void AppLogRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.AppLogRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppLogRecordRequest::CopyFrom(const AppLogRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.AppLogRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppLogRecordRequest::IsInitialized() const {
  return true;
}

void AppLogRecordRequest::Swap(AppLogRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppLogRecordRequest::InternalSwap(AppLogRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loginfo_.Swap(&other->loginfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata AppLogRecordRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppLogRecordResponse::InitAsDefaultInstance() {
}
class AppLogRecordResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppLogRecordResponse::AppLogRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.AppLogRecordResponse)
}
AppLogRecordResponse::AppLogRecordResponse(const AppLogRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.AppLogRecordResponse)
}

void AppLogRecordResponse::SharedCtor() {
}

AppLogRecordResponse::~AppLogRecordResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.AppLogRecordResponse)
  SharedDtor();
}

void AppLogRecordResponse::SharedDtor() {
}

void AppLogRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppLogRecordResponse& AppLogRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppLogRecordResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void AppLogRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.AppLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppLogRecordResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppLogRecordResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppLogRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.AppLogRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.AppLogRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.AppLogRecordResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppLogRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.AppLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.AppLogRecordResponse)
}

::google::protobuf::uint8* AppLogRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.AppLogRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.AppLogRecordResponse)
  return target;
}

size_t AppLogRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.AppLogRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppLogRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.AppLogRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppLogRecordResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AppLogRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.AppLogRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.AppLogRecordResponse)
    MergeFrom(*source);
  }
}

void AppLogRecordResponse::MergeFrom(const AppLogRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.AppLogRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppLogRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.AppLogRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppLogRecordResponse::CopyFrom(const AppLogRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.AppLogRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppLogRecordResponse::IsInitialized() const {
  return true;
}

void AppLogRecordResponse::Swap(AppLogRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppLogRecordResponse::InternalSwap(AppLogRecordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppLogRecordResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserChipsLogRequest::InitAsDefaultInstance() {
}
class UserChipsLogRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserChipsLogRequest::kUserIdFieldNumber;
const int UserChipsLogRequest::kLogTimeFieldNumber;
const int UserChipsLogRequest::kOldTotalFieldNumber;
const int UserChipsLogRequest::kNewTotalFieldNumber;
const int UserChipsLogRequest::kChangeReaseonFieldNumber;
const int UserChipsLogRequest::kUserTypeFieldNumber;
const int UserChipsLogRequest::kRoomIdFieldNumber;
const int UserChipsLogRequest::kCarryFieldNumber;
const int UserChipsLogRequest::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChipsLogRequest::UserChipsLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserChipsLogRequest)
}
UserChipsLogRequest::UserChipsLogRequest(const UserChipsLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gameid().size() > 0) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  ::memcpy(&logtime_, &from.logtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&carry_) -
    reinterpret_cast<char*>(&logtime_)) + sizeof(carry_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserChipsLogRequest)
}

void UserChipsLogRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserChipsLogRequest_SvrMsg_2eproto.base);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carry_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(carry_));
}

UserChipsLogRequest::~UserChipsLogRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserChipsLogRequest)
  SharedDtor();
}

void UserChipsLogRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserChipsLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserChipsLogRequest& UserChipsLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserChipsLogRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserChipsLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserChipsLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carry_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(carry_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserChipsLogRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserChipsLogRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 logTime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_logtime(value);
        break;
      }
      // int64 oldTotal = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_oldtotal(value);
        break;
      }
      // int64 newTotal = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_newtotal(value);
        break;
      }
      // int32 changeReaseon = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_changereaseon(value);
        break;
      }
      // int32 userType = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_usertype(value);
        break;
      }
      // int32 roomId = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_roomid(value);
        break;
      }
      // int64 carry = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_carry(value);
        break;
      }
      // bytes gameId = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_gameid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserChipsLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserChipsLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 oldTotal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oldtotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 newTotal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newtotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 changeReaseon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changereaseon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 userType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 carry = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gameId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserChipsLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserChipsLogRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserChipsLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserChipsLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logtime(), output);
  }

  // int64 oldTotal = 3;
  if (this->oldtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->oldtotal(), output);
  }

  // int64 newTotal = 4;
  if (this->newtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->newtotal(), output);
  }

  // int32 changeReaseon = 5;
  if (this->changereaseon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->changereaseon(), output);
  }

  // int32 userType = 6;
  if (this->usertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usertype(), output);
  }

  // int32 roomId = 7;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomid(), output);
  }

  // int64 carry = 8;
  if (this->carry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->carry(), output);
  }

  // bytes gameId = 9;
  if (this->gameid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserChipsLogRequest)
}

::google::protobuf::uint8* UserChipsLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserChipsLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logtime(), target);
  }

  // int64 oldTotal = 3;
  if (this->oldtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->oldtotal(), target);
  }

  // int64 newTotal = 4;
  if (this->newtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->newtotal(), target);
  }

  // int32 changeReaseon = 5;
  if (this->changereaseon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->changereaseon(), target);
  }

  // int32 userType = 6;
  if (this->usertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usertype(), target);
  }

  // int32 roomId = 7;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomid(), target);
  }

  // int64 carry = 8;
  if (this->carry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->carry(), target);
  }

  // bytes gameId = 9;
  if (this->gameid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserChipsLogRequest)
  return target;
}

size_t UserChipsLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserChipsLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gameId = 9;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gameid());
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());
  }

  // int64 oldTotal = 3;
  if (this->oldtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->oldtotal());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 changeReaseon = 5;
  if (this->changereaseon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changereaseon());
  }

  // int64 newTotal = 4;
  if (this->newtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newtotal());
  }

  // int32 userType = 6;
  if (this->usertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usertype());
  }

  // int32 roomId = 7;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // int64 carry = 8;
  if (this->carry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->carry());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChipsLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserChipsLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChipsLogRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserChipsLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserChipsLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserChipsLogRequest)
    MergeFrom(*source);
  }
}

void UserChipsLogRequest::MergeFrom(const UserChipsLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserChipsLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.oldtotal() != 0) {
    set_oldtotal(from.oldtotal());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.changereaseon() != 0) {
    set_changereaseon(from.changereaseon());
  }
  if (from.newtotal() != 0) {
    set_newtotal(from.newtotal());
  }
  if (from.usertype() != 0) {
    set_usertype(from.usertype());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.carry() != 0) {
    set_carry(from.carry());
  }
}

void UserChipsLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserChipsLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChipsLogRequest::CopyFrom(const UserChipsLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserChipsLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChipsLogRequest::IsInitialized() const {
  return true;
}

void UserChipsLogRequest::Swap(UserChipsLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserChipsLogRequest::InternalSwap(UserChipsLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logtime_, other->logtime_);
  swap(oldtotal_, other->oldtotal_);
  swap(userid_, other->userid_);
  swap(changereaseon_, other->changereaseon_);
  swap(newtotal_, other->newtotal_);
  swap(usertype_, other->usertype_);
  swap(roomid_, other->roomid_);
  swap(carry_, other->carry_);
}

::google::protobuf::Metadata UserChipsLogRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserChipsLogResponse::InitAsDefaultInstance() {
}
class UserChipsLogResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserChipsLogResponse::UserChipsLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.UserChipsLogResponse)
}
UserChipsLogResponse::UserChipsLogResponse(const UserChipsLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.UserChipsLogResponse)
}

void UserChipsLogResponse::SharedCtor() {
}

UserChipsLogResponse::~UserChipsLogResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.UserChipsLogResponse)
  SharedDtor();
}

void UserChipsLogResponse::SharedDtor() {
}

void UserChipsLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserChipsLogResponse& UserChipsLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserChipsLogResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void UserChipsLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.UserChipsLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserChipsLogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserChipsLogResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserChipsLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.UserChipsLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.UserChipsLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.UserChipsLogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserChipsLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.UserChipsLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.UserChipsLogResponse)
}

::google::protobuf::uint8* UserChipsLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.UserChipsLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.UserChipsLogResponse)
  return target;
}

size_t UserChipsLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.UserChipsLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserChipsLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.UserChipsLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserChipsLogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UserChipsLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.UserChipsLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.UserChipsLogResponse)
    MergeFrom(*source);
  }
}

void UserChipsLogResponse::MergeFrom(const UserChipsLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.UserChipsLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserChipsLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.UserChipsLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChipsLogResponse::CopyFrom(const UserChipsLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.UserChipsLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChipsLogResponse::IsInitialized() const {
  return true;
}

void UserChipsLogResponse::Swap(UserChipsLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserChipsLogResponse::InternalSwap(UserChipsLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserChipsLogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BankruptLogRequest::InitAsDefaultInstance() {
}
class BankruptLogRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BankruptLogRequest::kUserIdFieldNumber;
const int BankruptLogRequest::kLogTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankruptLogRequest::BankruptLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.BankruptLogRequest)
}
BankruptLogRequest::BankruptLogRequest(const BankruptLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logtime_, &from.logtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:SvrMsg.BankruptLogRequest)
}

void BankruptLogRequest::SharedCtor() {
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
}

BankruptLogRequest::~BankruptLogRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.BankruptLogRequest)
  SharedDtor();
}

void BankruptLogRequest::SharedDtor() {
}

void BankruptLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BankruptLogRequest& BankruptLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BankruptLogRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void BankruptLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.BankruptLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BankruptLogRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BankruptLogRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_userid(value);
        break;
      }
      // int64 logTime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int64 value = val;
        msg->set_logtime(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BankruptLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.BankruptLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.BankruptLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.BankruptLogRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BankruptLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.BankruptLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.BankruptLogRequest)
}

::google::protobuf::uint8* BankruptLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.BankruptLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.BankruptLogRequest)
  return target;
}

size_t BankruptLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.BankruptLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 logTime = 2;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BankruptLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.BankruptLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BankruptLogRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BankruptLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.BankruptLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.BankruptLogRequest)
    MergeFrom(*source);
  }
}

void BankruptLogRequest::MergeFrom(const BankruptLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.BankruptLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void BankruptLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.BankruptLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankruptLogRequest::CopyFrom(const BankruptLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.BankruptLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankruptLogRequest::IsInitialized() const {
  return true;
}

void BankruptLogRequest::Swap(BankruptLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankruptLogRequest::InternalSwap(BankruptLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logtime_, other->logtime_);
  swap(userid_, other->userid_);
}

::google::protobuf::Metadata BankruptLogRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BankruptLogResponse::InitAsDefaultInstance() {
}
class BankruptLogResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BankruptLogResponse::BankruptLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.BankruptLogResponse)
}
BankruptLogResponse::BankruptLogResponse(const BankruptLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.BankruptLogResponse)
}

void BankruptLogResponse::SharedCtor() {
}

BankruptLogResponse::~BankruptLogResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.BankruptLogResponse)
  SharedDtor();
}

void BankruptLogResponse::SharedDtor() {
}

void BankruptLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BankruptLogResponse& BankruptLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BankruptLogResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void BankruptLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.BankruptLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BankruptLogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BankruptLogResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BankruptLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.BankruptLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.BankruptLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.BankruptLogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BankruptLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.BankruptLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.BankruptLogResponse)
}

::google::protobuf::uint8* BankruptLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.BankruptLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.BankruptLogResponse)
  return target;
}

size_t BankruptLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.BankruptLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BankruptLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.BankruptLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BankruptLogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BankruptLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.BankruptLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.BankruptLogResponse)
    MergeFrom(*source);
  }
}

void BankruptLogResponse::MergeFrom(const BankruptLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.BankruptLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BankruptLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.BankruptLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankruptLogResponse::CopyFrom(const BankruptLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.BankruptLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankruptLogResponse::IsInitialized() const {
  return true;
}

void BankruptLogResponse::Swap(BankruptLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BankruptLogResponse::InternalSwap(BankruptLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BankruptLogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QueryRoomMatchRequest::InitAsDefaultInstance() {
}
class QueryRoomMatchRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRoomMatchRequest::QueryRoomMatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.QueryRoomMatchRequest)
}
QueryRoomMatchRequest::QueryRoomMatchRequest(const QueryRoomMatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.QueryRoomMatchRequest)
}

void QueryRoomMatchRequest::SharedCtor() {
}

QueryRoomMatchRequest::~QueryRoomMatchRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.QueryRoomMatchRequest)
  SharedDtor();
}

void QueryRoomMatchRequest::SharedDtor() {
}

void QueryRoomMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRoomMatchRequest& QueryRoomMatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QueryRoomMatchRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void QueryRoomMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.QueryRoomMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryRoomMatchRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QueryRoomMatchRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryRoomMatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.QueryRoomMatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.QueryRoomMatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.QueryRoomMatchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryRoomMatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.QueryRoomMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.QueryRoomMatchRequest)
}

::google::protobuf::uint8* QueryRoomMatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.QueryRoomMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.QueryRoomMatchRequest)
  return target;
}

size_t QueryRoomMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.QueryRoomMatchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRoomMatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.QueryRoomMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoomMatchRequest* source =
      ::google::protobuf::DynamicCastToGenerated<QueryRoomMatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.QueryRoomMatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.QueryRoomMatchRequest)
    MergeFrom(*source);
  }
}

void QueryRoomMatchRequest::MergeFrom(const QueryRoomMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.QueryRoomMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void QueryRoomMatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.QueryRoomMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoomMatchRequest::CopyFrom(const QueryRoomMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.QueryRoomMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoomMatchRequest::IsInitialized() const {
  return true;
}

void QueryRoomMatchRequest::Swap(QueryRoomMatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRoomMatchRequest::InternalSwap(QueryRoomMatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryRoomMatchRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QueryRoomMatchResponse::InitAsDefaultInstance() {
}
class QueryRoomMatchResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRoomMatchResponse::kIsAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRoomMatchResponse::QueryRoomMatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.QueryRoomMatchResponse)
}
QueryRoomMatchResponse::QueryRoomMatchResponse(const QueryRoomMatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isavailable_ = from.isavailable_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.QueryRoomMatchResponse)
}

void QueryRoomMatchResponse::SharedCtor() {
  isavailable_ = false;
}

QueryRoomMatchResponse::~QueryRoomMatchResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.QueryRoomMatchResponse)
  SharedDtor();
}

void QueryRoomMatchResponse::SharedDtor() {
}

void QueryRoomMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRoomMatchResponse& QueryRoomMatchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QueryRoomMatchResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void QueryRoomMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.QueryRoomMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isavailable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryRoomMatchResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QueryRoomMatchResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool isAvailable = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_isavailable(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryRoomMatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.QueryRoomMatchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isAvailable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.QueryRoomMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.QueryRoomMatchResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryRoomMatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.QueryRoomMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isavailable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.QueryRoomMatchResponse)
}

::google::protobuf::uint8* QueryRoomMatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.QueryRoomMatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isavailable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.QueryRoomMatchResponse)
  return target;
}

size_t QueryRoomMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.QueryRoomMatchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRoomMatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.QueryRoomMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoomMatchResponse* source =
      ::google::protobuf::DynamicCastToGenerated<QueryRoomMatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.QueryRoomMatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.QueryRoomMatchResponse)
    MergeFrom(*source);
  }
}

void QueryRoomMatchResponse::MergeFrom(const QueryRoomMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.QueryRoomMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isavailable() != 0) {
    set_isavailable(from.isavailable());
  }
}

void QueryRoomMatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.QueryRoomMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoomMatchResponse::CopyFrom(const QueryRoomMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.QueryRoomMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoomMatchResponse::IsInitialized() const {
  return true;
}

void QueryRoomMatchResponse::Swap(QueryRoomMatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRoomMatchResponse::InternalSwap(QueryRoomMatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isavailable_, other->isavailable_);
}

::google::protobuf::Metadata QueryRoomMatchResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoomMatchStatusRequest::InitAsDefaultInstance() {
}
class RoomMatchStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomMatchStatusRequest::kIsAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomMatchStatusRequest::RoomMatchStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.RoomMatchStatusRequest)
}
RoomMatchStatusRequest::RoomMatchStatusRequest(const RoomMatchStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isavailable_ = from.isavailable_;
  // @@protoc_insertion_point(copy_constructor:SvrMsg.RoomMatchStatusRequest)
}

void RoomMatchStatusRequest::SharedCtor() {
  isavailable_ = false;
}

RoomMatchStatusRequest::~RoomMatchStatusRequest() {
  // @@protoc_insertion_point(destructor:SvrMsg.RoomMatchStatusRequest)
  SharedDtor();
}

void RoomMatchStatusRequest::SharedDtor() {
}

void RoomMatchStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMatchStatusRequest& RoomMatchStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoomMatchStatusRequest_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void RoomMatchStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.RoomMatchStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isavailable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomMatchStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoomMatchStatusRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool isAvailable = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_isavailable(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomMatchStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.RoomMatchStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isAvailable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.RoomMatchStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.RoomMatchStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomMatchStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.RoomMatchStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isavailable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.RoomMatchStatusRequest)
}

::google::protobuf::uint8* RoomMatchStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.RoomMatchStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isavailable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.RoomMatchStatusRequest)
  return target;
}

size_t RoomMatchStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.RoomMatchStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAvailable = 1;
  if (this->isavailable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMatchStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.RoomMatchStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMatchStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RoomMatchStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.RoomMatchStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.RoomMatchStatusRequest)
    MergeFrom(*source);
  }
}

void RoomMatchStatusRequest::MergeFrom(const RoomMatchStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.RoomMatchStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isavailable() != 0) {
    set_isavailable(from.isavailable());
  }
}

void RoomMatchStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.RoomMatchStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMatchStatusRequest::CopyFrom(const RoomMatchStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.RoomMatchStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMatchStatusRequest::IsInitialized() const {
  return true;
}

void RoomMatchStatusRequest::Swap(RoomMatchStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomMatchStatusRequest::InternalSwap(RoomMatchStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isavailable_, other->isavailable_);
}

::google::protobuf::Metadata RoomMatchStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RoomMatchStatusResponse::InitAsDefaultInstance() {
}
class RoomMatchStatusResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomMatchStatusResponse::RoomMatchStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SvrMsg.RoomMatchStatusResponse)
}
RoomMatchStatusResponse::RoomMatchStatusResponse(const RoomMatchStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SvrMsg.RoomMatchStatusResponse)
}

void RoomMatchStatusResponse::SharedCtor() {
}

RoomMatchStatusResponse::~RoomMatchStatusResponse() {
  // @@protoc_insertion_point(destructor:SvrMsg.RoomMatchStatusResponse)
  SharedDtor();
}

void RoomMatchStatusResponse::SharedDtor() {
}

void RoomMatchStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomMatchStatusResponse& RoomMatchStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RoomMatchStatusResponse_SvrMsg_2eproto.base);
  return *internal_default_instance();
}


void RoomMatchStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrMsg.RoomMatchStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomMatchStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RoomMatchStatusResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomMatchStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SvrMsg.RoomMatchStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SvrMsg.RoomMatchStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SvrMsg.RoomMatchStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomMatchStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SvrMsg.RoomMatchStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SvrMsg.RoomMatchStatusResponse)
}

::google::protobuf::uint8* RoomMatchStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SvrMsg.RoomMatchStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrMsg.RoomMatchStatusResponse)
  return target;
}

size_t RoomMatchStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrMsg.RoomMatchStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomMatchStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrMsg.RoomMatchStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomMatchStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RoomMatchStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrMsg.RoomMatchStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrMsg.RoomMatchStatusResponse)
    MergeFrom(*source);
  }
}

void RoomMatchStatusResponse::MergeFrom(const RoomMatchStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrMsg.RoomMatchStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoomMatchStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrMsg.RoomMatchStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMatchStatusResponse::CopyFrom(const RoomMatchStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrMsg.RoomMatchStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMatchStatusResponse::IsInitialized() const {
  return true;
}

void RoomMatchStatusResponse::Swap(RoomMatchStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomMatchStatusResponse::InternalSwap(RoomMatchStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomMatchStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_SvrMsg_2eproto);
  return ::file_level_metadata_SvrMsg_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SvrMsg
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::SvrMsg::GetGameSvrInstanceRequest* Arena::CreateMaybeMessage< ::SvrMsg::GetGameSvrInstanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GetGameSvrInstanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GetGameSvrInstanceResponse* Arena::CreateMaybeMessage< ::SvrMsg::GetGameSvrInstanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GetGameSvrInstanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CommQueryRequest* Arena::CreateMaybeMessage< ::SvrMsg::CommQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CommQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::DBRow* Arena::CreateMaybeMessage< ::SvrMsg::DBRow >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::DBRow >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CommQueryResponse* Arena::CreateMaybeMessage< ::SvrMsg::CommQueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CommQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::PlayerGameResult* Arena::CreateMaybeMessage< ::SvrMsg::PlayerGameResult >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::PlayerGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::SubmitGameResultRequest* Arena::CreateMaybeMessage< ::SvrMsg::SubmitGameResultRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::SubmitGameResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::SubmitGameResultResponse* Arena::CreateMaybeMessage< ::SvrMsg::SubmitGameResultResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::SubmitGameResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::AddPlayerChipsRequest* Arena::CreateMaybeMessage< ::SvrMsg::AddPlayerChipsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::AddPlayerChipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::AddPlayerChipsResponse* Arena::CreateMaybeMessage< ::SvrMsg::AddPlayerChipsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::AddPlayerChipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserJoinGameRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserJoinGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserJoinGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserJoinGameResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserJoinGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserJoinGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserLeaveGameRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserLeaveGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserLeaveGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserLeaveGameResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserLeaveGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserLeaveGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserEnterRoomRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserEnterRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserEnterRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserEnterRoomResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserEnterRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserEnterRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserQuitRoomRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserQuitRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserQuitRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserQuitRoomResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserQuitRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserQuitRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameSvrStartRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameSvrStartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameSvrStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameSvrStartResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameSvrStartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameSvrStartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::OpenGameRoomRequest* Arena::CreateMaybeMessage< ::SvrMsg::OpenGameRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::OpenGameRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::OpenGameRoomResponse* Arena::CreateMaybeMessage< ::SvrMsg::OpenGameRoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::OpenGameRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameRoomEmptyRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameRoomEmptyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameRoomEmptyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameRoomEmptyResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameRoomEmptyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameRoomEmptyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameSvrAliveRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameSvrAliveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameSvrAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameSvrAliveResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameSvrAliveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameSvrAliveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::HallStartUpRequest* Arena::CreateMaybeMessage< ::SvrMsg::HallStartUpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::HallStartUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::HallStartUpResponse* Arena::CreateMaybeMessage< ::SvrMsg::HallStartUpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::HallStartUpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserOnlineRequest* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserOnlineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserOnlineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserOnlineResponse* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserOnlineResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserOnlineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserGameSessionRequest* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserGameSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserGameSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserGameSessionResponse* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserGameSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserGameSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserGameStatus* Arena::CreateMaybeMessage< ::SvrMsg::UserGameStatus >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserGameStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserInGameRequest* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserInGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserInGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::FlushUserInGameResponse* Arena::CreateMaybeMessage< ::SvrMsg::FlushUserInGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::FlushUserInGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::TellUserOfflineRequest* Arena::CreateMaybeMessage< ::SvrMsg::TellUserOfflineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::TellUserOfflineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::TellUserOfflineResponse* Arena::CreateMaybeMessage< ::SvrMsg::TellUserOfflineResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::TellUserOfflineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::TellUserLogoutGameRequest* Arena::CreateMaybeMessage< ::SvrMsg::TellUserLogoutGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::TellUserLogoutGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::TellUserLogoutGameResponse* Arena::CreateMaybeMessage< ::SvrMsg::TellUserLogoutGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::TellUserLogoutGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::DispatchUserMsgRequest* Arena::CreateMaybeMessage< ::SvrMsg::DispatchUserMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::DispatchUserMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::DispatchUserMsgResponse* Arena::CreateMaybeMessage< ::SvrMsg::DispatchUserMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::DispatchUserMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::HallLoginRecordRequest* Arena::CreateMaybeMessage< ::SvrMsg::HallLoginRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::HallLoginRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::HallLoginRecordResponse* Arena::CreateMaybeMessage< ::SvrMsg::HallLoginRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::HallLoginRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLoginRecordRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameLoginRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLoginRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLoginRecordResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameLoginRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLoginRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CheckUserTokenRequest* Arena::CreateMaybeMessage< ::SvrMsg::CheckUserTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CheckUserTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CheckUserTokenResponse* Arena::CreateMaybeMessage< ::SvrMsg::CheckUserTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CheckUserTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CheckUserLoginRequest* Arena::CreateMaybeMessage< ::SvrMsg::CheckUserLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CheckUserLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::CheckUserLoginResponse* Arena::CreateMaybeMessage< ::SvrMsg::CheckUserLoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::CheckUserLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::KickOutUserRequest* Arena::CreateMaybeMessage< ::SvrMsg::KickOutUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::KickOutUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::KickOutUserResponse* Arena::CreateMaybeMessage< ::SvrMsg::KickOutUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::KickOutUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::ForbiddenUserRequest* Arena::CreateMaybeMessage< ::SvrMsg::ForbiddenUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::ForbiddenUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::ForbiddenUserResponse* Arena::CreateMaybeMessage< ::SvrMsg::ForbiddenUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::ForbiddenUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GetInGameCountRequest* Arena::CreateMaybeMessage< ::SvrMsg::GetInGameCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GetInGameCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GetInGameCountResponse* Arena::CreateMaybeMessage< ::SvrMsg::GetInGameCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GetInGameCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameBuyChipsInRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameBuyChipsInRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameBuyChipsInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameBuyChipsInResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameBuyChipsInResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameBuyChipsInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameStartBetRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameStartBetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameStartBetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameStartBetResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameStartBetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameStartBetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameAddCarryRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameAddCarryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameAddCarryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameAddCarryResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameAddCarryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameAddCarryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::MatchOverAccountRequest* Arena::CreateMaybeMessage< ::SvrMsg::MatchOverAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::MatchOverAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::MatchOverAccountResponse* Arena::CreateMaybeMessage< ::SvrMsg::MatchOverAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::MatchOverAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserGameAccount* Arena::CreateMaybeMessage< ::SvrMsg::UserGameAccount >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserGameAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameOverAccountRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameOverAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameOverAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameOverAccountResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameOverAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameOverAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLeaveAccountRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameLeaveAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLeaveAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLeaveAccountResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameLeaveAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLeaveAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserBoxTimeRecoverRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserBoxTimeRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserBoxTimeRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserBoxTimeRecoverResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserBoxTimeRecoverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserBoxTimeRecoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserBoxTimePauseRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserBoxTimePauseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserBoxTimePauseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserBoxTimePauseResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserBoxTimePauseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserBoxTimePauseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::NotifyTokenLoginRequest* Arena::CreateMaybeMessage< ::SvrMsg::NotifyTokenLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::NotifyTokenLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::NotifyTokenLoginResponse* Arena::CreateMaybeMessage< ::SvrMsg::NotifyTokenLoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::NotifyTokenLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::NotifyOpenRequest* Arena::CreateMaybeMessage< ::SvrMsg::NotifyOpenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::NotifyOpenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::NotifyOpenResponse* Arena::CreateMaybeMessage< ::SvrMsg::NotifyOpenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::NotifyOpenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserLogRecordRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserLogRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserLogRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserLogRecordResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserLogRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserLogRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLogRequest* Arena::CreateMaybeMessage< ::SvrMsg::GameLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::GameLogResponse* Arena::CreateMaybeMessage< ::SvrMsg::GameLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::GameLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::AppLogRecordRequest* Arena::CreateMaybeMessage< ::SvrMsg::AppLogRecordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::AppLogRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::AppLogRecordResponse* Arena::CreateMaybeMessage< ::SvrMsg::AppLogRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::AppLogRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserChipsLogRequest* Arena::CreateMaybeMessage< ::SvrMsg::UserChipsLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserChipsLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::UserChipsLogResponse* Arena::CreateMaybeMessage< ::SvrMsg::UserChipsLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::UserChipsLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::BankruptLogRequest* Arena::CreateMaybeMessage< ::SvrMsg::BankruptLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::BankruptLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::BankruptLogResponse* Arena::CreateMaybeMessage< ::SvrMsg::BankruptLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::BankruptLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::QueryRoomMatchRequest* Arena::CreateMaybeMessage< ::SvrMsg::QueryRoomMatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::QueryRoomMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::QueryRoomMatchResponse* Arena::CreateMaybeMessage< ::SvrMsg::QueryRoomMatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::QueryRoomMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::RoomMatchStatusRequest* Arena::CreateMaybeMessage< ::SvrMsg::RoomMatchStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::RoomMatchStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrMsg::RoomMatchStatusResponse* Arena::CreateMaybeMessage< ::SvrMsg::RoomMatchStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SvrMsg::RoomMatchStatusResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
